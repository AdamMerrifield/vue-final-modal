{"version":3,"file":"VueFinalModal.esm.js","sources":["../src/utils/focusTrap.js","../src/utils/dragResize.js","../src/utils/bodyScrollLock.js","../src/VueFinalModal.vue","../src/VueFinalModal.vue?vue&type=template&id=72c09f54&lang.js","../../../node_modules/.pnpm/style-inject@0.3.0/node_modules/style-inject/dist/style-inject.es.js","../src/ModalsContainer.vue","../src/ModalsContainer.vue?vue&type=template&id=437c4752&lang.js","../src/modalInstance.js"],"sourcesContent":["// stolen from vue-js-modal\n\nconst FOCUSABLE_ELEMENTS_QUERY =\n  'button:not([disabled]), ' +\n  'select:not([disabled]), ' +\n  'a[href]:not([disabled]), ' +\n  'area[href]:not([disabled]), ' +\n  '[contentEditable=\"\"]:not([disabled]), ' +\n  '[contentEditable=\"true\"]:not([disabled]), ' +\n  '[contentEditable=\"TRUE\"]:not([disabled]), ' +\n  'textarea:not([disabled]), ' +\n  'iframe:not([disabled]), ' +\n  'input:not([disabled]), ' +\n  'summary:not([disabled]), ' +\n  '[tabindex]:not([tabindex=\"-1\"])'\n\nconst isTabPressed = event => {\n  return event.key === 'Tab' || event.keyCode === 9\n}\n\nconst querySelectorAll = (element, selector) => {\n  return [...(element.querySelectorAll(selector) || [])]\n}\n\nconst queryFocusableElements = element => {\n  return querySelectorAll(element, FOCUSABLE_ELEMENTS_QUERY)\n}\n\nconst isFocused = element => {\n  return element == document.activeElement\n}\n\nconst isNothingFocused = () => {\n  return !document.activeElement\n}\n\nclass FocusTrap {\n  constructor() {\n    this.root = null\n    this.elements = []\n\n    this.onKeyDown = this.onKeyDown.bind(this)\n    this.enable = this.enable.bind(this)\n    this.disable = this.disable.bind(this)\n    this.firstElement = this.firstElement.bind(this)\n    this.lastElement = this.lastElement.bind(this)\n  }\n\n  lastElement() {\n    return this.elements[this.elements.length - 1] || null\n  }\n\n  firstElement() {\n    return this.elements[0] || null\n  }\n\n  onKeyDown(event) {\n    if (!isTabPressed(event)) {\n      return\n    }\n\n    // SHIFT + TAB\n    if (event.shiftKey) {\n      if (isFocused(this.firstElement())) {\n        this.lastElement().focus()\n        event.preventDefault()\n      }\n      return\n    }\n\n    // TAB\n    if (isNothingFocused() || isFocused(this.lastElement())) {\n      this.firstElement().focus()\n      event.preventDefault()\n      return\n    }\n  }\n\n  enabled() {\n    return !!this.root\n  }\n\n  enable(root) {\n    if (!root) {\n      return\n    }\n\n    this.root = root\n    this.elements = queryFocusableElements(this.root)\n\n    this.root.addEventListener('keydown', this.onKeyDown)\n  }\n\n  disable() {\n    this.root.removeEventListener('keydown', this.onKeyDown)\n    this.root = null\n  }\n}\n\nexport default FocusTrap\n","export const setStyle = (el, key, value) => {\n  const cacheStyle = el.style[key]\n  el.style[key] = value\n  return () => {\n    el.style[key] = cacheStyle\n  }\n}\n\nexport const getPosition = e => {\n  const { clientX: x, clientY: y } = e.targetTouches ? e.targetTouches[0] : e\n  return { x, y }\n}\n\nexport const capitalize = s => {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport const clamp = (min, num, max) => {\n  if (typeof min !== 'number') {\n    min = Math.min(num, max) || num\n  }\n  if (typeof max !== 'number') {\n    max = Math.max(num, min)\n  }\n  return Math.min(Math.max(num, min), max)\n}\n\nexport const trimPx = distance => {\n  return (distance && Number(distance.replace(/px$/, ''))) || 0\n}\n\nexport const validDragElement = (e, el, dragSelector) => {\n  if (dragSelector === '') return true\n  const list = [...el.querySelectorAll(dragSelector)]\n  return list.includes(e.target)\n}\n\nconst pointerType = {\n  down: {\n    pc: 'mousedown',\n    m: 'touchstart'\n  },\n  move: {\n    pc: 'mousemove',\n    m: 'touchmove'\n  },\n  up: {\n    pc: 'mouseup',\n    m: 'touchend'\n  }\n}\nexport const addListener = (type, el, callback) => {\n  el && el.addEventListener(pointerType[type].pc, callback)\n  el && el.addEventListener(pointerType[type].m, callback, { passive: false })\n}\nexport const removeListener = (type, el, callback) => {\n  el && el.removeEventListener(pointerType[type].pc, callback)\n  el && el.removeEventListener(pointerType[type].m, callback)\n}\n","// stolen from body-scroll-lock\n\n// Older browsers don't support event options, feature detect it.\nlet hasPassiveEvents = false\nif (typeof window !== 'undefined') {\n  const passiveTestOptions = {\n    get passive() {\n      hasPassiveEvents = true\n      return undefined\n    }\n  }\n  window.addEventListener('testPassive', null, passiveTestOptions)\n  window.removeEventListener('testPassive', null, passiveTestOptions)\n}\n\nconst isIosDevice =\n  typeof window !== 'undefined' &&\n  window.navigator &&\n  window.navigator.platform &&\n  (/iP(ad|hone|od)/.test(window.navigator.platform) ||\n    (window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1))\n\nlet locks = []\nlet documentListenerAdded = false\nlet clientY = 0\nlet initialClientY = -1\nlet previousBodyOverflowSetting\nlet previousBodyPaddingRight\n\nconst hasScrollbar = el => {\n  if (!el || el.nodeType !== Node.ELEMENT_NODE) return false\n\n  const style = window.getComputedStyle(el)\n  return ['auto', 'scroll'].includes(style.overflowY) && el.scrollHeight > el.clientHeight\n}\n\nconst shouldScroll = (el, delta) => {\n  if (el.scrollTop === 0 && delta < 0) return false\n  if (el.scrollTop + el.clientHeight + delta >= el.scrollHeight && delta > 0) return false\n  return true\n}\n\nconst composedPath = el => {\n  const path = []\n  while (el) {\n    path.push(el)\n    if (el.classList.contains('vfm')) return path\n    el = el.parentElement\n  }\n  return path\n}\n\nconst hasAnyScrollableEl = (el, delta) => {\n  let hasAnyScrollableEl = false\n  const path = composedPath(el)\n  path.forEach(el => {\n    if (hasScrollbar(el) && shouldScroll(el, delta)) {\n      hasAnyScrollableEl = true\n    }\n  })\n  return hasAnyScrollableEl\n}\n\n// returns true if `el` should be allowed to receive touchmove events.\nconst allowTouchMove = el => locks.some(() => hasAnyScrollableEl(el, -clientY))\n\nconst preventDefault = rawEvent => {\n  const e = rawEvent || window.event\n\n  // For the case whereby consumers adds a touchmove event listener to document.\n  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n  // the touchmove event on document will break.\n  if (allowTouchMove(e.target)) {\n    return true\n  }\n  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n  if (e.touches.length > 1) return true\n\n  if (e.preventDefault) e.preventDefault()\n\n  return false\n}\n\nconst setOverflowHidden = options => {\n  // If previousBodyPaddingRight is already set, don't set it again.\n  if (previousBodyPaddingRight === undefined) {\n    const reserveScrollBarGap = !!options && options.reserveScrollBarGap === true\n    const scrollBarGap = window.innerWidth - document.documentElement.clientWidth\n\n    if (reserveScrollBarGap && scrollBarGap > 0) {\n      const computedBodyPaddingRight = parseInt(getComputedStyle(document.body).getPropertyValue('padding-right'), 10)\n      previousBodyPaddingRight = document.body.style.paddingRight\n      document.body.style.paddingRight = `${computedBodyPaddingRight + scrollBarGap}px`\n    }\n  }\n  // If previousBodyOverflowSetting is already set, don't set it again.\n  if (previousBodyOverflowSetting === undefined) {\n    previousBodyOverflowSetting = document.body.style.overflow\n    document.body.style.overflow = 'hidden'\n  }\n}\n\nconst restoreOverflowSetting = () => {\n  if (previousBodyPaddingRight !== undefined) {\n    document.body.style.paddingRight = previousBodyPaddingRight\n\n    // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n    // can be set again.\n    previousBodyPaddingRight = undefined\n  }\n\n  if (previousBodyOverflowSetting !== undefined) {\n    document.body.style.overflow = previousBodyOverflowSetting\n\n    // Restore previousBodyOverflowSetting to undefined\n    // so setOverflowHidden knows it can be set again.\n    previousBodyOverflowSetting = undefined\n  }\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\nconst isTargetElementTotallyScrolled = targetElement =>\n  targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false\n\nconst handleScroll = (event, targetElement) => {\n  clientY = event.targetTouches[0].clientY - initialClientY\n\n  if (allowTouchMove(event.target)) {\n    return false\n  }\n\n  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n    // element is at the top of its scroll.\n    return preventDefault(event)\n  }\n\n  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n    // element is at the bottom of its scroll.\n    return preventDefault(event)\n  }\n\n  event.stopPropagation()\n  return true\n}\n\nexport const disableBodyScroll = (targetElement, options) => {\n  // targetElement must be provided\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.'\n    )\n    return\n  }\n\n  // disableBodyScroll must not have been called on this targetElement before\n  if (locks.some(lock => lock.targetElement === targetElement)) {\n    return\n  }\n\n  const lock = {\n    targetElement,\n    options: options || {}\n  }\n\n  locks = [...locks, lock]\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = event => {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        initialClientY = event.targetTouches[0].clientY\n      }\n    }\n    targetElement.ontouchmove = event => {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        handleScroll(event, targetElement)\n      }\n    }\n\n    if (!documentListenerAdded) {\n      document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined)\n      documentListenerAdded = true\n    }\n  } else {\n    setOverflowHidden(options)\n  }\n}\n\nexport const enableBodyScroll = targetElement => {\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.'\n    )\n    return\n  }\n\n  locks = locks.filter(lock => lock.targetElement !== targetElement)\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = null\n    targetElement.ontouchmove = null\n\n    if (documentListenerAdded && locks.length === 0) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined)\n      documentListenerAdded = false\n    }\n  } else if (!locks.length) {\n    restoreOverflowSetting()\n  }\n}\n","<template>\n  <div\n    v-if=\"displayDirective !== 'if' || visible\"\n    v-show=\"displayDirective !== 'show' || visible\"\n    ref=\"root\"\n    :style=\"bindStyle\"\n    class=\"vfm vfm--inset\"\n    :class=\"[attach === false ? 'vfm--fixed' : 'vfm--absolute', { 'vfm--prevent-none': nonModal }]\"\n    @keydown.esc=\"onEsc\"\n  >\n    <transition v-bind=\"computedOverlayTransition\" v-on=\"overlayListeners\">\n      <div\n        v-if=\"!hideOverlay && visibility.overlay\"\n        class=\"vfm__overlay vfm--overlay vfm--absolute vfm--inset\"\n        :class=\"overlayClass\"\n        :style=\"overlayStyle\"\n      ></div>\n    </transition>\n    <transition v-bind=\"computedTransition\" v-on=\"modalListeners\">\n      <div\n        v-show=\"visibility.modal\"\n        ref=\"vfmContainer\"\n        class=\"vfm__container vfm--absolute vfm--inset vfm--outline-none\"\n        :class=\"classes\"\n        :style=\"styles\"\n        :aria-expanded=\"visibility.modal.toString()\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        tabindex=\"-1\"\n        @mouseup.self=\"onMouseupContainer\"\n        @mousedown.self=\"onMousedown\"\n      >\n        <div\n          ref=\"vfmContent\"\n          class=\"vfm__content\"\n          :class=\"[contentClass, { 'vfm--prevent-auto': nonModal }]\"\n          :style=\"bindContentStyle\"\n          @mousedown=\"onMousedown(null)\"\n        >\n          <slot :params=\"params\" :close=\"() => $emit('update:modelValue', false)\" />\n          <div\n            v-if=\"visibility.resize && visibility.modal\"\n            ref=\"vfmResize\"\n            class=\"vfm__resize vfm--absolute vfm--inset vfm--prevent-none vfm--select-none vfm--touch-none\"\n          >\n            <div\n              v-for=\"direction in resizeDirections\"\n              :key=\"direction\"\n              :direction=\"direction\"\n              :class=\"`vfm--resize-${direction}`\"\n              class=\"vfm--absolute vfm--prevent-auto\"\n            ></div>\n          </div>\n        </div>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\n/* eslint-disable vue/no-mutating-props */\nimport { ref, reactive, onMounted, onBeforeUnmount, computed, nextTick, watch } from 'vue'\nimport FocusTrap from './utils/focusTrap.js'\nimport {\n  setStyle,\n  getPosition,\n  capitalize,\n  clamp,\n  trimPx,\n  validDragElement,\n  addListener,\n  removeListener\n} from './utils/dragResize.js'\nimport { disableBodyScroll, enableBodyScroll } from './utils/bodyScrollLock'\n\nconst noop = () => {}\n\nconst TransitionState = {\n  Enter: 'enter',\n  Entering: 'entering',\n  Leave: 'leave',\n  Leaving: 'leavng'\n}\n\nconst resizeCursor = {\n  t: 'ns-resize',\n  tr: 'nesw-resize',\n  r: 'ew-resize',\n  br: 'nwse-resize',\n  b: 'ns-resize',\n  bl: 'nesw-resize',\n  l: 'ew-resize',\n  tl: 'nwse-resize'\n}\n\nexport default {\n  props: {\n    name: { type: String, default: null },\n    modelValue: { type: Boolean, default: false },\n    displayDirective: {\n      type: String,\n      default: 'show',\n      validator(val) {\n        return ['if', 'show'].indexOf(val) !== -1\n      }\n    },\n    classes: { type: [String, Object, Array], default: '' },\n    overlayClass: { type: [String, Object, Array], default: '' },\n    contentClass: { type: [String, Object, Array], default: '' },\n    styles: { type: [Object, Array], default: () => ({}) },\n    overlayStyle: { type: [Object, Array], default: () => ({}) },\n    contentStyle: { type: [Object, Array], default: () => ({}) },\n    lockScroll: { type: Boolean, default: true },\n    hideOverlay: { type: Boolean, default: false },\n    clickToClose: { type: Boolean, default: true },\n    escToClose: { type: Boolean, default: false },\n    nonModal: { type: Boolean, default: false },\n    attach: {\n      type: null,\n      default: false,\n      validator(val) {\n        const type = typeof val\n\n        if (type === 'boolean' || type === 'string') return true\n\n        return val.nodeType === Node.ELEMENT_NODE\n      }\n    },\n    transition: { type: [String, Object], default: 'vfm' },\n    overlayTransition: { type: [String, Object], default: 'vfm' },\n    zIndexAuto: { type: Boolean, default: true },\n    zIndexBase: { type: [String, Number], default: 1000 },\n    zIndex: { type: [Boolean, String, Number], default: false },\n    focusRetain: { type: Boolean, default: true },\n    focusTrap: { type: Boolean, default: false },\n    fitParent: { type: Boolean, default: true },\n    drag: { type: Boolean, default: false },\n    dragSelector: { type: String, default: '' },\n    keepChangedStyle: { type: Boolean, default: false },\n    resize: {\n      type: Boolean,\n      default: false\n    },\n    resizeDirections: {\n      type: Array,\n      default: () => ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'],\n      validator: val =>\n        ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'].filter(value => val.indexOf(value) !== -1).length === val.length\n    },\n    minWidth: { type: Number, default: 0 },\n    minHeight: { type: Number, default: 0 },\n    maxWidth: { type: Number, default: Infinity },\n    maxHeight: { type: Number, default: Infinity }\n  },\n  emits: [\n    'update:modelValue',\n    'click-outside',\n    'before-open',\n    'opened',\n    '_before-close',\n    'before-close',\n    'closed',\n    '_before-open',\n    '_opened',\n    '_closed',\n    'drag:start',\n    'drag:move',\n    'drag:end',\n    'resize:start',\n    'resize:move',\n    'resize:end'\n  ],\n  setup(props, { emit }) {\n    const uid = Symbol('vfm')\n    const root = ref(null)\n    const vfmContainer = ref(null)\n    const vfmContent = ref(null)\n    const vfmResize = ref(null)\n    const vfmOverlayTransition = ref(null)\n    const vfmTransition = ref(null)\n\n    const modalStackIndex = ref(null)\n    const $focusTrap = new FocusTrap()\n\n    const visible = ref(false)\n    const visibility = reactive({\n      modal: false,\n      overlay: false,\n      resize: false\n    })\n    const overlayTransitionState = ref(null)\n    const overlayListeners = {\n      beforeEnter() {\n        overlayTransitionState.value = TransitionState.Entering\n      },\n      afterEnter() {\n        overlayTransitionState.value = TransitionState.Enter\n      },\n      beforeLeave() {\n        overlayTransitionState.value = TransitionState.Leaving\n      },\n      afterLeave() {\n        overlayTransitionState.value = TransitionState.Leave\n      }\n    }\n\n    const modalTransitionState = ref(null)\n    const modalListeners = {\n      beforeEnter() {\n        modalTransitionState.value = TransitionState.Entering\n      },\n      afterEnter() {\n        modalTransitionState.value = TransitionState.Enter\n      },\n      beforeLeave() {\n        modalTransitionState.value = TransitionState.Leaving\n      },\n      afterLeave() {\n        modalTransitionState.value = TransitionState.Leave\n      }\n    }\n\n    const _stopEvent = ref(false)\n    const params = ref({})\n    const dragResizeStyle = ref({})\n    const _state = ref(null)\n    const lastMousedownEl = ref(null)\n\n    let resolveToggle = noop\n    let rejectToggle = noop\n\n    const computedOverlayTransition = computed(() => {\n      if (typeof props.overlayTransition === 'string') return { name: props.overlayTransition }\n      return { ...props.overlayTransition }\n    })\n\n    const computedTransition = computed(() => {\n      if (typeof props.transition === 'string') return { name: props.transition }\n      return { ...props.transition }\n    })\n\n    const isComponentReadyToBeDestroyed = computed(() => {\n      return (\n        (props.hideOverlay || overlayTransitionState.value === TransitionState.Leave) &&\n        modalTransitionState.value === TransitionState.Leave\n      )\n    })\n\n    const calculateZIndex = computed(() => {\n      if (props.zIndex === false) {\n        if (props.zIndexAuto) {\n          return +props.zIndexBase + 2 * (modalStackIndex.value || 0)\n        } else {\n          return false\n        }\n      } else {\n        return props.zIndex\n      }\n    })\n\n    const bindStyle = computed(() => {\n      return {\n        ...(calculateZIndex.value !== false && {\n          zIndex: calculateZIndex.value\n        })\n      }\n    })\n\n    const bindContentStyle = computed(() => {\n      let style = [dragResizeStyle.value]\n      Array.isArray(props.contentStyle) ? style.push(...props.contentStyle) : style.push(props.contentStyle)\n      return style\n    })\n\n    watch(\n      () => props.modelValue,\n      value => {\n        if (_stopEvent.value) {\n          _stopEvent.value = false\n          return\n        }\n        mounted()\n        if (!value) {\n          emit('_before-close', createModalEvent({ type: '_before-close' }))\n          if (emitEvent('before-close', true)) {\n            rejectToggle('hide')\n            return\n          }\n          close()\n        }\n      }\n    )\n    watch(() => props.lockScroll, handleLockScroll)\n    watch(\n      () => props.hideOverlay,\n      value => {\n        if (props.modelValue && !value) {\n          visibility.overlay = true\n        }\n      }\n    )\n    watch(() => props.attach, mounted)\n    watch(\n      isComponentReadyToBeDestroyed,\n      val => {\n        if (val) {\n          visible.value = false\n          vfmContainer.value.style.display = 'none'\n        }\n      },\n      {\n        flush: 'post'\n      }\n    )\n    watch(\n      () => props.drag,\n      val => {\n        if (visible.value) {\n          val ? addDragDown() : removeDragDown()\n        }\n      }\n    )\n    watch(\n      () => props.resize,\n      val => {\n        if (visible.value) {\n          val ? addResizeDown() : removeResizeDown()\n        }\n      }\n    )\n    watch(\n      () => props.keepChangedStyle,\n      val => {\n        if (!val) {\n          dragResizeStyle.value = {}\n        }\n      }\n    )\n\n    /**\n     * Side effect about modal transtion state update\n     */\n    watch(modalTransitionState, state => {\n      switch (state) {\n        case TransitionState.Enter:\n          if (props.focusRetain || props.focusTrap) {\n            vfmContainer.value.focus()\n          }\n          props.focusTrap && $focusTrap.enable(vfmContainer.value)\n          props.drag && addDragDown()\n          props.resize && addResizeDown()\n\n          emit('_opened')\n          emit('opened', createModalEvent({ type: 'opened' }))\n          resolveToggle('show')\n          break\n        case TransitionState.Leaving:\n          if ($focusTrap.enabled()) {\n            $focusTrap.disable()\n          }\n          break\n        case TransitionState.Leave:\n          modalStackIndex.value = null\n          props.lockScroll && enableBodyScroll(vfmContainer.value)\n          if (!props.keepChangedStyle) {\n            dragResizeStyle.value = {}\n          }\n\n          let stopEvent = false\n          const event = createModalEvent({\n            type: 'closed',\n            stop() {\n              stopEvent = true\n            }\n          })\n          emit('_closed')\n          emit('closed', event)\n          resolveToggle('hide')\n          if (stopEvent) return\n          params.value = {}\n          break\n      }\n    })\n\n    props.api.modals.push(getModalInfo())\n\n    onMounted(() => {\n      mounted()\n    })\n    onBeforeUnmount(() => {\n      close()\n      props.lockScroll && vfmContainer.value && enableBodyScroll(vfmContainer.value)\n      root?.value?.remove()\n\n      let index = props.api.modals.findIndex(vm => vm.uid === uid)\n\n      props.api.modals.splice(index, 1)\n    })\n    function getModalInfo() {\n      return {\n        uid,\n        props,\n        emit,\n        vfmContainer,\n        vfmContent,\n        vfmResize,\n        vfmOverlayTransition,\n        vfmTransition,\n        getAttachElement,\n        modalStackIndex,\n        visibility,\n        handleLockScroll,\n        $focusTrap,\n        toggle,\n        params\n      }\n    }\n    function mounted() {\n      if (props.modelValue) {\n        emit('_before-open', createModalEvent({ type: '_before-open' }))\n        if (emitEvent('before-open', false)) {\n          rejectToggle('show')\n          return\n        }\n\n        let target = getAttachElement()\n        if (target || props.attach === false) {\n          props.attach !== false && target.appendChild(root.value)\n\n          let index = props.api.openedModals.findIndex(vm => vm.uid === uid)\n\n          if (index !== -1) {\n            // if this is already exist in modalStack, delete it\n            props.api.openedModals.splice(index, 1)\n          }\n          props.api.openedModals.push(getModalInfo())\n\n          modalStackIndex.value = props.api.openedModals.length - 1\n\n          handleLockScroll()\n\n          props.api.openedModals\n            .filter(vm => vm.uid !== uid)\n            .forEach((vm, index) => {\n              if (vm.getAttachElement() === target) {\n                // if vm and this have the same attach element\n                vm.modalStackIndex.value = index\n                vm.visibility.overlay = false\n              }\n            })\n\n          visible.value = true\n          startTransitionEnter()\n        } else if (target !== false) {\n          console.warn('Unable to locate target '.concat(props.attach))\n        }\n      }\n    }\n    function close() {\n      let index = props.api.openedModals.findIndex(vm => vm.uid === uid)\n      if (index !== -1) {\n        // remove this in modalStack\n        props.api.openedModals.splice(index, 1)\n      }\n      if (props.api.openedModals.length > 0) {\n        // If there are still nested modals opened\n        const $_vm = props.api.openedModals[props.api.openedModals.length - 1]\n        $_vm.props.focusTrap && $_vm.$focusTrap.firstElement().focus()\n        if ($_vm.props.focusRetain || $_vm.props.focusTrap) {\n          $_vm.vfmContainer.value.focus()\n        }\n        !$_vm.props.hideOverlay && ($_vm.visibility.overlay = true)\n      }\n      props.drag && removeDragDown()\n      props.resize && removeResizeDown()\n      _state.value = null\n\n      startTransitionLeave()\n    }\n    function handleLockScroll() {\n      if (props.modelValue) {\n        nextTick(() => {\n          if (props.lockScroll) {\n            disableBodyScroll(vfmContainer.value, {\n              reserveScrollBarGap: true\n            })\n          } else {\n            enableBodyScroll(vfmContainer.value)\n          }\n        })\n      }\n    }\n    function getAttachElement() {\n      let target\n      if (props.attach === false) {\n        target = false\n      } else if (typeof props.attach === 'string') {\n        // CSS selector\n        if (window) {\n          target = window.document.querySelector(props.attach)\n        } else {\n          target = false\n        }\n      } else {\n        // DOM Element\n        target = props.attach\n      }\n      return target\n    }\n    function startTransitionEnter() {\n      visibility.overlay = true\n      visibility.modal = true\n    }\n    function startTransitionLeave() {\n      visibility.overlay = false\n      visibility.modal = false\n    }\n\n    function onMousedown(e) {\n      lastMousedownEl.value = e?.target\n    }\n    function onMouseupContainer() {\n      // skip when the lastMousedownEl didn't equal vfmContainer\n      if (lastMousedownEl.value !== vfmContainer.value) return\n      // skip when state equal 'resize:move'\n      if (_state.value === 'resize:move') return\n      emit('click-outside', createModalEvent({ type: 'click-outside' }))\n      props.clickToClose && emit('update:modelValue', false)\n    }\n    function onEsc() {\n      if (visible.value && props.escToClose) {\n        emit('update:modelValue', false)\n      }\n    }\n    function createModalEvent(eventProps = {}) {\n      return {\n        ref: getModalInfo(),\n        ...eventProps\n      }\n    }\n    function emitEvent(eventType, value) {\n      let stopEvent = false\n      const event = createModalEvent({\n        type: eventType,\n        stop() {\n          stopEvent = true\n        }\n      })\n      emit(eventType, event)\n      if (stopEvent) {\n        _stopEvent.value = true\n        nextTick(() => {\n          emit('update:modelValue', value)\n        })\n        return true\n      }\n      return false\n    }\n    function emitState(e, state, action) {\n      _state.value = `${state}:${action}`\n      emit(_state.value, e)\n    }\n    function toggle(show, _params) {\n      return new Promise((resolve, reject) => {\n        resolveToggle = res => {\n          resolve(res)\n          resolveToggle = noop\n        }\n        rejectToggle = err => {\n          reject(err)\n          rejectToggle = noop\n        }\n        const value = typeof show === 'boolean' ? show : !props.modelValue\n        if (value && arguments.length === 2) {\n          params.value = _params\n        }\n        emit('update:modelValue', value)\n      })\n    }\n    function pointerDown(e) {\n      e.stopPropagation()\n      const STATE_RESIZE = 'resize'\n      const STATE_DRAG = 'drag'\n      const direction = e.target.getAttribute('direction')\n      let state\n      if (direction) {\n        state = STATE_RESIZE\n      } else if (validDragElement(e, vfmContent.value, props.dragSelector)) {\n        state = STATE_DRAG\n      } else {\n        return\n      }\n      emitState(e, state, 'start')\n      const down = getPosition(e)\n      const rectContainer = vfmContainer.value.getBoundingClientRect()\n      const rectContent = vfmContent.value.getBoundingClientRect()\n      const isAbsolute = window.getComputedStyle(vfmContent.value).position === 'absolute'\n      const position = {\n        top: trimPx(dragResizeStyle.value.top),\n        left: trimPx(dragResizeStyle.value.left)\n      }\n      const limit = (() => {\n        if (props.fitParent) {\n          const limit = {\n            absolute() {\n              return {\n                minTop: 0,\n                minLeft: 0,\n                maxTop: rectContainer.height - rectContent.height,\n                maxLeft: rectContainer.width - rectContent.width\n              }\n            },\n            relative() {\n              return {\n                minTop: position.top + rectContainer.top - rectContent.top,\n                minLeft: position.left + rectContainer.left - rectContent.left,\n                maxTop: position.top + rectContainer.bottom - rectContent.bottom,\n                maxLeft: position.left + rectContainer.right - rectContent.right\n              }\n            }\n          }\n          return isAbsolute ? limit.absolute() : limit.relative()\n        } else {\n          return {}\n        }\n      })()\n      const resetBodyCursor = state === STATE_RESIZE && setStyle(document.body, 'cursor', resizeCursor[direction])\n\n      const moving = e => {\n        // onPointerMove\n        e.stopPropagation()\n        emitState(e, state, 'move')\n        const move = getPosition(e)\n        let offset = {\n          x: move.x - down.x,\n          y: move.y - down.y\n        }\n        if (state === STATE_RESIZE) {\n          offset = getResizeOffset(direction, offset, rectContainer, rectContent, isAbsolute)\n        }\n\n        let top\n        let left\n        if (isAbsolute) {\n          top = rectContent.top - rectContainer.top + offset.y\n          left = rectContent.left - rectContainer.left + offset.x\n        } else {\n          top = position.top + offset.y\n          left = position.left + offset.x\n        }\n        if (state === STATE_DRAG && props.fitParent) {\n          top = clamp(limit.minTop, top, limit.maxTop)\n          left = clamp(limit.minLeft, left, limit.maxLeft)\n        }\n        const style = {\n          position: 'relative',\n          top: top + 'px',\n          left: left + 'px',\n          margin: 'unset',\n          touchAction: 'none',\n          ...(isAbsolute && {\n            position: 'absolute',\n            transform: 'unset',\n            width: rectContent.width + 'px',\n            height: rectContent.height + 'px'\n          }),\n          ...(offset.width && { width: offset.width + 'px' }),\n          ...(offset.height && { height: offset.height + 'px' })\n        }\n\n        dragResizeStyle.value = {\n          ...dragResizeStyle.value,\n          ...style\n        }\n      }\n      const end = e => {\n        // onPointerUp\n        e.stopPropagation()\n        if (state === STATE_RESIZE) {\n          resetBodyCursor && resetBodyCursor()\n        }\n        // Excute onMouseupContainer before trigger emitState\n        setTimeout(() => {\n          emitState(e, state, 'end')\n        })\n        removeListener('move', document, moving)\n        removeListener('up', document, end)\n      }\n      addListener('move', document, moving)\n      addListener('up', document, end)\n    }\n    function addDragDown() {\n      addListener('down', vfmContent.value, pointerDown)\n      dragResizeStyle.value.touchAction = 'none'\n    }\n    function removeDragDown() {\n      removeListener('down', vfmContent.value, pointerDown)\n    }\n    function addResizeDown() {\n      visibility.resize = true\n      nextTick(() => {\n        addListener('down', vfmResize.value, pointerDown)\n      })\n    }\n    function removeResizeDown() {\n      removeListener('down', vfmResize.value, pointerDown)\n      visibility.resize = false\n    }\n    function getResizeOffset(direction, offset, rectContainer, rectContent, isAbsolute) {\n      const setOffset = dir => {\n        let offsetAxis = offset[dir.axis]\n        offsetAxis = props.fitParent ? clamp(dir.min, offsetAxis, dir.max) : offsetAxis\n        let edge = clamp(dir.minEdge, dir.getEdge(offsetAxis), dir.maxEdge)\n        offsetAxis = dir.getOffsetAxis(edge, isAbsolute)\n        return {\n          [dir.edgeName]: edge,\n          [dir.axis]: offsetAxis\n        }\n      }\n\n      const getDirectionInfo = (position, edgeName, axis, isPositive) => {\n        const rectContentEdge = rectContent[edgeName]\n        const positionOffset = rectContainer[position] - rectContent[position]\n        const EdgeName = capitalize(edgeName)\n        return {\n          axis,\n          edgeName,\n          min: isPositive ? positionOffset : -rectContentEdge,\n          max: isPositive ? rectContentEdge : positionOffset,\n          minEdge: props[`min${EdgeName}`],\n          maxEdge: props[`max${EdgeName}`],\n          getEdge: offsetAxis => rectContent[edgeName] - offsetAxis * (isPositive ? 1 : -1),\n          getOffsetAxis: (edge, isAbsolute) => {\n            const offsetAxis = rectContent[edgeName] - edge\n            if (isAbsolute) {\n              return isPositive ? offsetAxis : 0\n            } else {\n              return ((isPositive ? 1 : -1) * offsetAxis) / 2\n            }\n          }\n        }\n      }\n\n      const directions = {\n        t: ['top', 'height', 'y', true],\n        b: ['bottom', 'height', 'y', false],\n        l: ['left', 'width', 'x', true],\n        r: ['right', 'width', 'x', false]\n      }\n\n      let _offset = { x: 0, y: 0 }\n      direction.split('').forEach(dir => {\n        const directionInfo = getDirectionInfo(...directions[dir])\n        _offset = {\n          ..._offset,\n          ...setOffset(directionInfo)\n        }\n      })\n      return _offset\n    }\n    return {\n      root,\n      vfmContainer,\n      vfmContent,\n      vfmResize,\n      vfmOverlayTransition,\n      vfmTransition,\n      computedOverlayTransition,\n      computedTransition,\n      overlayListeners,\n      modalListeners,\n      visible,\n      visibility,\n      params,\n      calculateZIndex,\n      bindStyle,\n      bindContentStyle,\n      onMousedown,\n      onMouseupContainer,\n      onEsc\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\n.vfm--fixed {\n  position: fixed;\n}\n.vfm--absolute {\n  position: absolute;\n}\n.vfm--inset {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.vfm--overlay {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.vfm--prevent-none {\n  pointer-events: none;\n}\n.vfm--prevent-auto {\n  pointer-events: auto;\n}\n.vfm--outline-none:focus {\n  outline: none;\n}\n.vfm-enter-active,\n.vfm-leave-active {\n  transition: opacity 0.2s;\n}\n.vfm-enter-from,\n.vfm-leave-to {\n  opacity: 0;\n}\n\n.vfm--touch-none {\n  touch-action: none;\n}\n.vfm--select-none {\n  user-select: none;\n}\n\n.vfm--resize-tr,\n.vfm--resize-br,\n.vfm--resize-bl,\n.vfm--resize-tl {\n  width: 12px;\n  height: 12px;\n  z-index: 10;\n}\n\n.vfm--resize-t {\n  top: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-tr {\n  top: -6px;\n  right: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-r {\n  top: 0;\n  right: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-br {\n  bottom: -6px;\n  right: -6px;\n  cursor: nwse-resize;\n}\n.vfm--resize-b {\n  bottom: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-bl {\n  bottom: -6px;\n  left: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-l {\n  top: 0;\n  left: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-tl {\n  top: -6px;\n  left: -6px;\n  cursor: nwse-resize;\n}\n</style>\n","<template>\n  <div\n    v-if=\"displayDirective !== 'if' || visible\"\n    v-show=\"displayDirective !== 'show' || visible\"\n    ref=\"root\"\n    :style=\"bindStyle\"\n    class=\"vfm vfm--inset\"\n    :class=\"[attach === false ? 'vfm--fixed' : 'vfm--absolute', { 'vfm--prevent-none': nonModal }]\"\n    @keydown.esc=\"onEsc\"\n  >\n    <transition v-bind=\"computedOverlayTransition\" v-on=\"overlayListeners\">\n      <div\n        v-if=\"!hideOverlay && visibility.overlay\"\n        class=\"vfm__overlay vfm--overlay vfm--absolute vfm--inset\"\n        :class=\"overlayClass\"\n        :style=\"overlayStyle\"\n      ></div>\n    </transition>\n    <transition v-bind=\"computedTransition\" v-on=\"modalListeners\">\n      <div\n        v-show=\"visibility.modal\"\n        ref=\"vfmContainer\"\n        class=\"vfm__container vfm--absolute vfm--inset vfm--outline-none\"\n        :class=\"classes\"\n        :style=\"styles\"\n        :aria-expanded=\"visibility.modal.toString()\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        tabindex=\"-1\"\n        @mouseup.self=\"onMouseupContainer\"\n        @mousedown.self=\"onMousedown\"\n      >\n        <div\n          ref=\"vfmContent\"\n          class=\"vfm__content\"\n          :class=\"[contentClass, { 'vfm--prevent-auto': nonModal }]\"\n          :style=\"bindContentStyle\"\n          @mousedown=\"onMousedown(null)\"\n        >\n          <slot :params=\"params\" :close=\"() => $emit('update:modelValue', false)\" />\n          <div\n            v-if=\"visibility.resize && visibility.modal\"\n            ref=\"vfmResize\"\n            class=\"vfm__resize vfm--absolute vfm--inset vfm--prevent-none vfm--select-none vfm--touch-none\"\n          >\n            <div\n              v-for=\"direction in resizeDirections\"\n              :key=\"direction\"\n              :direction=\"direction\"\n              :class=\"`vfm--resize-${direction}`\"\n              class=\"vfm--absolute vfm--prevent-auto\"\n            ></div>\n          </div>\n        </div>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\n/* eslint-disable vue/no-mutating-props */\nimport { ref, reactive, onMounted, onBeforeUnmount, computed, nextTick, watch } from 'vue'\nimport FocusTrap from './utils/focusTrap.js'\nimport {\n  setStyle,\n  getPosition,\n  capitalize,\n  clamp,\n  trimPx,\n  validDragElement,\n  addListener,\n  removeListener\n} from './utils/dragResize.js'\nimport { disableBodyScroll, enableBodyScroll } from './utils/bodyScrollLock'\n\nconst noop = () => {}\n\nconst TransitionState = {\n  Enter: 'enter',\n  Entering: 'entering',\n  Leave: 'leave',\n  Leaving: 'leavng'\n}\n\nconst resizeCursor = {\n  t: 'ns-resize',\n  tr: 'nesw-resize',\n  r: 'ew-resize',\n  br: 'nwse-resize',\n  b: 'ns-resize',\n  bl: 'nesw-resize',\n  l: 'ew-resize',\n  tl: 'nwse-resize'\n}\n\nexport default {\n  props: {\n    name: { type: String, default: null },\n    modelValue: { type: Boolean, default: false },\n    displayDirective: {\n      type: String,\n      default: 'show',\n      validator(val) {\n        return ['if', 'show'].indexOf(val) !== -1\n      }\n    },\n    classes: { type: [String, Object, Array], default: '' },\n    overlayClass: { type: [String, Object, Array], default: '' },\n    contentClass: { type: [String, Object, Array], default: '' },\n    styles: { type: [Object, Array], default: () => ({}) },\n    overlayStyle: { type: [Object, Array], default: () => ({}) },\n    contentStyle: { type: [Object, Array], default: () => ({}) },\n    lockScroll: { type: Boolean, default: true },\n    hideOverlay: { type: Boolean, default: false },\n    clickToClose: { type: Boolean, default: true },\n    escToClose: { type: Boolean, default: false },\n    nonModal: { type: Boolean, default: false },\n    attach: {\n      type: null,\n      default: false,\n      validator(val) {\n        const type = typeof val\n\n        if (type === 'boolean' || type === 'string') return true\n\n        return val.nodeType === Node.ELEMENT_NODE\n      }\n    },\n    transition: { type: [String, Object], default: 'vfm' },\n    overlayTransition: { type: [String, Object], default: 'vfm' },\n    zIndexAuto: { type: Boolean, default: true },\n    zIndexBase: { type: [String, Number], default: 1000 },\n    zIndex: { type: [Boolean, String, Number], default: false },\n    focusRetain: { type: Boolean, default: true },\n    focusTrap: { type: Boolean, default: false },\n    fitParent: { type: Boolean, default: true },\n    drag: { type: Boolean, default: false },\n    dragSelector: { type: String, default: '' },\n    keepChangedStyle: { type: Boolean, default: false },\n    resize: {\n      type: Boolean,\n      default: false\n    },\n    resizeDirections: {\n      type: Array,\n      default: () => ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'],\n      validator: val =>\n        ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'].filter(value => val.indexOf(value) !== -1).length === val.length\n    },\n    minWidth: { type: Number, default: 0 },\n    minHeight: { type: Number, default: 0 },\n    maxWidth: { type: Number, default: Infinity },\n    maxHeight: { type: Number, default: Infinity }\n  },\n  emits: [\n    'update:modelValue',\n    'click-outside',\n    'before-open',\n    'opened',\n    '_before-close',\n    'before-close',\n    'closed',\n    '_before-open',\n    '_opened',\n    '_closed',\n    'drag:start',\n    'drag:move',\n    'drag:end',\n    'resize:start',\n    'resize:move',\n    'resize:end'\n  ],\n  setup(props, { emit }) {\n    const uid = Symbol('vfm')\n    const root = ref(null)\n    const vfmContainer = ref(null)\n    const vfmContent = ref(null)\n    const vfmResize = ref(null)\n    const vfmOverlayTransition = ref(null)\n    const vfmTransition = ref(null)\n\n    const modalStackIndex = ref(null)\n    const $focusTrap = new FocusTrap()\n\n    const visible = ref(false)\n    const visibility = reactive({\n      modal: false,\n      overlay: false,\n      resize: false\n    })\n    const overlayTransitionState = ref(null)\n    const modalTransitionState = ref(null)\n    const _stopEvent = ref(false)\n    const params = ref({})\n    const dragResizeStyle = ref({})\n    const _state = ref(null)\n    const lastMousedownEl = ref(null)\n\n    let resolveToggle = noop\n    let rejectToggle = noop\n\n    const computedOverlayTransition = computed(() => {\n      if (typeof props.overlayTransition === 'string') return { name: props.overlayTransition }\n      return { ...props.overlayTransition }\n    })\n\n    const computedTransition = computed(() => {\n      if (typeof props.transition === 'string') return { name: props.transition }\n      return { ...props.transition }\n    })\n\n    const isComponentReadyToBeDestroyed = computed(() => {\n      return (\n        (props.hideOverlay || overlayTransitionState.value === TransitionState.Leave) &&\n        modalTransitionState.value === TransitionState.Leave\n      )\n    })\n\n    const calculateZIndex = computed(() => {\n      if (props.zIndex === false) {\n        if (props.zIndexAuto) {\n          return +props.zIndexBase + 2 * (modalStackIndex.value || 0)\n        } else {\n          return false\n        }\n      } else {\n        return props.zIndex\n      }\n    })\n\n    const bindStyle = computed(() => {\n      return {\n        ...(calculateZIndex.value !== false && {\n          zIndex: calculateZIndex.value\n        })\n      }\n    })\n\n    const bindContentStyle = computed(() => {\n      let style = [dragResizeStyle.value]\n      Array.isArray(props.contentStyle) ? style.push(...props.contentStyle) : style.push(props.contentStyle)\n      return style\n    })\n\n    const overlayListeners = {\n      beforeEnter() {\n        overlayTransitionState.value = TransitionState.Entering\n      },\n      afterEnter() {\n        overlayTransitionState.value = TransitionState.Enter\n      },\n      beforeLeave() {\n        overlayTransitionState.value = TransitionState.Leaving\n      },\n      afterLeave() {\n        overlayTransitionState.value = TransitionState.Leave\n      }\n    }\n\n    const modalListeners = {\n      beforeEnter() {\n        modalTransitionState.value = TransitionState.Entering\n      },\n      afterEnter() {\n        modalTransitionState.value = TransitionState.Enter\n      },\n      beforeLeave() {\n        modalTransitionState.value = TransitionState.Leaving\n      },\n      afterLeave() {\n        modalTransitionState.value = TransitionState.Leave\n      }\n    }\n\n    watch(\n      () => props.modelValue,\n      value => {\n        if (_stopEvent.value) {\n          _stopEvent.value = false\n          return\n        }\n        mounted()\n        if (!value) {\n          emit('_before-close', createModalEvent({ type: '_before-close' }))\n          if (emitEvent('before-close', true)) {\n            rejectToggle('hide')\n            return\n          }\n          close()\n        }\n      }\n    )\n    watch(() => props.lockScroll, handleLockScroll)\n    watch(\n      () => props.hideOverlay,\n      value => {\n        if (props.modelValue && !value) {\n          visibility.overlay = true\n        }\n      }\n    )\n    watch(() => props.attach, mounted)\n    watch(\n      isComponentReadyToBeDestroyed,\n      val => {\n        if (val) {\n          visible.value = false\n          vfmContainer.value.style.display = 'none'\n        }\n      },\n      {\n        flush: 'post'\n      }\n    )\n    watch(\n      () => props.drag,\n      val => {\n        if (visible.value) {\n          val ? addDragDown() : removeDragDown()\n        }\n      }\n    )\n    watch(\n      () => props.resize,\n      val => {\n        if (visible.value) {\n          val ? addResizeDown() : removeResizeDown()\n        }\n      }\n    )\n    watch(\n      () => props.keepChangedStyle,\n      val => {\n        if (!val) {\n          dragResizeStyle.value = {}\n        }\n      }\n    )\n\n    /**\n     * Side effect about modal transtion state update\n     */\n    watch(modalTransitionState, state => {\n      switch (state) {\n        case TransitionState.Enter:\n          if (props.focusRetain || props.focusTrap) {\n            vfmContainer.value.focus()\n          }\n          props.focusTrap && $focusTrap.enable(vfmContainer.value)\n          props.drag && addDragDown()\n          props.resize && addResizeDown()\n\n          emit('_opened')\n          emit('opened', createModalEvent({ type: 'opened' }))\n          resolveToggle('show')\n          break\n        case TransitionState.Leaving:\n          if ($focusTrap.enabled()) {\n            $focusTrap.disable()\n          }\n          break\n        case TransitionState.Leave:\n          modalStackIndex.value = null\n          props.lockScroll && enableBodyScroll(vfmContainer.value)\n          if (!props.keepChangedStyle) {\n            dragResizeStyle.value = {}\n          }\n\n          let stopEvent = false\n          const event = createModalEvent({\n            type: 'closed',\n            stop() {\n              stopEvent = true\n            }\n          })\n          emit('_closed')\n          emit('closed', event)\n          resolveToggle('hide')\n          if (stopEvent) return\n          params.value = {}\n          break\n      }\n    })\n\n    props.api.modals.push(getModalInfo())\n\n    onMounted(() => {\n      mounted()\n    })\n    onBeforeUnmount(() => {\n      close()\n      props.lockScroll && vfmContainer.value && enableBodyScroll(vfmContainer.value)\n      root?.value?.remove()\n\n      let index = props.api.modals.findIndex(vm => vm.uid === uid)\n\n      props.api.modals.splice(index, 1)\n    })\n    function getModalInfo() {\n      return {\n        uid,\n        props,\n        emit,\n        vfmContainer,\n        vfmContent,\n        vfmResize,\n        vfmOverlayTransition,\n        vfmTransition,\n        getAttachElement,\n        modalStackIndex,\n        visibility,\n        handleLockScroll,\n        $focusTrap,\n        toggle,\n        params\n      }\n    }\n    function mounted() {\n      if (props.modelValue) {\n        emit('_before-open', createModalEvent({ type: '_before-open' }))\n        if (emitEvent('before-open', false)) {\n          rejectToggle('show')\n          return\n        }\n\n        let target = getAttachElement()\n        if (target || props.attach === false) {\n          props.attach !== false && target.appendChild(root.value)\n\n          let index = props.api.openedModals.findIndex(vm => vm.uid === uid)\n\n          if (index !== -1) {\n            // if this is already exist in modalStack, delete it\n            props.api.openedModals.splice(index, 1)\n          }\n          props.api.openedModals.push(getModalInfo())\n\n          modalStackIndex.value = props.api.openedModals.length - 1\n\n          handleLockScroll()\n\n          props.api.openedModals\n            .filter(vm => vm.uid !== uid)\n            .forEach((vm, index) => {\n              if (vm.getAttachElement() === target) {\n                // if vm and this have the same attach element\n                vm.modalStackIndex.value = index\n                vm.visibility.overlay = false\n              }\n            })\n\n          visible.value = true\n          startTransitionEnter()\n        } else if (target !== false) {\n          console.warn('Unable to locate target '.concat(props.attach))\n        }\n      }\n    }\n    function close() {\n      let index = props.api.openedModals.findIndex(vm => vm.uid === uid)\n      if (index !== -1) {\n        // remove this in modalStack\n        props.api.openedModals.splice(index, 1)\n      }\n      if (props.api.openedModals.length > 0) {\n        // If there are still nested modals opened\n        const $_vm = props.api.openedModals[props.api.openedModals.length - 1]\n        $_vm.props.focusTrap && $_vm.$focusTrap.firstElement().focus()\n        if ($_vm.props.focusRetain || $_vm.props.focusTrap) {\n          $_vm.vfmContainer.value.focus()\n        }\n        !$_vm.props.hideOverlay && ($_vm.visibility.overlay = true)\n      }\n      props.drag && removeDragDown()\n      props.resize && removeResizeDown()\n      _state.value = null\n\n      startTransitionLeave()\n    }\n    function handleLockScroll() {\n      if (props.modelValue) {\n        nextTick(() => {\n          if (props.lockScroll) {\n            disableBodyScroll(vfmContainer.value, {\n              reserveScrollBarGap: true\n            })\n          } else {\n            enableBodyScroll(vfmContainer.value)\n          }\n        })\n      }\n    }\n    function getAttachElement() {\n      let target\n      if (props.attach === false) {\n        target = false\n      } else if (typeof props.attach === 'string') {\n        // CSS selector\n        if (window) {\n          target = window.document.querySelector(props.attach)\n        } else {\n          target = false\n        }\n      } else {\n        // DOM Element\n        target = props.attach\n      }\n      return target\n    }\n    function startTransitionEnter() {\n      visibility.overlay = true\n      visibility.modal = true\n    }\n    function startTransitionLeave() {\n      visibility.overlay = false\n      visibility.modal = false\n    }\n\n    function onMousedown(e) {\n      lastMousedownEl.value = e?.target\n    }\n    function onMouseupContainer() {\n      // skip when the lastMousedownEl didn't equal vfmContainer\n      if (lastMousedownEl.value !== vfmContainer.value) return\n      // skip when state equal 'resize:move'\n      if (_state.value === 'resize:move') return\n      emit('click-outside', createModalEvent({ type: 'click-outside' }))\n      props.clickToClose && emit('update:modelValue', false)\n    }\n    function onEsc() {\n      if (visible.value && props.escToClose) {\n        emit('update:modelValue', false)\n      }\n    }\n    function createModalEvent(eventProps = {}) {\n      return {\n        ref: getModalInfo(),\n        ...eventProps\n      }\n    }\n    function emitEvent(eventType, value) {\n      let stopEvent = false\n      const event = createModalEvent({\n        type: eventType,\n        stop() {\n          stopEvent = true\n        }\n      })\n      emit(eventType, event)\n      if (stopEvent) {\n        _stopEvent.value = true\n        nextTick(() => {\n          emit('update:modelValue', value)\n        })\n        return true\n      }\n      return false\n    }\n    function emitState(e, state, action) {\n      _state.value = `${state}:${action}`\n      emit(_state.value, e)\n    }\n    function toggle(show, _params) {\n      return new Promise((resolve, reject) => {\n        resolveToggle = res => {\n          resolve(res)\n          resolveToggle = noop\n        }\n        rejectToggle = err => {\n          reject(err)\n          rejectToggle = noop\n        }\n        const value = typeof show === 'boolean' ? show : !props.modelValue\n        if (value && arguments.length === 2) {\n          params.value = _params\n        }\n        emit('update:modelValue', value)\n      })\n    }\n    function pointerDown(e) {\n      e.stopPropagation()\n      const STATE_RESIZE = 'resize'\n      const STATE_DRAG = 'drag'\n      const direction = e.target.getAttribute('direction')\n      let state\n      if (direction) {\n        state = STATE_RESIZE\n      } else if (validDragElement(e, vfmContent.value, props.dragSelector)) {\n        state = STATE_DRAG\n      } else {\n        return\n      }\n      emitState(e, state, 'start')\n      const down = getPosition(e)\n      const rectContainer = vfmContainer.value.getBoundingClientRect()\n      const rectContent = vfmContent.value.getBoundingClientRect()\n      const isAbsolute = window.getComputedStyle(vfmContent.value).position === 'absolute'\n      const position = {\n        top: trimPx(dragResizeStyle.value.top),\n        left: trimPx(dragResizeStyle.value.left)\n      }\n      const limit = (() => {\n        if (props.fitParent) {\n          const limit = {\n            absolute() {\n              return {\n                minTop: 0,\n                minLeft: 0,\n                maxTop: rectContainer.height - rectContent.height,\n                maxLeft: rectContainer.width - rectContent.width\n              }\n            },\n            relative() {\n              return {\n                minTop: position.top + rectContainer.top - rectContent.top,\n                minLeft: position.left + rectContainer.left - rectContent.left,\n                maxTop: position.top + rectContainer.bottom - rectContent.bottom,\n                maxLeft: position.left + rectContainer.right - rectContent.right\n              }\n            }\n          }\n          return isAbsolute ? limit.absolute() : limit.relative()\n        } else {\n          return {}\n        }\n      })()\n      const resetBodyCursor = state === STATE_RESIZE && setStyle(document.body, 'cursor', resizeCursor[direction])\n\n      const moving = e => {\n        // onPointerMove\n        e.stopPropagation()\n        emitState(e, state, 'move')\n        const move = getPosition(e)\n        let offset = {\n          x: move.x - down.x,\n          y: move.y - down.y\n        }\n        if (state === STATE_RESIZE) {\n          offset = getResizeOffset(direction, offset, rectContainer, rectContent, isAbsolute)\n        }\n\n        let top\n        let left\n        if (isAbsolute) {\n          top = rectContent.top - rectContainer.top + offset.y\n          left = rectContent.left - rectContainer.left + offset.x\n        } else {\n          top = position.top + offset.y\n          left = position.left + offset.x\n        }\n        if (state === STATE_DRAG && props.fitParent) {\n          top = clamp(limit.minTop, top, limit.maxTop)\n          left = clamp(limit.minLeft, left, limit.maxLeft)\n        }\n        const style = {\n          position: 'relative',\n          top: top + 'px',\n          left: left + 'px',\n          margin: 'unset',\n          touchAction: 'none',\n          ...(isAbsolute && {\n            position: 'absolute',\n            transform: 'unset',\n            width: rectContent.width + 'px',\n            height: rectContent.height + 'px'\n          }),\n          ...(offset.width && { width: offset.width + 'px' }),\n          ...(offset.height && { height: offset.height + 'px' })\n        }\n\n        dragResizeStyle.value = {\n          ...dragResizeStyle.value,\n          ...style\n        }\n      }\n      const end = e => {\n        // onPointerUp\n        e.stopPropagation()\n        if (state === STATE_RESIZE) {\n          resetBodyCursor && resetBodyCursor()\n        }\n        // Excute onMouseupContainer before trigger emitState\n        setTimeout(() => {\n          emitState(e, state, 'end')\n        })\n        removeListener('move', document, moving)\n        removeListener('up', document, end)\n      }\n      addListener('move', document, moving)\n      addListener('up', document, end)\n    }\n    function addDragDown() {\n      addListener('down', vfmContent.value, pointerDown)\n      dragResizeStyle.value.touchAction = 'none'\n    }\n    function removeDragDown() {\n      removeListener('down', vfmContent.value, pointerDown)\n    }\n    function addResizeDown() {\n      visibility.resize = true\n      nextTick(() => {\n        addListener('down', vfmResize.value, pointerDown)\n      })\n    }\n    function removeResizeDown() {\n      removeListener('down', vfmResize.value, pointerDown)\n      visibility.resize = false\n    }\n    function getResizeOffset(direction, offset, rectContainer, rectContent, isAbsolute) {\n      const setOffset = dir => {\n        let offsetAxis = offset[dir.axis]\n        offsetAxis = props.fitParent ? clamp(dir.min, offsetAxis, dir.max) : offsetAxis\n        let edge = clamp(dir.minEdge, dir.getEdge(offsetAxis), dir.maxEdge)\n        offsetAxis = dir.getOffsetAxis(edge, isAbsolute)\n        return {\n          [dir.edgeName]: edge,\n          [dir.axis]: offsetAxis\n        }\n      }\n\n      const getDirectionInfo = (position, edgeName, axis, isPositive) => {\n        const rectContentEdge = rectContent[edgeName]\n        const positionOffset = rectContainer[position] - rectContent[position]\n        const EdgeName = capitalize(edgeName)\n        return {\n          axis,\n          edgeName,\n          min: isPositive ? positionOffset : -rectContentEdge,\n          max: isPositive ? rectContentEdge : positionOffset,\n          minEdge: props[`min${EdgeName}`],\n          maxEdge: props[`max${EdgeName}`],\n          getEdge: offsetAxis => rectContent[edgeName] - offsetAxis * (isPositive ? 1 : -1),\n          getOffsetAxis: (edge, isAbsolute) => {\n            const offsetAxis = rectContent[edgeName] - edge\n            if (isAbsolute) {\n              return isPositive ? offsetAxis : 0\n            } else {\n              return ((isPositive ? 1 : -1) * offsetAxis) / 2\n            }\n          }\n        }\n      }\n\n      const directions = {\n        t: ['top', 'height', 'y', true],\n        b: ['bottom', 'height', 'y', false],\n        l: ['left', 'width', 'x', true],\n        r: ['right', 'width', 'x', false]\n      }\n\n      let _offset = { x: 0, y: 0 }\n      direction.split('').forEach(dir => {\n        const directionInfo = getDirectionInfo(...directions[dir])\n        _offset = {\n          ..._offset,\n          ...setOffset(directionInfo)\n        }\n      })\n      return _offset\n    }\n    return {\n      TransitionState,\n      root,\n      vfmContainer,\n      vfmContent,\n      vfmResize,\n      vfmOverlayTransition,\n      vfmTransition,\n      computedOverlayTransition,\n      computedTransition,\n      visible,\n      visibility,\n      overlayTransitionState,\n      modalTransitionState,\n      params,\n      calculateZIndex,\n      bindStyle,\n      bindContentStyle,\n      overlayListeners,\n      modalListeners,\n      onMousedown,\n      onMouseupContainer,\n      onEsc\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\n.vfm--fixed {\n  position: fixed;\n}\n.vfm--absolute {\n  position: absolute;\n}\n.vfm--inset {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.vfm--overlay {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.vfm--prevent-none {\n  pointer-events: none;\n}\n.vfm--prevent-auto {\n  pointer-events: auto;\n}\n.vfm--outline-none:focus {\n  outline: none;\n}\n.vfm-enter-active,\n.vfm-leave-active {\n  transition: opacity 0.2s;\n}\n.vfm-enter-from,\n.vfm-leave-to {\n  opacity: 0;\n}\n\n.vfm--touch-none {\n  touch-action: none;\n}\n.vfm--select-none {\n  user-select: none;\n}\n\n.vfm--resize-tr,\n.vfm--resize-br,\n.vfm--resize-bl,\n.vfm--resize-tl {\n  width: 12px;\n  height: 12px;\n  z-index: 10;\n}\n\n.vfm--resize-t {\n  top: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-tr {\n  top: -6px;\n  right: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-r {\n  top: 0;\n  right: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-br {\n  bottom: -6px;\n  right: -6px;\n  cursor: nwse-resize;\n}\n.vfm--resize-b {\n  bottom: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-bl {\n  bottom: -6px;\n  left: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-l {\n  top: 0;\n  left: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-tl {\n  top: -6px;\n  left: -6px;\n  cursor: nwse-resize;\n}\n</style>\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","<template>\n  <div class=\"modals-container\">\n    <component\n      :is=\"modal.component\"\n      v-for=\"(modal, index) in api.dynamicModals\"\n      :key=\"modal.id\"\n      v-bind=\"modal.bind\"\n      v-model=\"modal.value\"\n      v-on=\"modal.on\"\n      @_beforeClose=\"beforeClose(modal)\"\n      @_closed=\"closed(index, modal)\"\n      @_beforeOpen=\"e => beforeOpen(e, modal, index)\"\n      @_opened=\"modal.opened\"\n    >\n      <template v-for=\"(slot, key) in modal.slots\" #[key] :key=\"key\">\n        <!-- eslint-disable vue/no-v-html -->\n        <div v-if=\"isString(slot)\" v-html=\"slot\"></div>\n        <component :is=\"slot.component\" v-else v-bind=\"slot.bind\" v-on=\"slot.on || {}\" />\n      </template>\n    </component>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    slice(index) {\n      this.api.dynamicModals.splice(index, 1)\n    },\n    closed(index, modal) {\n      this.slice(index)\n      modal.closed && modal.closed()\n    },\n    beforeClose(modal) {\n      if (modal.value) {\n        modal?.rejectClose('hide')\n      }\n    },\n    async beforeOpen(e, modal, index) {\n      e.ref.params.value = modal.params\n      await this.$nextTick()\n      await this.$nextTick()\n      if (!modal.value) {\n        this.slice(index)\n        modal?.reject('show')\n      }\n    },\n    isString(val) {\n      return typeof val === 'string'\n    }\n  }\n}\n</script>\n","<template>\n  <div class=\"modals-container\">\n    <component\n      :is=\"modal.component\"\n      v-for=\"(modal, index) in api.dynamicModals\"\n      :key=\"modal.id\"\n      v-bind=\"modal.bind\"\n      v-model=\"modal.value\"\n      v-on=\"modal.on\"\n      @_beforeClose=\"beforeClose(modal)\"\n      @_closed=\"closed(index, modal)\"\n      @_beforeOpen=\"e => beforeOpen(e, modal, index)\"\n      @_opened=\"modal.opened\"\n    >\n      <template v-for=\"(slot, key) in modal.slots\" #[key] :key=\"key\">\n        <!-- eslint-disable vue/no-v-html -->\n        <div v-if=\"isString(slot)\" v-html=\"slot\"></div>\n        <component :is=\"slot.component\" v-else v-bind=\"slot.bind\" v-on=\"slot.on || {}\" />\n      </template>\n    </component>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    slice(index) {\n      this.api.dynamicModals.splice(index, 1)\n    },\n    closed(index, modal) {\n      this.slice(index)\n      modal.closed && modal.closed()\n    },\n    beforeClose(modal) {\n      if (modal.value) {\n        modal?.rejectClose('hide')\n      }\n    },\n    async beforeOpen(e, modal, index) {\n      e.ref.params.value = modal.params\n      await this.$nextTick()\n      await this.$nextTick()\n      if (!modal.value) {\n        this.slice(index)\n        modal?.reject('show')\n      }\n    },\n    isString(val) {\n      return typeof val === 'string'\n    }\n  }\n}\n</script>\n","import VueFinalModalComponent from './VueFinalModal.vue'\nimport ModalsContainerComponent from './ModalsContainer.vue'\nimport { markRaw, reactive, shallowReactive } from 'vue'\n\nexport class ModalInstance {\n  constructor() {\n    const bindApi = component => {\n      const _component = { ...component, props: { ...component.props } }\n      Object.assign(_component.props, {\n        api: { type: Object, default: () => this }\n      })\n      return markRaw(_component)\n    }\n\n    this.modals = []\n    this.openedModals = []\n    this.VueFinalModal = bindApi(VueFinalModalComponent)\n\n    this.dynamicModals = shallowReactive([])\n    this.ModalsContainer = bindApi(ModalsContainerComponent)\n  }\n\n  show(modal, ...args) {\n    switch (typeof modal) {\n      case 'string':\n        return this.toggle(modal, true, ...args)\n      case 'object': {\n        const { show } = this.useModal(modal, args[0])\n        return show()\n      }\n    }\n  }\n\n  hide(...names) {\n    return this.toggle(names, false)\n  }\n\n  hideAll() {\n    return this.hide(...this.openedModals.map(modal => modal.props.name))\n  }\n\n  toggle(name, ...args) {\n    const modals = Array.isArray(name) ? this.get(...name) : this.get(name)\n    return Promise.allSettled(modals.map(modal => modal.toggle(...args)))\n  }\n\n  get(...names) {\n    return this.modals.filter(modal => names.includes(modal.props.name))\n  }\n\n  existModal(options) {\n    return this.dynamicModals.indexOf(options) !== -1\n  }\n\n  useModal(_options, params = {}) {\n    let options = reactive({\n      value: false,\n      component: this.VueFinalModal,\n      id: Symbol('useModal'),\n      bind: {},\n      slots: {},\n      on: {},\n      params,\n      ..._options\n    })\n\n    const show = () => {\n      return this.existModal(options)\n        ? Promise.resolve('[Vue Final Modal] modal is already opened')\n        : new Promise((resolve, reject) => {\n            options.value = true\n            options.reject = reject\n            options.opened = () => {\n              resolve('show')\n            }\n            this.dynamicModals.push(options)\n          })\n    }\n\n    const hide = () => {\n      return this.existModal(options)\n        ? new Promise((resolve, reject) => {\n            options.value = false\n            options.rejectClose = reject\n            options.closed = () => {\n              resolve('hide')\n            }\n          })\n        : Promise.resolve('[Vue Final Modal] modal is already closed')\n    }\n\n    return { show, hide, options }\n  }\n}\n\n/**\n * @description Support create multiple modal instance\n */\nexport const createModalInstance = () => {\n  let modalInstance = new ModalInstance()\n  return {\n    $vfm: modalInstance,\n    VueFinalModal: modalInstance.VueFinalModal,\n    ModalsContainer: modalInstance.ModalsContainer,\n    useModal: modalInstance.useModal.bind(modalInstance)\n  }\n}\n\n/**\n * @description Create modal instance by default for directly support `import { $vfm, VueFinalModal, ModalsContainer, useModal } from 'vue-final-modal'`\n */\nconst modalInstance = createModalInstance()\n\nexport const { $vfm, VueFinalModal, ModalsContainer, useModal } = modalInstance\n"],"names":["queryFocusableElements","element","selector","querySelectorAll","isFocused","document","activeElement","FocusTrap","root","elements","onKeyDown","this","bind","enable","disable","firstElement","lastElement","length","event","key","keyCode","isTabPressed","shiftKey","focus","preventDefault","addEventListener","removeEventListener","getPosition","e","targetTouches","x","clientX","y","clientY","clamp","min","num","max","Math","trimPx","distance","Number","replace","pointerType","down","pc","m","move","up","addListener","type","el","callback","passive","removeListener","hasPassiveEvents","window","passiveTestOptions","previousBodyOverflowSetting","previousBodyPaddingRight","isIosDevice","navigator","platform","test","maxTouchPoints","locks","documentListenerAdded","initialClientY","hasAnyScrollableEl","delta","path","push","classList","contains","parentElement","composedPath","forEach","nodeType","Node","ELEMENT_NODE","style","getComputedStyle","includes","overflowY","scrollHeight","clientHeight","hasScrollbar","scrollTop","shouldScroll","allowTouchMove","some","rawEvent","target","touches","disableBodyScroll","targetElement","options","lock","ontouchstart","ontouchmove","isTargetElementTotallyScrolled","stopPropagation","handleScroll","undefined","reserveScrollBarGap","scrollBarGap","innerWidth","documentElement","clientWidth","computedBodyPaddingRight","parseInt","body","getPropertyValue","paddingRight","overflow","setOverflowHidden","console","error","enableBodyScroll","filter","noop","TransitionState","resizeCursor","t","tr","r","br","b","bl","l","tl","props","name","String","modelValue","Boolean","displayDirective","validator","val","indexOf","classes","Object","Array","overlayClass","contentClass","styles","overlayStyle","contentStyle","lockScroll","hideOverlay","clickToClose","escToClose","nonModal","attach","transition","overlayTransition","zIndexAuto","zIndexBase","zIndex","focusRetain","focusTrap","fitParent","drag","dragSelector","keepChangedStyle","resize","resizeDirections","value","minWidth","minHeight","maxWidth","Infinity","maxHeight","emits","setup","emit","uid","Symbol","ref","vfmContainer","vfmContent","vfmResize","vfmOverlayTransition","vfmTransition","modalStackIndex","$focusTrap","visible","visibility","reactive","modal","overlay","overlayTransitionState","overlayListeners","beforeEnter","afterEnter","beforeLeave","afterLeave","modalTransitionState","modalListeners","_stopEvent","params","dragResizeStyle","_state","lastMousedownEl","resolveToggle","rejectToggle","computedOverlayTransition","computed","computedTransition","isComponentReadyToBeDestroyed","calculateZIndex","bindStyle","bindContentStyle","isArray","getModalInfo","getAttachElement","handleLockScroll","toggle","mounted","createModalEvent","emitEvent","appendChild","index","api","openedModals","findIndex","vm","splice","warn","concat","close","$_vm","removeDragDown","removeResizeDown","nextTick","querySelector","eventProps","eventType","stopEvent","stop","emitState","state","action","show","_params","Promise","resolve","reject","res","err","arguments","pointerDown","STATE_RESIZE","STATE_DRAG","direction","getAttribute","validDragElement","cacheStyle","rectContainer","getBoundingClientRect","rectContent","isAbsolute","position","top","left","limit","absolute","minTop","minLeft","maxTop","height","maxLeft","width","relative","bottom","right","resetBodyCursor","moving","offset","setOffset","dir","offsetAxis","axis","edge","minEdge","getEdge","maxEdge","getOffsetAxis","edgeName","getDirectionInfo","isPositive","s","rectContentEdge","positionOffset","EdgeName","charAt","toUpperCase","slice","directions","_offset","split","directionInfo","getResizeOffset","margin","touchAction","transform","end","setTimeout","addDragDown","addResizeDown","watch","display","flush","enabled","modals","onMounted","onBeforeUnmount","remove","onMousedown","onMouseupContainer","onEsc","css","insertAt","head","getElementsByTagName","createElement","firstChild","insertBefore","styleSheet","cssText","createTextNode","$props","$setup","_createElementBlock","onKeydown","_createVNode","_mergeProps","_toHandlers","_createElementVNode","toString","role","tabindex","onMouseup","_renderSlot","_ctx","_hoisted_2","methods","dynamicModals","closed","beforeClose","rejectClose","beforeOpen","_this","$nextTick","isString","_hoisted_1","_createBlock","component","id","on","on_beforeClose","$options","on_closed","on_beforeOpen","on_opened","opened","slots","slot","_createCommentVNode","innerHTML","ModalInstance","bindApi","_component","assign","markRaw","VueFinalModal","VueFinalModalComponent","shallowReactive","ModalsContainer","ModalsContainerComponent","args","useModal","names","hide","map","get","allSettled","_options","_this2","existModal","createModalInstance","modalInstance","$vfm"],"mappings":"+nFAEA,IAsBMA,EAAyB,SAAAC,UAJN,SAACA,EAASC,YACrBD,EAAQE,iBAAiBD,IAAa,IAI3CC,CAAiBF,EAtBxB,qWAyBIG,EAAY,SAAAH,UACTA,GAAWI,SAASC,eAOvBC,yCAEGC,KAAO,UACPC,SAAW,QAEXC,UAAYC,KAAKD,UAAUE,KAAKD,WAChCE,OAASF,KAAKE,OAAOD,KAAKD,WAC1BG,QAAUH,KAAKG,QAAQF,KAAKD,WAC5BI,aAAeJ,KAAKI,aAAaH,KAAKD,WACtCK,YAAcL,KAAKK,YAAYJ,KAAKD,2CAG3C,kBACSA,KAAKF,SAASE,KAAKF,SAASQ,OAAS,IAAM,iCAGpD,kBACSN,KAAKF,SAAS,IAAM,8BAG7B,SAAUS,MAxCS,SAAAA,SACE,QAAdA,EAAMC,KAAmC,IAAlBD,EAAME,QAwC7BC,CAAaH,QAKdA,EAAMI,gBA7BJjB,SAASC,eAsCWF,EAAUO,KAAKK,qBAClCD,eAAeQ,aACpBL,EAAMM,yBAVFpB,EAAUO,KAAKI,uBACZC,cAAcO,QACnBL,EAAMM,0CAaZ,mBACWb,KAAKH,2BAGhB,SAAOA,GACAA,SAIAA,KAAOA,OACPC,SAAWT,EAAuBW,KAAKH,WAEvCA,KAAKiB,iBAAiB,UAAWd,KAAKD,mCAG7C,gBACOF,KAAKkB,oBAAoB,UAAWf,KAAKD,gBACzCF,KAAO,cCvFHmB,EAAc,SAAAC,SACUA,EAAEC,cAAgBD,EAAEC,cAAc,GAAKD,QACnE,CAAEE,IADDC,QACIC,IADQC,UAQTC,EAAQ,SAACC,EAAKC,EAAKC,SACX,iBAARF,IACTA,EAAMG,KAAKH,IAAIC,EAAKC,IAAQD,GAEX,iBAARC,IACTA,EAAMC,KAAKD,IAAID,EAAKD,IAEfG,KAAKH,IAAIG,KAAKD,IAAID,EAAKD,GAAME,IAGzBE,EAAS,SAAAC,UACZA,GAAYC,OAAOD,EAASE,QAAQ,MAAO,MAAS,GASxDC,EAAc,CAClBC,KAAM,CACJC,GAAI,YACJC,EAAG,cAELC,KAAM,CACJF,GAAI,YACJC,EAAG,aAELE,GAAI,CACFH,GAAI,UACJC,EAAG,aAGMG,EAAc,SAACC,EAAMC,EAAIC,GACpCD,GAAMA,EAAG1B,iBAAiBkB,EAAYO,GAAML,GAAIO,GAChDD,GAAMA,EAAG1B,iBAAiBkB,EAAYO,GAAMJ,EAAGM,EAAU,CAAEC,SAAS,KAEzDC,EAAiB,SAACJ,EAAMC,EAAIC,GACvCD,GAAMA,EAAGzB,oBAAoBiB,EAAYO,GAAML,GAAIO,GACnDD,GAAMA,EAAGzB,oBAAoBiB,EAAYO,GAAMJ,EAAGM,ICtDhDG,GAAmB,EACvB,GAAsB,oBAAXC,OAAwB,KAC3BC,EAAqB,eAEvBF,GAAmB,IAIvBC,OAAO/B,iBAAiB,cAAe,KAAMgC,GAC7CD,OAAO9B,oBAAoB,cAAe,KAAM+B,GAGlD,IAWIC,EACAC,GAZEC,GACc,oBAAXJ,QACPA,OAAOK,WACPL,OAAOK,UAAUC,WAChB,iBAAiBC,KAAKP,OAAOK,UAAUC,WACP,aAA9BN,OAAOK,UAAUC,UAA2BN,OAAOK,UAAUG,eAAiB,GAE/EC,GAAQ,GACRC,IAAwB,EACxBjC,GAAU,EACVkC,IAAkB,EA2BhBC,GAAqB,SAACjB,EAAIkB,OAC1BD,GAAqB,SAXN,SAAAjB,WACbmB,EAAO,GACNnB,GAAI,IACTmB,EAAKC,KAAKpB,GACNA,EAAGqB,UAAUC,SAAS,OAAQ,OAAOH,EACzCnB,EAAKA,EAAGuB,qBAEHJ,EAKMK,CAAaxB,GACrByB,SAAQ,SAAAzB,IA1BM,SAAAA,OACdA,GAAMA,EAAG0B,WAAaC,KAAKC,aAAc,OAAO,MAE/CC,EAAQxB,OAAOyB,iBAAiB9B,SAC/B,CAAC,OAAQ,UAAU+B,SAASF,EAAMG,YAAchC,EAAGiC,aAAejC,EAAGkC,cAuBtEC,CAAanC,IApBA,SAACA,EAAIkB,WACH,IAAjBlB,EAAGoC,WAAmBlB,EAAQ,GAC9BlB,EAAGoC,UAAYpC,EAAGkC,aAAehB,GAASlB,EAAGiC,cAAgBf,EAAQ,GAkB/CmB,CAAarC,EAAIkB,KACvCD,GAAqB,MAGlBA,GAIHqB,GAAiB,SAAAtC,UAAMc,GAAMyB,MAAK,kBAAMtB,GAAmBjB,GAAKlB,QAEhET,GAAiB,SAAAmE,OACf/D,EAAI+D,GAAYnC,OAAOtC,cAMzBuE,GAAe7D,EAAEgE,UAIjBhE,EAAEiE,QAAQ5E,OAAS,IAEnBW,EAAEJ,gBAAgBI,EAAEJ,kBAEjB,KAgEIsE,GAAoB,SAACC,EAAeC,MAE1CD,OASD9B,GAAMyB,MAAK,SAAAO,UAAQA,EAAKF,gBAAkBA,UAIxCE,EAAO,CACXF,cAAAA,EACAC,QAASA,GAAW,IAGtB/B,eAAYA,KAAOgC,IAEfrC,IACFmC,EAAcG,aAAe,SAAAhF,GACQ,IAA/BA,EAAMW,cAAcZ,SAEtBkD,GAAiBjD,EAAMW,cAAc,GAAGI,UAG5C8D,EAAcI,YAAc,SAAAjF,GACS,IAA/BA,EAAMW,cAAcZ,QAnDT,SAACC,EAAO6E,GAC3B9D,GAAUf,EAAMW,cAAc,GAAGI,QAAUkC,IAEvCsB,GAAevE,EAAM0E,UAIrBG,GAA6C,IAA5BA,EAAcR,WAAmBtD,GAAU,GAV3B,SAAA8D,WACrCA,GAAgBA,EAAcX,aAAeW,EAAcR,WAAaQ,EAAcV,aAclFe,CAA+BL,IAAkB9D,GAAU,EAHtDT,GAAeN,GAQxBA,EAAMmF,mBAoCAC,CAAapF,EAAO6E,IAInB7B,KACH7D,SAASoB,iBAAiB,YAAaD,GAAgB+B,EAAmB,CAAEF,SAAS,QAAUkD,GAC/FrC,IAAwB,IAnGJ,SAAA8B,WAESO,IAA7B5C,GAAwC,KACpC6C,IAAwBR,IAA2C,IAAhCA,EAAQQ,oBAC3CC,EAAejD,OAAOkD,WAAarG,SAASsG,gBAAgBC,eAE9DJ,GAAuBC,EAAe,EAAG,KACrCI,EAA2BC,SAAS7B,iBAAiB5E,SAAS0G,MAAMC,iBAAiB,iBAAkB,IAC7GrD,GAA2BtD,SAAS0G,KAAK/B,MAAMiC,aAC/C5G,SAAS0G,KAAK/B,MAAMiC,uBAAkBJ,EAA2BJ,cAIjCF,IAAhC7C,IACFA,EAA8BrD,SAAS0G,KAAK/B,MAAMkC,SAClD7G,SAAS0G,KAAK/B,MAAMkC,SAAW,UAuF/BC,CAAkBnB,SArClBoB,QAAQC,MACN,mHAwCOC,GAAmB,SAAAvB,GACzBA,GAQL9B,GAAQA,GAAMsD,QAAO,SAAAtB,UAAQA,EAAKF,gBAAkBA,KAEhDnC,IACFmC,EAAcG,aAAe,KAC7BH,EAAcI,YAAc,KAExBjC,IAA0C,IAAjBD,GAAMhD,SACjCZ,SAASqB,oBAAoB,YAAaF,GAAgB+B,EAAmB,CAAEF,SAAS,QAAUkD,GAClGrC,IAAwB,IAEhBD,GAAMhD,cAzGesF,IAA7B5C,KACFtD,SAAS0G,KAAK/B,MAAMiC,aAAetD,GAInCA,QAA2B4C,QAGOA,IAAhC7C,IACFrD,SAAS0G,KAAK/B,MAAMkC,SAAWxD,EAI/BA,OAA8B6C,KA4E9Ba,QAAQC,MACN,iHCvHAG,GAAO,aAEPC,GACG,QADHA,GAEM,WAFNA,GAGG,QAHHA,GAIK,SAGLC,GAAe,CACnBC,EAAG,YACHC,GAAI,cACJC,EAAG,YACHC,GAAI,cACJC,EAAG,YACHC,GAAI,cACJC,EAAG,YACHC,GAAI,kBAGS,CACbC,MAAO,CACLC,KAAM,CAAElF,KAAMmF,eAAiB,MAC/BC,WAAY,CAAEpF,KAAMqF,iBAAkB,GACtCC,iBAAkB,CAChBtF,KAAMmF,eACG,OACTI,mBAAUC,UACgC,IAAjC,CAAC,KAAM,QAAQC,QAAQD,KAGlCE,QAAS,CAAE1F,KAAM,CAACmF,OAAQQ,OAAQC,eAAiB,IACnDC,aAAc,CAAE7F,KAAM,CAACmF,OAAQQ,OAAQC,eAAiB,IACxDE,aAAc,CAAE9F,KAAM,CAACmF,OAAQQ,OAAQC,eAAiB,IACxDG,OAAQ,CAAE/F,KAAM,CAAC2F,OAAQC,eAAiB,iBAAO,KACjDI,aAAc,CAAEhG,KAAM,CAAC2F,OAAQC,eAAiB,iBAAO,KACvDK,aAAc,CAAEjG,KAAM,CAAC2F,OAAQC,eAAiB,iBAAO,KACvDM,WAAY,CAAElG,KAAMqF,iBAAkB,GACtCc,YAAa,CAAEnG,KAAMqF,iBAAkB,GACvCe,aAAc,CAAEpG,KAAMqF,iBAAkB,GACxCgB,WAAY,CAAErG,KAAMqF,iBAAkB,GACtCiB,SAAU,CAAEtG,KAAMqF,iBAAkB,GACpCkB,OAAQ,CACNvG,KAAM,cACG,EACTuF,mBAAUC,OACFxF,IAAcwF,SAEP,YAATxF,GAA+B,WAATA,GAEnBwF,EAAI7D,WAAaC,KAAKC,eAGjC2E,WAAY,CAAExG,KAAM,CAACmF,OAAQQ,gBAAkB,OAC/Cc,kBAAmB,CAAEzG,KAAM,CAACmF,OAAQQ,gBAAkB,OACtDe,WAAY,CAAE1G,KAAMqF,iBAAkB,GACtCsB,WAAY,CAAE3G,KAAM,CAACmF,OAAQ5F,gBAAkB,KAC/CqH,OAAQ,CAAE5G,KAAM,CAACqF,QAASF,OAAQ5F,iBAAkB,GACpDsH,YAAa,CAAE7G,KAAMqF,iBAAkB,GACvCyB,UAAW,CAAE9G,KAAMqF,iBAAkB,GACrC0B,UAAW,CAAE/G,KAAMqF,iBAAkB,GACrC2B,KAAM,CAAEhH,KAAMqF,iBAAkB,GAChC4B,aAAc,CAAEjH,KAAMmF,eAAiB,IACvC+B,iBAAkB,CAAElH,KAAMqF,iBAAkB,GAC5C8B,OAAQ,CACNnH,KAAMqF,iBACG,GAEX+B,iBAAkB,CAChBpH,KAAM4F,cACG,iBAAM,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,OACtDL,UAAW,SAAAC,SACT,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,MAAMnB,QAAO,SAAAgD,UAAiC,IAAxB7B,EAAIC,QAAQ4B,MAAetJ,SAAWyH,EAAIzH,SAE3GuJ,SAAU,CAAEtH,KAAMT,eAAiB,GACnCgI,UAAW,CAAEvH,KAAMT,eAAiB,GACpCiI,SAAU,CAAExH,KAAMT,eAAiBkI,EAAAA,GACnCC,UAAW,CAAE1H,KAAMT,eAAiBkI,EAAAA,IAEtCE,MAAO,CACL,oBACA,gBACA,cACA,SACA,gBACA,eACA,SACA,eACA,UACA,UACA,aACA,YACA,WACA,eACA,cACA,cAEFC,eAAM3C,SAAS4C,IAAAA,KACPC,EAAMC,OAAO,OACbzK,EAAO0K,EAAI,MACXC,EAAeD,EAAI,MACnBE,EAAaF,EAAI,MACjBG,EAAYH,EAAI,MAChBI,EAAuBJ,EAAI,MAC3BK,EAAgBL,EAAI,MAEpBM,EAAkBN,EAAI,MACtBO,EAAa,IAAIlL,EAEjBmL,EAAUR,GAAI,GACdS,EAAaC,EAAS,CAC1BC,OAAO,EACPC,SAAS,EACTzB,QAAQ,IAEJ0B,EAAyBb,EAAI,MAC7Bc,EAAmB,CACvBC,uBACEF,EAAuBxB,MAAQ9C,IAEjCyE,sBACEH,EAAuBxB,MAAQ9C,IAEjC0E,uBACEJ,EAAuBxB,MAAQ9C,IAEjC2E,sBACEL,EAAuBxB,MAAQ9C,KAI7B4E,EAAuBnB,EAAI,MAC3BoB,EAAiB,CACrBL,uBACEI,EAAqB9B,MAAQ9C,IAE/ByE,sBACEG,EAAqB9B,MAAQ9C,IAE/B0E,uBACEE,EAAqB9B,MAAQ9C,IAE/B2E,sBACEC,EAAqB9B,MAAQ9C,KAI3B8E,EAAarB,GAAI,GACjBsB,EAAStB,EAAI,IACbuB,EAAkBvB,EAAI,IACtBwB,EAASxB,EAAI,MACbyB,EAAkBzB,EAAI,MAExB0B,EAAgBpF,GAChBqF,EAAerF,GAEbsF,EAA4BC,GAAS,iBACF,iBAA5B5E,EAAMwB,kBAAuC,CAAEvB,KAAMD,EAAMwB,wBAC1DxB,EAAMwB,sBAGdqD,EAAqBD,GAAS,iBACF,iBAArB5E,EAAMuB,WAAgC,CAAEtB,KAAMD,EAAMuB,iBACnDvB,EAAMuB,eAGduD,EAAgCF,GAAS,kBAE1C5E,EAAMkB,aAAe0C,EAAuBxB,QAAU9C,KACvD4E,EAAqB9B,QAAU9C,MAI7ByF,EAAkBH,GAAS,kBACV,IAAjB5E,EAAM2B,SACJ3B,EAAMyB,aACAzB,EAAM0B,WAAa,GAAK2B,EAAgBjB,OAAS,GAKpDpC,EAAM2B,UAIXqD,EAAYJ,GAAS,wBAEO,IAA1BG,EAAgB3C,OAAmB,CACrCT,OAAQoD,EAAgB3C,WAKxB6C,EAAmBL,GAAS,eAC5B/H,EAAQ,CAACyH,EAAgBlC,cAC7BzB,MAAMuE,QAAQlF,EAAMgB,cAAgBnE,EAAMT,WAANS,IAAcmD,EAAMgB,eAAgBnE,EAAMT,KAAK4D,EAAMgB,cAClFnE,cA+HAsI,UACA,CACLtC,IAAAA,EACA7C,MAAAA,EACA4C,KAAAA,EACAI,aAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAC,qBAAAA,EACAC,cAAAA,EACAgC,iBAAAA,EACA/B,gBAAAA,EACAG,WAAAA,EACA6B,iBAAAA,EACA/B,WAAAA,EACAgC,OAAAA,GACAjB,OAAAA,YAGKkB,OACHvF,EAAMG,WAAY,IACpByC,EAAK,eAAgB4C,EAAiB,CAAEzK,KAAM,kBAC1C0K,EAAU,eAAe,eAC3Bf,EAAa,YAIXjH,EAAS2H,OACT3H,IAA2B,IAAjBuC,EAAMsB,OAAkB,EACnB,IAAjBtB,EAAMsB,QAAoB7D,EAAOiI,YAAYrN,EAAK+J,WAE9CuD,EAAQ3F,EAAM4F,IAAIC,aAAaC,WAAU,SAAAC,UAAMA,EAAGlD,MAAQA,MAE/C,IAAX8C,GAEF3F,EAAM4F,IAAIC,aAAaG,OAAOL,EAAO,GAEvC3F,EAAM4F,IAAIC,aAAazJ,KAAK+I,KAE5B9B,EAAgBjB,MAAQpC,EAAM4F,IAAIC,aAAa/M,OAAS,EAExDuM,IAEArF,EAAM4F,IAAIC,aACPzG,QAAO,SAAA2G,UAAMA,EAAGlD,MAAQA,KACxBpG,SAAQ,SAACsJ,EAAIJ,GACRI,EAAGX,qBAAuB3H,IAE5BsI,EAAG1C,gBAAgBjB,MAAQuD,EAC3BI,EAAGvC,WAAWG,SAAU,MAI9BJ,EAAQnB,OAAQ,EA2DpBoB,EAAWG,SAAU,EACrBH,EAAWE,OAAQ,OA1DK,IAAXjG,GACTwB,QAAQgH,KAAK,2BAA2BC,OAAOlG,EAAMsB,mBAIlD6E,QACHR,EAAQ3F,EAAM4F,IAAIC,aAAaC,WAAU,SAAAC,UAAMA,EAAGlD,MAAQA,SAC/C,IAAX8C,GAEF3F,EAAM4F,IAAIC,aAAaG,OAAOL,EAAO,GAEnC3F,EAAM4F,IAAIC,aAAa/M,OAAS,EAAG,KAE/BsN,EAAOpG,EAAM4F,IAAIC,aAAa7F,EAAM4F,IAAIC,aAAa/M,OAAS,GACpEsN,EAAKpG,MAAM6B,WAAauE,EAAK9C,WAAW1K,eAAeQ,SACnDgN,EAAKpG,MAAM4B,aAAewE,EAAKpG,MAAM6B,YACvCuE,EAAKpD,aAAaZ,MAAMhJ,SAEzBgN,EAAKpG,MAAMkB,cAAgBkF,EAAK5C,WAAWG,SAAU,GAExD3D,EAAM+B,MAAQsE,KACdrG,EAAMkC,QAAUoE,KAChB/B,EAAOnC,MAAQ,KAuCfoB,EAAWG,SAAU,EACrBH,EAAWE,OAAQ,WApCZ2B,IACHrF,EAAMG,YACRoG,GAAS,WACHvG,EAAMiB,WACRtD,GAAkBqF,EAAaZ,MAAO,CACpC/D,qBAAqB,IAGvBc,GAAiB6D,EAAaZ,mBAK7BgD,WAEc,IAAjBpF,EAAMsB,SAEyB,iBAAjBtB,EAAMsB,SAElBjG,QACOA,OAAOnD,SAASsO,cAAcxG,EAAMsB,QAMtCtB,EAAMsB,iBA6BVkE,QAAiBiB,yDAAa,aAEnC1D,IAAKoC,KACFsB,YAGEhB,EAAUiB,EAAWtE,OACxBuE,GAAY,EACV5N,EAAQyM,EAAiB,CAC7BzK,KAAM2L,EACNE,gBACED,GAAY,YAGhB/D,EAAK8D,EAAW3N,KACZ4N,IACFvC,EAAWhC,OAAQ,EACnBmE,GAAS,WACP3D,EAAK,oBAAqBR,OAErB,YAIFyE,GAAUpN,EAAGqN,EAAOC,GAC3BxC,EAAOnC,gBAAW0E,cAASC,GAC3BnE,EAAK2B,EAAOnC,MAAO3I,YAEZ6L,GAAO0B,EAAMC,0BACb,IAAIC,SAAQ,SAACC,EAASC,GAC3B3C,EAAgB,SAAA4C,GACdF,EAAQE,GACR5C,EAAgBpF,IAElBqF,EAAe,SAAA4C,GACbF,EAAOE,GACP5C,EAAerF,QAEX+C,EAAwB,kBAAT4E,EAAqBA,GAAQhH,EAAMG,WACpDiC,GAA8B,IAArBmF,EAAUzO,SACrBuL,EAAOjC,MAAQ6E,GAEjBrE,EAAK,oBAAqBR,eAGrBoF,GAAY/N,GACnBA,EAAEyE,sBAIE4I,EAHEW,EAAe,SACfC,EAAa,OACbC,EAAYlO,EAAEgE,OAAOmK,aAAa,gBAEpCD,EACFb,EAAQW,MACH,CAAA,IF5iBmB,SAAChO,EAAGuB,EAAIgH,SACjB,KAAjBA,KACahH,EAAGhD,iBAAiBgK,IACzBjF,SAAStD,EAAEgE,QEyiBRoK,CAAiBpO,EAAGwJ,EAAWb,MAAOpC,EAAMgC,qBACrD8E,EAAQY,EAIVb,GAAUpN,EAAGqN,EAAO,aFhlBD9L,EAAIhC,EAAKoJ,EAC1B0F,EEglBIrN,EAAOjB,EAAYC,GACnBsO,EAAgB/E,EAAaZ,MAAM4F,wBACnCC,EAAchF,EAAWb,MAAM4F,wBAC/BE,EAAoE,aAAvD7M,OAAOyB,iBAAiBmG,EAAWb,OAAO+F,SACvDA,EACC/N,EAAOkK,EAAgBlC,MAAMgG,KAD9BD,EAEE/N,EAAOkK,EAAgBlC,MAAMiG,MAE/BC,EAAS,cACTtI,EAAM8B,UAAW,KACbwG,EAAQ,CACZC,0BACS,CACLC,OAAQ,EACRC,QAAS,EACTC,OAAQX,EAAcY,OAASV,EAAYU,OAC3CC,QAASb,EAAcc,MAAQZ,EAAYY,QAG/CC,0BACS,CACLN,OAAQL,EAAeJ,EAAcK,IAAMH,EAAYG,IACvDK,QAASN,EAAgBJ,EAAcM,KAAOJ,EAAYI,KAC1DK,OAAQP,EAAeJ,EAAcgB,OAASd,EAAYc,OAC1DH,QAAST,EAAgBJ,EAAciB,MAAQf,EAAYe,gBAI1Dd,EAAaI,EAAMC,WAAaD,EAAMQ,iBAEtC,GAtBI,GAyBTG,EAAkBnC,IAAUW,IFlnBfzM,EEknBwC9C,SAAS0G,KFlnB7C5F,EEknBmD,SFlnB9CoJ,EEknBwD7C,GAAaoI,GFjnB/FG,EAAa9M,EAAG6B,MAAM7D,GAC5BgC,EAAG6B,MAAM7D,GAAOoJ,EACT,WACLpH,EAAG6B,MAAM7D,GAAO8O,IEgnBRoB,EAAS,SAAAzP,GAEbA,EAAEyE,kBACF2I,GAAUpN,EAAGqN,EAAO,YAUhBsB,EACAC,EAVEzN,EAAOpB,EAAYC,GACrB0P,EAAS,CACXxP,EAAGiB,EAAKjB,EAAIc,EAAKd,EACjBE,EAAGe,EAAKf,EAAIY,EAAKZ,GAEfiN,IAAUW,IACZ0B,WAsEmBxB,EAAWwB,EAAQpB,EAAeE,EAAaC,OAChEkB,EAAY,SAAAC,SACZC,EAAaH,EAAOE,EAAIE,MAC5BD,EAAatJ,EAAM8B,UAAY/H,EAAMsP,EAAIrP,IAAKsP,EAAYD,EAAInP,KAAOoP,MACjEE,EAAOzP,EAAMsP,EAAII,QAASJ,EAAIK,QAAQJ,GAAaD,EAAIM,gBAC3DL,EAAaD,EAAIO,cAAcJ,EAAMtB,UAElCmB,EAAIQ,SAAWL,OACfH,EAAIE,KAAOD,MAIVQ,EAAmB,SAAC3B,EAAU0B,EAAUN,EAAMQ,OFnsBhCC,EEosBZC,EAAkBhC,EAAY4B,GAC9BK,EAAiBnC,EAAcI,GAAYF,EAAYE,GACvDgC,GFtsBYH,EEssBUH,GFrsBzBO,OAAO,GAAGC,cAAgBL,EAAEM,MAAM,SEssB9B,CACLf,KAAAA,EACAM,SAAAA,EACA7P,IAAK+P,EAAaG,GAAkBD,EACpC/P,IAAK6P,EAAaE,EAAkBC,EACpCT,QAASzJ,eAAYmK,IACrBR,QAAS3J,eAAYmK,IACrBT,QAAS,SAAAJ,UAAcrB,EAAY4B,GAAYP,GAAcS,EAAa,GAAK,IAC/EH,cAAe,SAACJ,EAAMtB,OACdoB,EAAarB,EAAY4B,GAAYL,SACvCtB,EACK6B,EAAaT,EAAa,GAExBS,EAAa,GAAK,GAAKT,EAAc,KAMhDiB,EAAa,CACjB/K,EAAG,CAAC,MAAO,SAAU,KAAK,GAC1BI,EAAG,CAAC,SAAU,SAAU,KAAK,GAC7BE,EAAG,CAAC,OAAQ,QAAS,KAAK,GAC1BJ,EAAG,CAAC,QAAS,QAAS,KAAK,IAGzB8K,EAAU,CAAE7Q,EAAG,EAAGE,EAAG,UACzB8N,EAAU8C,MAAM,IAAIhO,SAAQ,SAAA4M,OACpBqB,EAAgBZ,iBAAoBS,EAAWlB,KACrDmB,SACKA,GACApB,EAAUsB,OAGVF,EAxHMG,CAAgBhD,EAAWwB,EAAQpB,EAAeE,EAAaC,IAKtEA,GACFE,EAAMH,EAAYG,IAAML,EAAcK,IAAMe,EAAOtP,EACnDwO,EAAOJ,EAAYI,KAAON,EAAcM,KAAOc,EAAOxP,IAEtDyO,EAAMD,EAAegB,EAAOtP,EAC5BwO,EAAOF,EAAgBgB,EAAOxP,GAE5BmN,IAAUY,GAAc1H,EAAM8B,YAChCsG,EAAMrO,EAAMuO,EAAME,OAAQJ,EAAKE,EAAMI,QACrCL,EAAOtO,EAAMuO,EAAMG,QAASJ,EAAMC,EAAMM,cAEpC/L,SACJsL,SAAU,WACVC,IAAKA,EAAM,KACXC,KAAMA,EAAO,KACbuC,OAAQ,QACRC,YAAa,QACT3C,GAAc,CAChBC,SAAU,WACV2C,UAAW,QACXjC,MAAOZ,EAAYY,MAAQ,KAC3BF,OAAQV,EAAYU,OAAS,OAE3BQ,EAAON,OAAS,CAAEA,MAAOM,EAAON,MAAQ,OACxCM,EAAOR,QAAU,CAAEA,OAAQQ,EAAOR,OAAS,OAGjDrE,EAAgBlC,aACXkC,EAAgBlC,OAChBvF,IAgBP/B,EAAY,OAAQ5C,SAAUgR,GAC9BpO,EAAY,KAAM5C,UAdN,SAAN6S,EAAMtR,GAEVA,EAAEyE,kBACE4I,IAAUW,GACZwB,GAAmBA,IAGrB+B,YAAW,WACTnE,GAAUpN,EAAGqN,EAAO,UAEtB3L,EAAe,OAAQjD,SAAUgR,GACjC/N,EAAe,KAAMjD,SAAU6S,eAK1BE,KACPnQ,EAAY,OAAQmI,EAAWb,MAAOoF,IACtClD,EAAgBlC,MAAMyI,YAAc,gBAE7BxE,KACPlL,EAAe,OAAQ8H,EAAWb,MAAOoF,aAElC0D,KACP1H,EAAWtB,QAAS,EACpBqE,GAAS,WACPzL,EAAY,OAAQoI,EAAUd,MAAOoF,gBAGhClB,KACPnL,EAAe,OAAQ+H,EAAUd,MAAOoF,IACxChE,EAAWtB,QAAS,SAhbtBiJ,GACE,kBAAMnL,EAAMG,cACZ,SAAAiC,MACMgC,EAAWhC,MACbgC,EAAWhC,OAAQ,UAGrBmD,KACKnD,EAAO,IACVQ,EAAK,gBAAiB4C,EAAiB,CAAEzK,KAAM,mBAC3C0K,EAAU,gBAAgB,eAC5Bf,EAAa,QAGfyB,QAINgF,GAAM,kBAAMnL,EAAMiB,aAAYoE,GAC9B8F,GACE,kBAAMnL,EAAMkB,eACZ,SAAAkB,GACMpC,EAAMG,aAAeiC,IACvBoB,EAAWG,SAAU,MAI3BwH,GAAM,kBAAMnL,EAAMsB,SAAQiE,GAC1B4F,EACErG,GACA,SAAAvE,GACMA,IACFgD,EAAQnB,OAAQ,EAChBY,EAAaZ,MAAMvF,MAAMuO,QAAU,UAGvC,CACEC,MAAO,SAGXF,GACE,kBAAMnL,EAAM+B,QACZ,SAAAxB,GACMgD,EAAQnB,QACV7B,EAAM0K,KAAgB5E,SAI5B8E,GACE,kBAAMnL,EAAMkC,UACZ,SAAA3B,GACMgD,EAAQnB,QACV7B,EAAM2K,KAAkB5E,SAI9B6E,GACE,kBAAMnL,EAAMiC,oBACZ,SAAA1B,GACOA,IACH+D,EAAgBlC,MAAQ,OAQ9B+I,EAAMjH,GAAsB,SAAA4C,UAClBA,QACDxH,IACCU,EAAM4B,aAAe5B,EAAM6B,YAC7BmB,EAAaZ,MAAMhJ,QAErB4G,EAAM6B,WAAayB,EAAW5K,OAAOsK,EAAaZ,OAClDpC,EAAM+B,MAAQkJ,KACdjL,EAAMkC,QAAUgJ,KAEhBtI,EAAK,WACLA,EAAK,SAAU4C,EAAiB,CAAEzK,KAAM,YACxC0J,EAAc,mBAEXnF,GACCgE,EAAWgI,WACbhI,EAAW3K,qBAGV2G,GACH+D,EAAgBjB,MAAQ,KACxBpC,EAAMiB,YAAc9B,GAAiB6D,EAAaZ,OAC7CpC,EAAMiC,mBACTqC,EAAgBlC,MAAQ,QAGtBuE,GAAY,EACV5N,EAAQyM,EAAiB,CAC7BzK,KAAM,SACN6L,gBACED,GAAY,QAGhB/D,EAAK,WACLA,EAAK,SAAU7J,GACf0L,EAAc,QACVkC,EAAW,OACftC,EAAOjC,MAAQ,OAKrBpC,EAAM4F,IAAI2F,OAAOnP,KAAK+I,KAEtBqG,GAAU,WACRjG,OAEFkG,GAAgB,iBACdtF,IACAnG,EAAMiB,YAAc+B,EAAaZ,OAASjD,GAAiB6D,EAAaZ,OACxE/J,MAAAA,aAAAA,EAAM+J,sBAAOsJ,aAET/F,EAAQ3F,EAAM4F,IAAI2F,OAAOzF,WAAU,SAAAC,UAAMA,EAAGlD,MAAQA,KAExD7C,EAAM4F,IAAI2F,OAAOvF,OAAOL,EAAO,MA4W1B,CACLtN,KAAAA,EACA2K,aAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAC,qBAAAA,EACAC,cAAAA,EACAuB,0BAAAA,EACAE,mBAAAA,EACAhB,iBAAAA,EACAM,eAAAA,EACAZ,QAAAA,EACAC,WAAAA,EACAa,OAAAA,EACAU,gBAAAA,EACAC,UAAAA,EACAC,iBAAAA,EACA0G,qBAnQmBlS,GACnB+K,EAAgBpC,MAAQ3I,MAAAA,SAAAA,EAAGgE,QAmQ3BmO,8BA/PIpH,EAAgBpC,QAAUY,EAAaZ,OAEtB,gBAAjBmC,EAAOnC,QACXQ,EAAK,gBAAiB4C,EAAiB,CAAEzK,KAAM,mBAC/CiF,EAAMmB,cAAgByB,EAAK,qBAAqB,KA4PhDiJ,iBAzPItI,EAAQnB,OAASpC,EAAMoB,YACzBwB,EAAK,qBAAqB,+DCzetBG,IAAI,kBACE,iHC3ClB,SAAqB+I,EAAK/I,QACX,IAARA,IAAiBA,EAAM,QACxBgJ,EAAWhJ,EAAIgJ,YAEdD,GAA2B,oBAAb5T,cAEf8T,EAAO9T,SAAS8T,MAAQ9T,SAAS+T,qBAAqB,QAAQ,GAC9DpP,EAAQ3E,SAASgU,cAAc,SACnCrP,EAAM9B,KAAO,WAEI,QAAbgR,GACEC,EAAKG,WACPH,EAAKI,aAAavP,EAAOmP,EAAKG,YAKhCH,EAAKtG,YAAY7I,GAGfA,EAAMwP,WACRxP,EAAMwP,WAAWC,QAAUR,EAE3BjP,EAAM6I,YAAYxN,SAASqU,eAAeT,m9DDrBpCU,oBAA6BC,iBADrCC,eAGE3J,IAAI,OACHlG,QAAO4P,sBACF,uBACGD,2DAA0EA,eAClFG,2CAAaF,kDAEdG,IAAAC,8BAA+CC,EAAML,iCACnD,mBACSD,eAAeC,aAAW9I,aADnC+I,wBAEQ,qDACEF,iBACP3P,QAAO2P,oDAGZI,IAAAC,uBAAwCC,EAAML,+BAC5C,oBAAAM,SAEEhK,IAAI,wBACE,4DACEyJ,YACP3P,QAAO2P,0BACQC,aAAW/I,MAAMsJ,WACjCC,KAAK,sBACM,OACXC,SAAS,KACRC,2CAAcV,2EACdd,6CAAgBc,+DAEjBM,SACEhK,IAAI,sBACE,gBACGyJ,oCAAqCA,eAC7C3P,QAAO4P,oBACPd,2CAAWc,wBAEZW,sBAAO/I,OAAQoI,SAAStG,wBAAakH,mCAE7BZ,aAAWvK,QAAUuK,aAAW/I,WADxCgJ,QAAAY,WAKEZ,WACsBF,6BAAb7E,cADT+E,SAEG1T,IAAK2O,EACLA,UAAWA,iCACWA,GACjB,+FA9BJ8E,aAAW/I,yCAjBf8I,oBAA+BC,4FEqB3C,OAAe,CACbc,QAAS,CACPjD,eAAM3E,QACCC,IAAI4H,cAAcxH,OAAOL,EAAO,IAEvC8H,gBAAO9H,EAAOjC,QACP4G,MAAM3E,GACXjC,EAAM+J,QAAU/J,EAAM+J,UAExBC,qBAAYhK,GACNA,EAAMtB,QACRsB,MAAAA,GAAAA,EAAOiK,YAAY,UAGjBC,oBAAWnU,EAAGiK,EAAOiC,qCACzBlM,EAAEsJ,IAAIsB,OAAOjC,MAAQsB,EAAMW,aACrBwJ,EAAKC,kBACLD,EAAKC,YACNpK,EAAMtB,QACTyL,EAAKvD,MAAM3E,GACXjC,MAAAA,GAAAA,EAAO0D,OAAO,4LAGlB2G,kBAASxN,SACe,iBAARA,eC/CP,gFAAXmM,QAAAsB,WACEtB,WAE2BW,MAAIG,wBAArB9J,EAAOiC,cAFjBsI,IACOvK,EAAMwK,WADbrB,GAGG7T,IAAK0K,EAAMyK,IACJzK,EAAMjL,iBACLiL,EAAMtB,+CAANsB,EAAMtB,UACf0K,IAAYsB,KACXC,kCAAcC,cAAY5K,IAC1B6K,6BAASD,SAAO3I,EAAOjC,IACvB8K,cAAa,SAAA/U,UAAK6U,aAAW7U,EAAGiK,EAAOiC,IACvC8I,UAAS/K,EAAMgL,oBAEgBhL,EAAMiL,gBAApBC,EAAM5V,eAAsBA,QAC5C,kBAAA6V,oCACWP,WAASM,QAApBlC,eAA2BoC,UAAQF,oBACnCX,IAAgBW,EAAKV,WAArBrB,UAA+C+B,EAAKnW,KAAMqU,EAAM8B,EAAKR,qLCbhEW,oDAEHC,EAAU,SAAAd,OACRe,SAAkBf,OAAWlO,WAAYkO,EAAUlO,gBACzDU,OAAOwO,OAAOD,EAAWjP,MAAO,CAC9B4F,IAAK,CAAE7K,KAAM2F,eAAiB,kBAAMmN,MAE/BsB,EAAQF,SAGZ1D,OAAS,QACT1F,aAAe,QACfuJ,cAAgBJ,EAAQK,SAExB7B,cAAgB8B,EAAgB,SAChCC,gBAAkBP,EAAQQ,kCAGjC,SAAK9L,8BAAU+L,mCAAAA,6BACE/L,QACR,gBACIlL,KAAK8M,mBAAO5B,GAAO,UAAS+L,QAChC,eACcjX,KAAKkX,SAAShM,EAAO+L,EAAK,IAAnCzI,IAAAA,YACDA,yBAKb,sCAAQ2I,2BAAAA,yBACCnX,KAAK8M,OAAOqK,GAAO,0BAG5B,kBACSnX,KAAKoX,kBAAQpX,KAAKqN,aAAagK,KAAI,SAAAnM,UAASA,EAAM1D,MAAMC,gCAGjE,SAAOA,8BAASwP,mCAAAA,wBACRlE,EAAS5K,MAAMuE,QAAQjF,GAAQzH,KAAKsX,iBAAO7P,IAAQzH,KAAKsX,IAAI7P,UAC3DiH,QAAQ6I,WAAWxE,EAAOsE,KAAI,SAAAnM,UAASA,EAAM4B,aAAN5B,EAAgB+L,0BAGhE,sCAAOE,2BAAAA,yBACEnX,KAAK+S,OAAOnM,QAAO,SAAAsE,UAASiM,EAAM5S,SAAS2G,EAAM1D,MAAMC,mCAGhE,SAAWpC,UACuC,IAAzCrF,KAAKgV,cAAchN,QAAQ3C,2BAGpC,SAASmS,cAAU3L,yDAAS,GACtBxG,EAAU4F,KACZrB,OAAO,EACP8L,UAAW1V,KAAK4W,cAChBjB,GAAIrL,OAAO,YACXrK,KAAM,GACNkW,MAAO,GACPP,GAAI,GACJ/J,OAAAA,GACG2L,IAGChJ,EAAO,kBACJiJ,EAAKC,WAAWrS,GACnBqJ,QAAQC,QAAQ,6CAChB,IAAID,SAAQ,SAACC,EAASC,GACpBvJ,EAAQuE,OAAQ,EAChBvE,EAAQuJ,OAASA,EACjBvJ,EAAQ6Q,OAAS,WACfvH,EAAQ,SAEV8I,EAAKzC,cAAcpR,KAAKyB,OAI1B+R,EAAO,kBACJK,EAAKC,WAAWrS,GACnB,IAAIqJ,SAAQ,SAACC,EAASC,GACpBvJ,EAAQuE,OAAQ,EAChBvE,EAAQ8P,YAAcvG,EACtBvJ,EAAQ4P,OAAS,WACftG,EAAQ,YAGZD,QAAQC,QAAQ,oDAGf,CAAEH,KAAAA,EAAM4I,KAAAA,EAAM/R,QAAAA,YAOZsS,GAAsB,eAC7BC,EAAgB,IAAIrB,SACjB,CACLsB,KAAMD,EACNhB,cAAegB,EAAchB,cAC7BG,gBAAiBa,EAAcb,gBAC/BG,SAAUU,EAAcV,SAASjX,KAAK2X,KAOpCA,GAAgBD,KAEPE,GAAmDD,GAAnDC,KAAMjB,GAA6CgB,GAA7ChB,cAAeG,GAA8Ba,GAA9Bb,gBAAiBG,GAAaU,GAAbV"}