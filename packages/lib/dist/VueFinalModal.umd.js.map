{"version":3,"file":"VueFinalModal.umd.js","sources":["../src/utils/focusTrap.js","../src/utils/dragResize.js","../src/utils/bodyScrollLock.js","../src/VueFinalModal.vue","../src/VueFinalModal.vue?vue&type=template&id=72c09f54&lang.js","../../../node_modules/.pnpm/style-inject@0.3.0/node_modules/style-inject/dist/style-inject.es.js","../src/ModalsContainer.vue","../src/ModalsContainer.vue?vue&type=template&id=437c4752&lang.js","../src/modalInstance.js"],"sourcesContent":["// stolen from vue-js-modal\n\nconst FOCUSABLE_ELEMENTS_QUERY =\n  'button:not([disabled]), ' +\n  'select:not([disabled]), ' +\n  'a[href]:not([disabled]), ' +\n  'area[href]:not([disabled]), ' +\n  '[contentEditable=\"\"]:not([disabled]), ' +\n  '[contentEditable=\"true\"]:not([disabled]), ' +\n  '[contentEditable=\"TRUE\"]:not([disabled]), ' +\n  'textarea:not([disabled]), ' +\n  'iframe:not([disabled]), ' +\n  'input:not([disabled]), ' +\n  'summary:not([disabled]), ' +\n  '[tabindex]:not([tabindex=\"-1\"])'\n\nconst isTabPressed = event => {\n  return event.key === 'Tab' || event.keyCode === 9\n}\n\nconst querySelectorAll = (element, selector) => {\n  return [...(element.querySelectorAll(selector) || [])]\n}\n\nconst queryFocusableElements = element => {\n  return querySelectorAll(element, FOCUSABLE_ELEMENTS_QUERY)\n}\n\nconst isFocused = element => {\n  return element == document.activeElement\n}\n\nconst isNothingFocused = () => {\n  return !document.activeElement\n}\n\nclass FocusTrap {\n  constructor() {\n    this.root = null\n    this.elements = []\n\n    this.onKeyDown = this.onKeyDown.bind(this)\n  }\n\n  /**\n   * Get last Element on the trap\n   *\n   * @return {HTMLElement | null} element\n   */\n  get lastElement() {\n    return this.elements[this.elements.length - 1] || null\n  }\n\n  /**\n   * Get first Element on the trap\n   *\n   * @return {HTMLElement | null} element\n   */\n  get firstElement() {\n    return this.elements[0] || null\n  }\n\n  /**\n   * Get whether the trap is enabled\n   *\n   * @return {boolean} isEnabled\n   */\n  get isEnabled() {\n    return !!this.root\n  }\n\n  onKeyDown(event) {\n    if (!isTabPressed(event)) {\n      return\n    }\n\n    // SHIFT + TAB\n    if (event.shiftKey) {\n      if (isFocused(this.firstElement)) {\n        this.lastElement.focus()\n        event.preventDefault()\n      }\n      return\n    }\n\n    // TAB\n    if (isNothingFocused() || isFocused(this.lastElement)) {\n      this.firstElement.focus()\n      event.preventDefault()\n      return\n    }\n  }\n\n  /**\n   * Enable focus trap\n   *\n   * @param {HTMLElement} root - the focus trap root element\n   */\n  enable(root) {\n    if (!root) {\n      return\n    }\n\n    this.root = root\n    this.elements = queryFocusableElements(this.root)\n\n    this.root.addEventListener('keydown', this.onKeyDown)\n  }\n\n  /**\n   * Disable focus trap\n   */\n  disable() {\n    this.root.removeEventListener('keydown', this.onKeyDown)\n    this.root = null\n  }\n}\n\n/**\n * @type {FocusTrap | null}\n */\nlet instance = null\n\n/**\n * Get FocusTrap instance\n *\n * @returns {FocusTrap} focusTrap\n */\nexport function useFocusTrap() {\n  if (instance == null) {\n    instance = new FocusTrap()\n  }\n\n  return instance\n}\n","export const setStyle = (el, key, value) => {\n  const cacheStyle = el.style[key]\n  el.style[key] = value\n  return () => {\n    el.style[key] = cacheStyle\n  }\n}\n\nexport const getPosition = e => {\n  const { clientX: x, clientY: y } = e.targetTouches ? e.targetTouches[0] : e\n  return { x, y }\n}\n\nexport const capitalize = s => {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport const clamp = (min, num, max) => {\n  if (typeof min !== 'number') {\n    min = Math.min(num, max) || num\n  }\n  if (typeof max !== 'number') {\n    max = Math.max(num, min)\n  }\n  return Math.min(Math.max(num, min), max)\n}\n\nexport const trimPx = distance => {\n  return (distance && Number(distance.replace(/px$/, ''))) || 0\n}\n\nexport const validDragElement = (e, el, dragSelector) => {\n  if (dragSelector === '') return true\n  const list = [...el.querySelectorAll(dragSelector)]\n  return list.includes(e.target)\n}\n\nconst pointerType = {\n  down: {\n    pc: 'mousedown',\n    m: 'touchstart'\n  },\n  move: {\n    pc: 'mousemove',\n    m: 'touchmove'\n  },\n  up: {\n    pc: 'mouseup',\n    m: 'touchend'\n  }\n}\nexport const addListener = (type, el, callback) => {\n  el && el.addEventListener(pointerType[type].pc, callback)\n  el && el.addEventListener(pointerType[type].m, callback, { passive: false })\n}\nexport const removeListener = (type, el, callback) => {\n  el && el.removeEventListener(pointerType[type].pc, callback)\n  el && el.removeEventListener(pointerType[type].m, callback)\n}\n","// stolen from body-scroll-lock\n\n// Older browsers don't support event options, feature detect it.\nlet hasPassiveEvents = false\nif (typeof window !== 'undefined') {\n  const passiveTestOptions = {\n    get passive() {\n      hasPassiveEvents = true\n      return undefined\n    }\n  }\n  window.addEventListener('testPassive', null, passiveTestOptions)\n  window.removeEventListener('testPassive', null, passiveTestOptions)\n}\n\nconst isIosDevice =\n  typeof window !== 'undefined' &&\n  window.navigator &&\n  window.navigator.platform &&\n  (/iP(ad|hone|od)/.test(window.navigator.platform) ||\n    (window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1))\n\nlet locks = []\nlet documentListenerAdded = false\nlet clientY = 0\nlet initialClientY = -1\nlet previousBodyOverflowSetting\nlet previousBodyPaddingRight\n\nconst hasScrollbar = el => {\n  if (!el || el.nodeType !== Node.ELEMENT_NODE) return false\n\n  const style = window.getComputedStyle(el)\n  return ['auto', 'scroll'].includes(style.overflowY) && el.scrollHeight > el.clientHeight\n}\n\nconst shouldScroll = (el, delta) => {\n  if (el.scrollTop === 0 && delta < 0) return false\n  if (el.scrollTop + el.clientHeight + delta >= el.scrollHeight && delta > 0) return false\n  return true\n}\n\nconst composedPath = el => {\n  const path = []\n  while (el) {\n    path.push(el)\n    if (el.classList.contains('vfm')) return path\n    el = el.parentElement\n  }\n  return path\n}\n\nconst hasAnyScrollableEl = (el, delta) => {\n  let hasAnyScrollableEl = false\n  const path = composedPath(el)\n  path.forEach(el => {\n    if (hasScrollbar(el) && shouldScroll(el, delta)) {\n      hasAnyScrollableEl = true\n    }\n  })\n  return hasAnyScrollableEl\n}\n\n// returns true if `el` should be allowed to receive touchmove events.\nconst allowTouchMove = el => locks.some(() => hasAnyScrollableEl(el, -clientY))\n\nconst preventDefault = rawEvent => {\n  const e = rawEvent || window.event\n\n  // For the case whereby consumers adds a touchmove event listener to document.\n  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n  // the touchmove event on document will break.\n  if (allowTouchMove(e.target)) {\n    return true\n  }\n  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n  if (e.touches.length > 1) return true\n\n  if (e.preventDefault) e.preventDefault()\n\n  return false\n}\n\nconst setOverflowHidden = options => {\n  // If previousBodyPaddingRight is already set, don't set it again.\n  if (previousBodyPaddingRight === undefined) {\n    const reserveScrollBarGap = !!options && options.reserveScrollBarGap === true\n    const scrollBarGap = window.innerWidth - document.documentElement.clientWidth\n\n    if (reserveScrollBarGap && scrollBarGap > 0) {\n      const computedBodyPaddingRight = parseInt(getComputedStyle(document.body).getPropertyValue('padding-right'), 10)\n      previousBodyPaddingRight = document.body.style.paddingRight\n      document.body.style.paddingRight = `${computedBodyPaddingRight + scrollBarGap}px`\n    }\n  }\n  // If previousBodyOverflowSetting is already set, don't set it again.\n  if (previousBodyOverflowSetting === undefined) {\n    previousBodyOverflowSetting = document.body.style.overflow\n    document.body.style.overflow = 'hidden'\n  }\n}\n\nconst restoreOverflowSetting = () => {\n  if (previousBodyPaddingRight !== undefined) {\n    document.body.style.paddingRight = previousBodyPaddingRight\n\n    // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n    // can be set again.\n    previousBodyPaddingRight = undefined\n  }\n\n  if (previousBodyOverflowSetting !== undefined) {\n    document.body.style.overflow = previousBodyOverflowSetting\n\n    // Restore previousBodyOverflowSetting to undefined\n    // so setOverflowHidden knows it can be set again.\n    previousBodyOverflowSetting = undefined\n  }\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\nconst isTargetElementTotallyScrolled = targetElement =>\n  targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false\n\nconst handleScroll = (event, targetElement) => {\n  clientY = event.targetTouches[0].clientY - initialClientY\n\n  if (allowTouchMove(event.target)) {\n    return false\n  }\n\n  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n    // element is at the top of its scroll.\n    return preventDefault(event)\n  }\n\n  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n    // element is at the bottom of its scroll.\n    return preventDefault(event)\n  }\n\n  event.stopPropagation()\n  return true\n}\n\nexport const disableBodyScroll = (targetElement, options) => {\n  // targetElement must be provided\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.'\n    )\n    return\n  }\n\n  // disableBodyScroll must not have been called on this targetElement before\n  if (locks.some(lock => lock.targetElement === targetElement)) {\n    return\n  }\n\n  const lock = {\n    targetElement,\n    options: options || {}\n  }\n\n  locks = [...locks, lock]\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = event => {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        initialClientY = event.targetTouches[0].clientY\n      }\n    }\n    targetElement.ontouchmove = event => {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        handleScroll(event, targetElement)\n      }\n    }\n\n    if (!documentListenerAdded) {\n      document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined)\n      documentListenerAdded = true\n    }\n  } else {\n    setOverflowHidden(options)\n  }\n}\n\nexport const enableBodyScroll = targetElement => {\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.'\n    )\n    return\n  }\n\n  locks = locks.filter(lock => lock.targetElement !== targetElement)\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = null\n    targetElement.ontouchmove = null\n\n    if (documentListenerAdded && locks.length === 0) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined)\n      documentListenerAdded = false\n    }\n  } else if (!locks.length) {\n    restoreOverflowSetting()\n  }\n}\n","<template>\n  <div\n    v-if=\"displayDirective !== 'if' || visible\"\n    v-show=\"displayDirective !== 'show' || visible\"\n    ref=\"root\"\n    :style=\"bindStyle\"\n    class=\"vfm vfm--inset\"\n    :class=\"[attach === false ? 'vfm--fixed' : 'vfm--absolute', { 'vfm--prevent-none': nonModal }]\"\n    @keydown.esc=\"onEsc\"\n  >\n    <transition v-bind=\"computedOverlayTransition\" v-on=\"overlayListeners\">\n      <div\n        v-if=\"!hideOverlay && visibility.overlay\"\n        class=\"vfm__overlay vfm--overlay vfm--absolute vfm--inset\"\n        :class=\"overlayClass\"\n        :style=\"overlayStyle\"\n      ></div>\n    </transition>\n    <transition v-bind=\"computedTransition\" v-on=\"modalListeners\">\n      <div\n        v-show=\"visibility.modal\"\n        ref=\"vfmContainer\"\n        class=\"vfm__container vfm--absolute vfm--inset vfm--outline-none\"\n        :class=\"classes\"\n        :style=\"styles\"\n        :aria-expanded=\"visibility.modal.toString()\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        tabindex=\"-1\"\n        @mouseup.self=\"onMouseupContainer\"\n        @mousedown.self=\"onMousedown\"\n      >\n        <div\n          ref=\"vfmContent\"\n          class=\"vfm__content\"\n          :class=\"[contentClass, { 'vfm--prevent-auto': nonModal }]\"\n          :style=\"bindContentStyle\"\n          @mousedown=\"onMousedown(null)\"\n        >\n          <slot :params=\"params\" :close=\"() => $emit('update:modelValue', false)\" />\n          <div\n            v-if=\"visibility.resize && visibility.modal\"\n            ref=\"vfmResize\"\n            class=\"vfm__resize vfm--absolute vfm--inset vfm--prevent-none vfm--select-none vfm--touch-none\"\n          >\n            <div\n              v-for=\"direction in resizeDirections\"\n              :key=\"direction\"\n              :direction=\"direction\"\n              :class=\"`vfm--resize-${direction}`\"\n              class=\"vfm--absolute vfm--prevent-auto\"\n            ></div>\n          </div>\n        </div>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\n/* eslint-disable vue/no-mutating-props */\nimport { ref, reactive, onMounted, onBeforeUnmount, computed, nextTick, watch } from 'vue'\nimport { useFocusTrap } from './utils/focusTrap.js'\nimport {\n  setStyle,\n  getPosition,\n  capitalize,\n  clamp,\n  trimPx,\n  validDragElement,\n  addListener,\n  removeListener\n} from './utils/dragResize.js'\nimport { disableBodyScroll, enableBodyScroll } from './utils/bodyScrollLock'\n\nconst noop = () => {}\n\nconst TransitionState = {\n  Enter: 'enter',\n  Entering: 'entering',\n  Leave: 'leave',\n  Leaving: 'leavng'\n}\n\nconst resizeCursor = {\n  t: 'ns-resize',\n  tr: 'nesw-resize',\n  r: 'ew-resize',\n  br: 'nwse-resize',\n  b: 'ns-resize',\n  bl: 'nesw-resize',\n  l: 'ew-resize',\n  tl: 'nwse-resize'\n}\n\nexport default {\n  props: {\n    name: { type: String, default: null },\n    modelValue: { type: Boolean, default: false },\n    displayDirective: {\n      type: String,\n      default: 'show',\n      validator(val) {\n        return ['if', 'show'].indexOf(val) !== -1\n      }\n    },\n    classes: { type: [String, Object, Array], default: '' },\n    overlayClass: { type: [String, Object, Array], default: '' },\n    contentClass: { type: [String, Object, Array], default: '' },\n    styles: { type: [Object, Array], default: () => ({}) },\n    overlayStyle: { type: [Object, Array], default: () => ({}) },\n    contentStyle: { type: [Object, Array], default: () => ({}) },\n    lockScroll: { type: Boolean, default: true },\n    hideOverlay: { type: Boolean, default: false },\n    clickToClose: { type: Boolean, default: true },\n    escToClose: { type: Boolean, default: false },\n    nonModal: { type: Boolean, default: false },\n    attach: {\n      type: null,\n      default: false,\n      validator(val) {\n        const type = typeof val\n\n        if (type === 'boolean' || type === 'string') return true\n\n        return val.nodeType === Node.ELEMENT_NODE\n      }\n    },\n    transition: { type: [String, Object], default: 'vfm' },\n    overlayTransition: { type: [String, Object], default: 'vfm' },\n    zIndexAuto: { type: Boolean, default: true },\n    zIndexBase: { type: [String, Number], default: 1000 },\n    zIndex: { type: [Boolean, String, Number], default: false },\n    focusRetain: { type: Boolean, default: true },\n    focusTrap: { type: Boolean, default: false },\n    fitParent: { type: Boolean, default: true },\n    drag: { type: Boolean, default: false },\n    dragSelector: { type: String, default: '' },\n    keepChangedStyle: { type: Boolean, default: false },\n    resize: {\n      type: Boolean,\n      default: false\n    },\n    resizeDirections: {\n      type: Array,\n      default: () => ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'],\n      validator: val =>\n        ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'].filter(value => val.indexOf(value) !== -1).length === val.length\n    },\n    minWidth: { type: Number, default: 0 },\n    minHeight: { type: Number, default: 0 },\n    maxWidth: { type: Number, default: Infinity },\n    maxHeight: { type: Number, default: Infinity }\n  },\n  emits: [\n    'update:modelValue',\n    'click-outside',\n    'before-open',\n    'opened',\n    '_before-close',\n    'before-close',\n    'closed',\n    '_before-open',\n    '_opened',\n    '_closed',\n    'drag:start',\n    'drag:move',\n    'drag:end',\n    'resize:start',\n    'resize:move',\n    'resize:end'\n  ],\n  setup(props, { emit }) {\n    const uid = Symbol('vfm')\n    const root = ref(null)\n    const vfmContainer = ref(null)\n    const vfmContent = ref(null)\n    const vfmResize = ref(null)\n    const vfmOverlayTransition = ref(null)\n    const vfmTransition = ref(null)\n\n    const modalStackIndex = ref(null)\n    const $focusTrap = useFocusTrap()\n\n    const visible = ref(false)\n    const visibility = reactive({\n      modal: false,\n      overlay: false,\n      resize: false\n    })\n    const overlayTransitionState = ref(null)\n    const overlayListeners = {\n      beforeEnter() {\n        overlayTransitionState.value = TransitionState.Entering\n      },\n      afterEnter() {\n        overlayTransitionState.value = TransitionState.Enter\n      },\n      beforeLeave() {\n        overlayTransitionState.value = TransitionState.Leaving\n      },\n      afterLeave() {\n        overlayTransitionState.value = TransitionState.Leave\n      }\n    }\n\n    const modalTransitionState = ref(null)\n    const modalListeners = {\n      beforeEnter() {\n        modalTransitionState.value = TransitionState.Entering\n      },\n      afterEnter() {\n        modalTransitionState.value = TransitionState.Enter\n      },\n      beforeLeave() {\n        modalTransitionState.value = TransitionState.Leaving\n      },\n      afterLeave() {\n        modalTransitionState.value = TransitionState.Leave\n      }\n    }\n\n    const _stopEvent = ref(false)\n    const params = ref({})\n    const dragResizeStyle = ref({})\n    const _state = ref(null)\n    const lastMousedownEl = ref(null)\n\n    let resolveToggle = noop\n    let rejectToggle = noop\n\n    const computedOverlayTransition = computed(() => {\n      if (typeof props.overlayTransition === 'string') return { name: props.overlayTransition }\n      return { ...props.overlayTransition }\n    })\n\n    const computedTransition = computed(() => {\n      if (typeof props.transition === 'string') return { name: props.transition }\n      return { ...props.transition }\n    })\n\n    const isComponentReadyToBeDestroyed = computed(() => {\n      return (\n        (props.hideOverlay || overlayTransitionState.value === TransitionState.Leave) &&\n        modalTransitionState.value === TransitionState.Leave\n      )\n    })\n\n    const calculateZIndex = computed(() => {\n      if (props.zIndex === false) {\n        if (props.zIndexAuto) {\n          return +props.zIndexBase + 2 * (modalStackIndex.value || 0)\n        } else {\n          return false\n        }\n      } else {\n        return props.zIndex\n      }\n    })\n\n    const bindStyle = computed(() => {\n      return {\n        ...(calculateZIndex.value !== false && {\n          zIndex: calculateZIndex.value\n        })\n      }\n    })\n\n    const bindContentStyle = computed(() => {\n      let style = [dragResizeStyle.value]\n      Array.isArray(props.contentStyle) ? style.push(...props.contentStyle) : style.push(props.contentStyle)\n      return style\n    })\n\n    watch(\n      () => props.modelValue,\n      value => {\n        if (_stopEvent.value) {\n          _stopEvent.value = false\n          return\n        }\n        mounted()\n        if (!value) {\n          emit('_before-close', createModalEvent({ type: '_before-close' }))\n          if (emitEvent('before-close', true)) {\n            rejectToggle('hide')\n            return\n          }\n          close()\n        }\n      }\n    )\n    watch(() => props.lockScroll, handleLockScroll)\n    watch(\n      () => props.hideOverlay,\n      value => {\n        if (props.modelValue && !value) {\n          visibility.overlay = true\n        }\n      }\n    )\n    watch(() => props.attach, mounted)\n    watch(\n      isComponentReadyToBeDestroyed,\n      val => {\n        if (val) {\n          visible.value = false\n          vfmContainer.value.style.display = 'none'\n        }\n      },\n      {\n        flush: 'post'\n      }\n    )\n    watch(\n      () => props.drag,\n      val => {\n        if (visible.value) {\n          val ? addDragDown() : removeDragDown()\n        }\n      }\n    )\n    watch(\n      () => props.resize,\n      val => {\n        if (visible.value) {\n          val ? addResizeDown() : removeResizeDown()\n        }\n      }\n    )\n    watch(\n      () => props.keepChangedStyle,\n      val => {\n        if (!val) {\n          dragResizeStyle.value = {}\n        }\n      }\n    )\n\n    /**\n     * Side effect about modal transtion state update\n     */\n    watch(modalTransitionState, state => {\n      switch (state) {\n        case TransitionState.Enter:\n          if (props.focusRetain || props.focusTrap) {\n            vfmContainer.value.focus()\n          }\n          props.focusTrap && $focusTrap.enable(vfmContainer.value)\n          props.drag && addDragDown()\n          props.resize && addResizeDown()\n\n          emit('_opened')\n          emit('opened', createModalEvent({ type: 'opened' }))\n          resolveToggle('show')\n          break\n        case TransitionState.Leaving:\n          if ($focusTrap.enabled()) {\n            $focusTrap.disable()\n          }\n          break\n        case TransitionState.Leave:\n          modalStackIndex.value = null\n          props.lockScroll && enableBodyScroll(vfmContainer.value)\n          if (!props.keepChangedStyle) {\n            dragResizeStyle.value = {}\n          }\n\n          let stopEvent = false\n          const event = createModalEvent({\n            type: 'closed',\n            stop() {\n              stopEvent = true\n            }\n          })\n          emit('_closed')\n          emit('closed', event)\n          resolveToggle('hide')\n          if (stopEvent) return\n          params.value = {}\n          break\n      }\n    })\n\n    props.api.modals.push(getModalInfo())\n\n    onMounted(() => {\n      mounted()\n    })\n    onBeforeUnmount(() => {\n      close()\n      props.lockScroll && vfmContainer.value && enableBodyScroll(vfmContainer.value)\n      root?.value?.remove()\n\n      let index = props.api.modals.findIndex(vm => vm.uid === uid)\n\n      props.api.modals.splice(index, 1)\n    })\n    function getModalInfo() {\n      return {\n        uid,\n        props,\n        emit,\n        vfmContainer,\n        vfmContent,\n        vfmResize,\n        vfmOverlayTransition,\n        vfmTransition,\n        getAttachElement,\n        modalStackIndex,\n        visibility,\n        handleLockScroll,\n        $focusTrap,\n        toggle,\n        params\n      }\n    }\n    function mounted() {\n      if (props.modelValue) {\n        emit('_before-open', createModalEvent({ type: '_before-open' }))\n        if (emitEvent('before-open', false)) {\n          rejectToggle('show')\n          return\n        }\n\n        let target = getAttachElement()\n        if (target || props.attach === false) {\n          props.attach !== false && target.appendChild(root.value)\n\n          let index = props.api.openedModals.findIndex(vm => vm.uid === uid)\n\n          if (index !== -1) {\n            // if this is already exist in modalStack, delete it\n            props.api.openedModals.splice(index, 1)\n          }\n          props.api.openedModals.push(getModalInfo())\n\n          modalStackIndex.value = props.api.openedModals.length - 1\n\n          handleLockScroll()\n\n          props.api.openedModals\n            .filter(vm => vm.uid !== uid)\n            .forEach((vm, index) => {\n              if (vm.getAttachElement() === target) {\n                // if vm and this have the same attach element\n                vm.modalStackIndex.value = index\n                vm.visibility.overlay = false\n              }\n            })\n\n          visible.value = true\n          startTransitionEnter()\n        } else if (target !== false) {\n          console.warn('Unable to locate target '.concat(props.attach))\n        }\n      }\n    }\n    function close() {\n      let index = props.api.openedModals.findIndex(vm => vm.uid === uid)\n      if (index !== -1) {\n        // remove this in modalStack\n        props.api.openedModals.splice(index, 1)\n      }\n      if (props.api.openedModals.length > 0) {\n        // If there are still nested modals opened\n        const $_vm = props.api.openedModals[props.api.openedModals.length - 1]\n\n        if ($_vm.props.focusTrap) {\n          nextTick(() => {\n            $_vm.$focusTrap.enable($_vm.vfmContainer.value)\n            $_vm.$focusTrap.firstElement.focus()\n          })\n        }\n\n        if ($_vm.props.focusRetain || $_vm.props.focusTrap) {\n          $_vm.vfmContainer.value.focus()\n        }\n        !$_vm.props.hideOverlay && ($_vm.visibility.overlay = true)\n      }\n      props.drag && removeDragDown()\n      props.resize && removeResizeDown()\n      _state.value = null\n\n      startTransitionLeave()\n    }\n    function handleLockScroll() {\n      if (props.modelValue) {\n        nextTick(() => {\n          if (props.lockScroll) {\n            disableBodyScroll(vfmContainer.value, {\n              reserveScrollBarGap: true\n            })\n          } else {\n            enableBodyScroll(vfmContainer.value)\n          }\n        })\n      }\n    }\n    function getAttachElement() {\n      let target\n      if (props.attach === false) {\n        target = false\n      } else if (typeof props.attach === 'string') {\n        // CSS selector\n        if (window) {\n          target = window.document.querySelector(props.attach)\n        } else {\n          target = false\n        }\n      } else {\n        // DOM Element\n        target = props.attach\n      }\n      return target\n    }\n    function startTransitionEnter() {\n      visibility.overlay = true\n      visibility.modal = true\n    }\n    function startTransitionLeave() {\n      visibility.overlay = false\n      visibility.modal = false\n    }\n\n    function onMousedown(e) {\n      lastMousedownEl.value = e?.target\n    }\n    function onMouseupContainer() {\n      // skip when the lastMousedownEl didn't equal vfmContainer\n      if (lastMousedownEl.value !== vfmContainer.value) return\n      // skip when state equal 'resize:move'\n      if (_state.value === 'resize:move') return\n      emit('click-outside', createModalEvent({ type: 'click-outside' }))\n      props.clickToClose && emit('update:modelValue', false)\n    }\n    function onEsc() {\n      if (visible.value && props.escToClose) {\n        emit('update:modelValue', false)\n      }\n    }\n    function createModalEvent(eventProps = {}) {\n      return {\n        ref: getModalInfo(),\n        ...eventProps\n      }\n    }\n    function emitEvent(eventType, value) {\n      let stopEvent = false\n      const event = createModalEvent({\n        type: eventType,\n        stop() {\n          stopEvent = true\n        }\n      })\n      emit(eventType, event)\n      if (stopEvent) {\n        _stopEvent.value = true\n        nextTick(() => {\n          emit('update:modelValue', value)\n        })\n        return true\n      }\n      return false\n    }\n    function emitState(e, state, action) {\n      _state.value = `${state}:${action}`\n      emit(_state.value, e)\n    }\n    function toggle(show, _params) {\n      return new Promise((resolve, reject) => {\n        resolveToggle = res => {\n          resolve(res)\n          resolveToggle = noop\n        }\n        rejectToggle = err => {\n          reject(err)\n          rejectToggle = noop\n        }\n        const value = typeof show === 'boolean' ? show : !props.modelValue\n        if (value && arguments.length === 2) {\n          params.value = _params\n        }\n        emit('update:modelValue', value)\n      })\n    }\n    function pointerDown(e) {\n      e.stopPropagation()\n      const STATE_RESIZE = 'resize'\n      const STATE_DRAG = 'drag'\n      const direction = e.target.getAttribute('direction')\n      let state\n      if (direction) {\n        state = STATE_RESIZE\n      } else if (validDragElement(e, vfmContent.value, props.dragSelector)) {\n        state = STATE_DRAG\n      } else {\n        return\n      }\n      emitState(e, state, 'start')\n      const down = getPosition(e)\n      const rectContainer = vfmContainer.value.getBoundingClientRect()\n      const rectContent = vfmContent.value.getBoundingClientRect()\n      const isAbsolute = window.getComputedStyle(vfmContent.value).position === 'absolute'\n      const position = {\n        top: trimPx(dragResizeStyle.value.top),\n        left: trimPx(dragResizeStyle.value.left)\n      }\n      const limit = (() => {\n        if (props.fitParent) {\n          const limit = {\n            absolute() {\n              return {\n                minTop: 0,\n                minLeft: 0,\n                maxTop: rectContainer.height - rectContent.height,\n                maxLeft: rectContainer.width - rectContent.width\n              }\n            },\n            relative() {\n              return {\n                minTop: position.top + rectContainer.top - rectContent.top,\n                minLeft: position.left + rectContainer.left - rectContent.left,\n                maxTop: position.top + rectContainer.bottom - rectContent.bottom,\n                maxLeft: position.left + rectContainer.right - rectContent.right\n              }\n            }\n          }\n          return isAbsolute ? limit.absolute() : limit.relative()\n        } else {\n          return {}\n        }\n      })()\n      const resetBodyCursor = state === STATE_RESIZE && setStyle(document.body, 'cursor', resizeCursor[direction])\n\n      const moving = e => {\n        // onPointerMove\n        e.stopPropagation()\n        emitState(e, state, 'move')\n        const move = getPosition(e)\n        let offset = {\n          x: move.x - down.x,\n          y: move.y - down.y\n        }\n        if (state === STATE_RESIZE) {\n          offset = getResizeOffset(direction, offset, rectContainer, rectContent, isAbsolute)\n        }\n\n        let top\n        let left\n        if (isAbsolute) {\n          top = rectContent.top - rectContainer.top + offset.y\n          left = rectContent.left - rectContainer.left + offset.x\n        } else {\n          top = position.top + offset.y\n          left = position.left + offset.x\n        }\n        if (state === STATE_DRAG && props.fitParent) {\n          top = clamp(limit.minTop, top, limit.maxTop)\n          left = clamp(limit.minLeft, left, limit.maxLeft)\n        }\n        const style = {\n          position: 'relative',\n          top: top + 'px',\n          left: left + 'px',\n          margin: 'unset',\n          touchAction: 'none',\n          ...(isAbsolute && {\n            position: 'absolute',\n            transform: 'unset',\n            width: rectContent.width + 'px',\n            height: rectContent.height + 'px'\n          }),\n          ...(offset.width && { width: offset.width + 'px' }),\n          ...(offset.height && { height: offset.height + 'px' })\n        }\n\n        dragResizeStyle.value = {\n          ...dragResizeStyle.value,\n          ...style\n        }\n      }\n      const end = e => {\n        // onPointerUp\n        e.stopPropagation()\n        if (state === STATE_RESIZE) {\n          resetBodyCursor && resetBodyCursor()\n        }\n        // Excute onMouseupContainer before trigger emitState\n        setTimeout(() => {\n          emitState(e, state, 'end')\n        })\n        removeListener('move', document, moving)\n        removeListener('up', document, end)\n      }\n      addListener('move', document, moving)\n      addListener('up', document, end)\n    }\n    function addDragDown() {\n      addListener('down', vfmContent.value, pointerDown)\n      dragResizeStyle.value.touchAction = 'none'\n    }\n    function removeDragDown() {\n      removeListener('down', vfmContent.value, pointerDown)\n    }\n    function addResizeDown() {\n      visibility.resize = true\n      nextTick(() => {\n        addListener('down', vfmResize.value, pointerDown)\n      })\n    }\n    function removeResizeDown() {\n      removeListener('down', vfmResize.value, pointerDown)\n      visibility.resize = false\n    }\n    function getResizeOffset(direction, offset, rectContainer, rectContent, isAbsolute) {\n      const setOffset = dir => {\n        let offsetAxis = offset[dir.axis]\n        offsetAxis = props.fitParent ? clamp(dir.min, offsetAxis, dir.max) : offsetAxis\n        let edge = clamp(dir.minEdge, dir.getEdge(offsetAxis), dir.maxEdge)\n        offsetAxis = dir.getOffsetAxis(edge, isAbsolute)\n        return {\n          [dir.edgeName]: edge,\n          [dir.axis]: offsetAxis\n        }\n      }\n\n      const getDirectionInfo = (position, edgeName, axis, isPositive) => {\n        const rectContentEdge = rectContent[edgeName]\n        const positionOffset = rectContainer[position] - rectContent[position]\n        const EdgeName = capitalize(edgeName)\n        return {\n          axis,\n          edgeName,\n          min: isPositive ? positionOffset : -rectContentEdge,\n          max: isPositive ? rectContentEdge : positionOffset,\n          minEdge: props[`min${EdgeName}`],\n          maxEdge: props[`max${EdgeName}`],\n          getEdge: offsetAxis => rectContent[edgeName] - offsetAxis * (isPositive ? 1 : -1),\n          getOffsetAxis: (edge, isAbsolute) => {\n            const offsetAxis = rectContent[edgeName] - edge\n            if (isAbsolute) {\n              return isPositive ? offsetAxis : 0\n            } else {\n              return ((isPositive ? 1 : -1) * offsetAxis) / 2\n            }\n          }\n        }\n      }\n\n      const directions = {\n        t: ['top', 'height', 'y', true],\n        b: ['bottom', 'height', 'y', false],\n        l: ['left', 'width', 'x', true],\n        r: ['right', 'width', 'x', false]\n      }\n\n      let _offset = { x: 0, y: 0 }\n      direction.split('').forEach(dir => {\n        const directionInfo = getDirectionInfo(...directions[dir])\n        _offset = {\n          ..._offset,\n          ...setOffset(directionInfo)\n        }\n      })\n      return _offset\n    }\n    return {\n      root,\n      vfmContainer,\n      vfmContent,\n      vfmResize,\n      vfmOverlayTransition,\n      vfmTransition,\n      computedOverlayTransition,\n      computedTransition,\n      overlayListeners,\n      modalListeners,\n      visible,\n      visibility,\n      params,\n      calculateZIndex,\n      bindStyle,\n      bindContentStyle,\n      onMousedown,\n      onMouseupContainer,\n      onEsc\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\n.vfm--fixed {\n  position: fixed;\n}\n.vfm--absolute {\n  position: absolute;\n}\n.vfm--inset {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.vfm--overlay {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.vfm--prevent-none {\n  pointer-events: none;\n}\n.vfm--prevent-auto {\n  pointer-events: auto;\n}\n.vfm--outline-none:focus {\n  outline: none;\n}\n.vfm-enter-active,\n.vfm-leave-active {\n  transition: opacity 0.2s;\n}\n.vfm-enter-from,\n.vfm-leave-to {\n  opacity: 0;\n}\n\n.vfm--touch-none {\n  touch-action: none;\n}\n.vfm--select-none {\n  user-select: none;\n}\n\n.vfm--resize-tr,\n.vfm--resize-br,\n.vfm--resize-bl,\n.vfm--resize-tl {\n  width: 12px;\n  height: 12px;\n  z-index: 10;\n}\n\n.vfm--resize-t {\n  top: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-tr {\n  top: -6px;\n  right: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-r {\n  top: 0;\n  right: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-br {\n  bottom: -6px;\n  right: -6px;\n  cursor: nwse-resize;\n}\n.vfm--resize-b {\n  bottom: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-bl {\n  bottom: -6px;\n  left: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-l {\n  top: 0;\n  left: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-tl {\n  top: -6px;\n  left: -6px;\n  cursor: nwse-resize;\n}\n</style>\n","<template>\n  <div\n    v-if=\"displayDirective !== 'if' || visible\"\n    v-show=\"displayDirective !== 'show' || visible\"\n    ref=\"root\"\n    :style=\"bindStyle\"\n    class=\"vfm vfm--inset\"\n    :class=\"[attach === false ? 'vfm--fixed' : 'vfm--absolute', { 'vfm--prevent-none': nonModal }]\"\n    @keydown.esc=\"onEsc\"\n  >\n    <transition v-bind=\"computedOverlayTransition\" v-on=\"overlayListeners\">\n      <div\n        v-if=\"!hideOverlay && visibility.overlay\"\n        class=\"vfm__overlay vfm--overlay vfm--absolute vfm--inset\"\n        :class=\"overlayClass\"\n        :style=\"overlayStyle\"\n      ></div>\n    </transition>\n    <transition v-bind=\"computedTransition\" v-on=\"modalListeners\">\n      <div\n        v-show=\"visibility.modal\"\n        ref=\"vfmContainer\"\n        class=\"vfm__container vfm--absolute vfm--inset vfm--outline-none\"\n        :class=\"classes\"\n        :style=\"styles\"\n        :aria-expanded=\"visibility.modal.toString()\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        tabindex=\"-1\"\n        @mouseup.self=\"onMouseupContainer\"\n        @mousedown.self=\"onMousedown\"\n      >\n        <div\n          ref=\"vfmContent\"\n          class=\"vfm__content\"\n          :class=\"[contentClass, { 'vfm--prevent-auto': nonModal }]\"\n          :style=\"bindContentStyle\"\n          @mousedown=\"onMousedown(null)\"\n        >\n          <slot :params=\"params\" :close=\"() => $emit('update:modelValue', false)\" />\n          <div\n            v-if=\"visibility.resize && visibility.modal\"\n            ref=\"vfmResize\"\n            class=\"vfm__resize vfm--absolute vfm--inset vfm--prevent-none vfm--select-none vfm--touch-none\"\n          >\n            <div\n              v-for=\"direction in resizeDirections\"\n              :key=\"direction\"\n              :direction=\"direction\"\n              :class=\"`vfm--resize-${direction}`\"\n              class=\"vfm--absolute vfm--prevent-auto\"\n            ></div>\n          </div>\n        </div>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\n/* eslint-disable vue/no-mutating-props */\nimport { ref, reactive, onMounted, onBeforeUnmount, computed, nextTick, watch } from 'vue'\nimport { useFocusTrap } from './utils/focusTrap.js'\nimport {\n  setStyle,\n  getPosition,\n  capitalize,\n  clamp,\n  trimPx,\n  validDragElement,\n  addListener,\n  removeListener\n} from './utils/dragResize.js'\nimport { disableBodyScroll, enableBodyScroll } from './utils/bodyScrollLock'\n\nconst noop = () => {}\n\nconst TransitionState = {\n  Enter: 'enter',\n  Entering: 'entering',\n  Leave: 'leave',\n  Leaving: 'leavng'\n}\n\nconst resizeCursor = {\n  t: 'ns-resize',\n  tr: 'nesw-resize',\n  r: 'ew-resize',\n  br: 'nwse-resize',\n  b: 'ns-resize',\n  bl: 'nesw-resize',\n  l: 'ew-resize',\n  tl: 'nwse-resize'\n}\n\nexport default {\n  props: {\n    name: { type: String, default: null },\n    modelValue: { type: Boolean, default: false },\n    displayDirective: {\n      type: String,\n      default: 'show',\n      validator(val) {\n        return ['if', 'show'].indexOf(val) !== -1\n      }\n    },\n    classes: { type: [String, Object, Array], default: '' },\n    overlayClass: { type: [String, Object, Array], default: '' },\n    contentClass: { type: [String, Object, Array], default: '' },\n    styles: { type: [Object, Array], default: () => ({}) },\n    overlayStyle: { type: [Object, Array], default: () => ({}) },\n    contentStyle: { type: [Object, Array], default: () => ({}) },\n    lockScroll: { type: Boolean, default: true },\n    hideOverlay: { type: Boolean, default: false },\n    clickToClose: { type: Boolean, default: true },\n    escToClose: { type: Boolean, default: false },\n    nonModal: { type: Boolean, default: false },\n    attach: {\n      type: null,\n      default: false,\n      validator(val) {\n        const type = typeof val\n\n        if (type === 'boolean' || type === 'string') return true\n\n        return val.nodeType === Node.ELEMENT_NODE\n      }\n    },\n    transition: { type: [String, Object], default: 'vfm' },\n    overlayTransition: { type: [String, Object], default: 'vfm' },\n    zIndexAuto: { type: Boolean, default: true },\n    zIndexBase: { type: [String, Number], default: 1000 },\n    zIndex: { type: [Boolean, String, Number], default: false },\n    focusRetain: { type: Boolean, default: true },\n    focusTrap: { type: Boolean, default: false },\n    fitParent: { type: Boolean, default: true },\n    drag: { type: Boolean, default: false },\n    dragSelector: { type: String, default: '' },\n    keepChangedStyle: { type: Boolean, default: false },\n    resize: {\n      type: Boolean,\n      default: false\n    },\n    resizeDirections: {\n      type: Array,\n      default: () => ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'],\n      validator: val =>\n        ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'].filter(value => val.indexOf(value) !== -1).length === val.length\n    },\n    minWidth: { type: Number, default: 0 },\n    minHeight: { type: Number, default: 0 },\n    maxWidth: { type: Number, default: Infinity },\n    maxHeight: { type: Number, default: Infinity }\n  },\n  emits: [\n    'update:modelValue',\n    'click-outside',\n    'before-open',\n    'opened',\n    '_before-close',\n    'before-close',\n    'closed',\n    '_before-open',\n    '_opened',\n    '_closed',\n    'drag:start',\n    'drag:move',\n    'drag:end',\n    'resize:start',\n    'resize:move',\n    'resize:end'\n  ],\n  setup(props, { emit }) {\n    const uid = Symbol('vfm')\n    const root = ref(null)\n    const vfmContainer = ref(null)\n    const vfmContent = ref(null)\n    const vfmResize = ref(null)\n    const vfmOverlayTransition = ref(null)\n    const vfmTransition = ref(null)\n\n    const modalStackIndex = ref(null)\n    const $focusTrap = useFocusTrap()\n\n    const visible = ref(false)\n    const visibility = reactive({\n      modal: false,\n      overlay: false,\n      resize: false\n    })\n    const overlayTransitionState = ref(null)\n    const overlayListeners = {\n      beforeEnter() {\n        overlayTransitionState.value = TransitionState.Entering\n      },\n      afterEnter() {\n        overlayTransitionState.value = TransitionState.Enter\n      },\n      beforeLeave() {\n        overlayTransitionState.value = TransitionState.Leaving\n      },\n      afterLeave() {\n        overlayTransitionState.value = TransitionState.Leave\n      }\n    }\n\n    const modalTransitionState = ref(null)\n    const modalListeners = {\n      beforeEnter() {\n        modalTransitionState.value = TransitionState.Entering\n      },\n      afterEnter() {\n        modalTransitionState.value = TransitionState.Enter\n      },\n      beforeLeave() {\n        modalTransitionState.value = TransitionState.Leaving\n      },\n      afterLeave() {\n        modalTransitionState.value = TransitionState.Leave\n      }\n    }\n\n    const _stopEvent = ref(false)\n    const params = ref({})\n    const dragResizeStyle = ref({})\n    const _state = ref(null)\n    const lastMousedownEl = ref(null)\n\n    let resolveToggle = noop\n    let rejectToggle = noop\n\n    const computedOverlayTransition = computed(() => {\n      if (typeof props.overlayTransition === 'string') return { name: props.overlayTransition }\n      return { ...props.overlayTransition }\n    })\n\n    const computedTransition = computed(() => {\n      if (typeof props.transition === 'string') return { name: props.transition }\n      return { ...props.transition }\n    })\n\n    const isComponentReadyToBeDestroyed = computed(() => {\n      return (\n        (props.hideOverlay || overlayTransitionState.value === TransitionState.Leave) &&\n        modalTransitionState.value === TransitionState.Leave\n      )\n    })\n\n    const calculateZIndex = computed(() => {\n      if (props.zIndex === false) {\n        if (props.zIndexAuto) {\n          return +props.zIndexBase + 2 * (modalStackIndex.value || 0)\n        } else {\n          return false\n        }\n      } else {\n        return props.zIndex\n      }\n    })\n\n    const bindStyle = computed(() => {\n      return {\n        ...(calculateZIndex.value !== false && {\n          zIndex: calculateZIndex.value\n        })\n      }\n    })\n\n    const bindContentStyle = computed(() => {\n      let style = [dragResizeStyle.value]\n      Array.isArray(props.contentStyle) ? style.push(...props.contentStyle) : style.push(props.contentStyle)\n      return style\n    })\n\n    watch(\n      () => props.modelValue,\n      value => {\n        if (_stopEvent.value) {\n          _stopEvent.value = false\n          return\n        }\n        mounted()\n        if (!value) {\n          emit('_before-close', createModalEvent({ type: '_before-close' }))\n          if (emitEvent('before-close', true)) {\n            rejectToggle('hide')\n            return\n          }\n          close()\n        }\n      }\n    )\n    watch(() => props.lockScroll, handleLockScroll)\n    watch(\n      () => props.hideOverlay,\n      value => {\n        if (props.modelValue && !value) {\n          visibility.overlay = true\n        }\n      }\n    )\n    watch(() => props.attach, mounted)\n    watch(\n      isComponentReadyToBeDestroyed,\n      val => {\n        if (val) {\n          visible.value = false\n          vfmContainer.value.style.display = 'none'\n        }\n      },\n      {\n        flush: 'post'\n      }\n    )\n    watch(\n      () => props.drag,\n      val => {\n        if (visible.value) {\n          val ? addDragDown() : removeDragDown()\n        }\n      }\n    )\n    watch(\n      () => props.resize,\n      val => {\n        if (visible.value) {\n          val ? addResizeDown() : removeResizeDown()\n        }\n      }\n    )\n    watch(\n      () => props.keepChangedStyle,\n      val => {\n        if (!val) {\n          dragResizeStyle.value = {}\n        }\n      }\n    )\n\n    /**\n     * Side effect about modal transtion state update\n     */\n    watch(modalTransitionState, state => {\n      switch (state) {\n        case TransitionState.Enter:\n          if (props.focusRetain || props.focusTrap) {\n            vfmContainer.value.focus()\n          }\n          props.focusTrap && $focusTrap.enable(vfmContainer.value)\n          props.drag && addDragDown()\n          props.resize && addResizeDown()\n\n          emit('_opened')\n          emit('opened', createModalEvent({ type: 'opened' }))\n          resolveToggle('show')\n          break\n        case TransitionState.Leaving:\n          if ($focusTrap.enabled()) {\n            $focusTrap.disable()\n          }\n          break\n        case TransitionState.Leave:\n          modalStackIndex.value = null\n          props.lockScroll && enableBodyScroll(vfmContainer.value)\n          if (!props.keepChangedStyle) {\n            dragResizeStyle.value = {}\n          }\n\n          let stopEvent = false\n          const event = createModalEvent({\n            type: 'closed',\n            stop() {\n              stopEvent = true\n            }\n          })\n          emit('_closed')\n          emit('closed', event)\n          resolveToggle('hide')\n          if (stopEvent) return\n          params.value = {}\n          break\n      }\n    })\n\n    props.api.modals.push(getModalInfo())\n\n    onMounted(() => {\n      mounted()\n    })\n    onBeforeUnmount(() => {\n      close()\n      props.lockScroll && vfmContainer.value && enableBodyScroll(vfmContainer.value)\n      root?.value?.remove()\n\n      let index = props.api.modals.findIndex(vm => vm.uid === uid)\n\n      props.api.modals.splice(index, 1)\n    })\n    function getModalInfo() {\n      return {\n        uid,\n        props,\n        emit,\n        vfmContainer,\n        vfmContent,\n        vfmResize,\n        vfmOverlayTransition,\n        vfmTransition,\n        getAttachElement,\n        modalStackIndex,\n        visibility,\n        handleLockScroll,\n        $focusTrap,\n        toggle,\n        params\n      }\n    }\n    function mounted() {\n      if (props.modelValue) {\n        emit('_before-open', createModalEvent({ type: '_before-open' }))\n        if (emitEvent('before-open', false)) {\n          rejectToggle('show')\n          return\n        }\n\n        let target = getAttachElement()\n        if (target || props.attach === false) {\n          props.attach !== false && target.appendChild(root.value)\n\n          let index = props.api.openedModals.findIndex(vm => vm.uid === uid)\n\n          if (index !== -1) {\n            // if this is already exist in modalStack, delete it\n            props.api.openedModals.splice(index, 1)\n          }\n          props.api.openedModals.push(getModalInfo())\n\n          modalStackIndex.value = props.api.openedModals.length - 1\n\n          handleLockScroll()\n\n          props.api.openedModals\n            .filter(vm => vm.uid !== uid)\n            .forEach((vm, index) => {\n              if (vm.getAttachElement() === target) {\n                // if vm and this have the same attach element\n                vm.modalStackIndex.value = index\n                vm.visibility.overlay = false\n              }\n            })\n\n          visible.value = true\n          startTransitionEnter()\n        } else if (target !== false) {\n          console.warn('Unable to locate target '.concat(props.attach))\n        }\n      }\n    }\n    function close() {\n      let index = props.api.openedModals.findIndex(vm => vm.uid === uid)\n      if (index !== -1) {\n        // remove this in modalStack\n        props.api.openedModals.splice(index, 1)\n      }\n      if (props.api.openedModals.length > 0) {\n        // If there are still nested modals opened\n        const $_vm = props.api.openedModals[props.api.openedModals.length - 1]\n\n        if ($_vm.props.focusTrap) {\n          nextTick(() => {\n            $_vm.$focusTrap.enable($_vm.vfmContainer.value)\n            $_vm.$focusTrap.firstElement.focus()\n          })\n        }\n\n        if ($_vm.props.focusRetain || $_vm.props.focusTrap) {\n          $_vm.vfmContainer.value.focus()\n        }\n        !$_vm.props.hideOverlay && ($_vm.visibility.overlay = true)\n      }\n      props.drag && removeDragDown()\n      props.resize && removeResizeDown()\n      _state.value = null\n\n      startTransitionLeave()\n    }\n    function handleLockScroll() {\n      if (props.modelValue) {\n        nextTick(() => {\n          if (props.lockScroll) {\n            disableBodyScroll(vfmContainer.value, {\n              reserveScrollBarGap: true\n            })\n          } else {\n            enableBodyScroll(vfmContainer.value)\n          }\n        })\n      }\n    }\n    function getAttachElement() {\n      let target\n      if (props.attach === false) {\n        target = false\n      } else if (typeof props.attach === 'string') {\n        // CSS selector\n        if (window) {\n          target = window.document.querySelector(props.attach)\n        } else {\n          target = false\n        }\n      } else {\n        // DOM Element\n        target = props.attach\n      }\n      return target\n    }\n    function startTransitionEnter() {\n      visibility.overlay = true\n      visibility.modal = true\n    }\n    function startTransitionLeave() {\n      visibility.overlay = false\n      visibility.modal = false\n    }\n\n    function onMousedown(e) {\n      lastMousedownEl.value = e?.target\n    }\n    function onMouseupContainer() {\n      // skip when the lastMousedownEl didn't equal vfmContainer\n      if (lastMousedownEl.value !== vfmContainer.value) return\n      // skip when state equal 'resize:move'\n      if (_state.value === 'resize:move') return\n      emit('click-outside', createModalEvent({ type: 'click-outside' }))\n      props.clickToClose && emit('update:modelValue', false)\n    }\n    function onEsc() {\n      if (visible.value && props.escToClose) {\n        emit('update:modelValue', false)\n      }\n    }\n    function createModalEvent(eventProps = {}) {\n      return {\n        ref: getModalInfo(),\n        ...eventProps\n      }\n    }\n    function emitEvent(eventType, value) {\n      let stopEvent = false\n      const event = createModalEvent({\n        type: eventType,\n        stop() {\n          stopEvent = true\n        }\n      })\n      emit(eventType, event)\n      if (stopEvent) {\n        _stopEvent.value = true\n        nextTick(() => {\n          emit('update:modelValue', value)\n        })\n        return true\n      }\n      return false\n    }\n    function emitState(e, state, action) {\n      _state.value = `${state}:${action}`\n      emit(_state.value, e)\n    }\n    function toggle(show, _params) {\n      return new Promise((resolve, reject) => {\n        resolveToggle = res => {\n          resolve(res)\n          resolveToggle = noop\n        }\n        rejectToggle = err => {\n          reject(err)\n          rejectToggle = noop\n        }\n        const value = typeof show === 'boolean' ? show : !props.modelValue\n        if (value && arguments.length === 2) {\n          params.value = _params\n        }\n        emit('update:modelValue', value)\n      })\n    }\n    function pointerDown(e) {\n      e.stopPropagation()\n      const STATE_RESIZE = 'resize'\n      const STATE_DRAG = 'drag'\n      const direction = e.target.getAttribute('direction')\n      let state\n      if (direction) {\n        state = STATE_RESIZE\n      } else if (validDragElement(e, vfmContent.value, props.dragSelector)) {\n        state = STATE_DRAG\n      } else {\n        return\n      }\n      emitState(e, state, 'start')\n      const down = getPosition(e)\n      const rectContainer = vfmContainer.value.getBoundingClientRect()\n      const rectContent = vfmContent.value.getBoundingClientRect()\n      const isAbsolute = window.getComputedStyle(vfmContent.value).position === 'absolute'\n      const position = {\n        top: trimPx(dragResizeStyle.value.top),\n        left: trimPx(dragResizeStyle.value.left)\n      }\n      const limit = (() => {\n        if (props.fitParent) {\n          const limit = {\n            absolute() {\n              return {\n                minTop: 0,\n                minLeft: 0,\n                maxTop: rectContainer.height - rectContent.height,\n                maxLeft: rectContainer.width - rectContent.width\n              }\n            },\n            relative() {\n              return {\n                minTop: position.top + rectContainer.top - rectContent.top,\n                minLeft: position.left + rectContainer.left - rectContent.left,\n                maxTop: position.top + rectContainer.bottom - rectContent.bottom,\n                maxLeft: position.left + rectContainer.right - rectContent.right\n              }\n            }\n          }\n          return isAbsolute ? limit.absolute() : limit.relative()\n        } else {\n          return {}\n        }\n      })()\n      const resetBodyCursor = state === STATE_RESIZE && setStyle(document.body, 'cursor', resizeCursor[direction])\n\n      const moving = e => {\n        // onPointerMove\n        e.stopPropagation()\n        emitState(e, state, 'move')\n        const move = getPosition(e)\n        let offset = {\n          x: move.x - down.x,\n          y: move.y - down.y\n        }\n        if (state === STATE_RESIZE) {\n          offset = getResizeOffset(direction, offset, rectContainer, rectContent, isAbsolute)\n        }\n\n        let top\n        let left\n        if (isAbsolute) {\n          top = rectContent.top - rectContainer.top + offset.y\n          left = rectContent.left - rectContainer.left + offset.x\n        } else {\n          top = position.top + offset.y\n          left = position.left + offset.x\n        }\n        if (state === STATE_DRAG && props.fitParent) {\n          top = clamp(limit.minTop, top, limit.maxTop)\n          left = clamp(limit.minLeft, left, limit.maxLeft)\n        }\n        const style = {\n          position: 'relative',\n          top: top + 'px',\n          left: left + 'px',\n          margin: 'unset',\n          touchAction: 'none',\n          ...(isAbsolute && {\n            position: 'absolute',\n            transform: 'unset',\n            width: rectContent.width + 'px',\n            height: rectContent.height + 'px'\n          }),\n          ...(offset.width && { width: offset.width + 'px' }),\n          ...(offset.height && { height: offset.height + 'px' })\n        }\n\n        dragResizeStyle.value = {\n          ...dragResizeStyle.value,\n          ...style\n        }\n      }\n      const end = e => {\n        // onPointerUp\n        e.stopPropagation()\n        if (state === STATE_RESIZE) {\n          resetBodyCursor && resetBodyCursor()\n        }\n        // Excute onMouseupContainer before trigger emitState\n        setTimeout(() => {\n          emitState(e, state, 'end')\n        })\n        removeListener('move', document, moving)\n        removeListener('up', document, end)\n      }\n      addListener('move', document, moving)\n      addListener('up', document, end)\n    }\n    function addDragDown() {\n      addListener('down', vfmContent.value, pointerDown)\n      dragResizeStyle.value.touchAction = 'none'\n    }\n    function removeDragDown() {\n      removeListener('down', vfmContent.value, pointerDown)\n    }\n    function addResizeDown() {\n      visibility.resize = true\n      nextTick(() => {\n        addListener('down', vfmResize.value, pointerDown)\n      })\n    }\n    function removeResizeDown() {\n      removeListener('down', vfmResize.value, pointerDown)\n      visibility.resize = false\n    }\n    function getResizeOffset(direction, offset, rectContainer, rectContent, isAbsolute) {\n      const setOffset = dir => {\n        let offsetAxis = offset[dir.axis]\n        offsetAxis = props.fitParent ? clamp(dir.min, offsetAxis, dir.max) : offsetAxis\n        let edge = clamp(dir.minEdge, dir.getEdge(offsetAxis), dir.maxEdge)\n        offsetAxis = dir.getOffsetAxis(edge, isAbsolute)\n        return {\n          [dir.edgeName]: edge,\n          [dir.axis]: offsetAxis\n        }\n      }\n\n      const getDirectionInfo = (position, edgeName, axis, isPositive) => {\n        const rectContentEdge = rectContent[edgeName]\n        const positionOffset = rectContainer[position] - rectContent[position]\n        const EdgeName = capitalize(edgeName)\n        return {\n          axis,\n          edgeName,\n          min: isPositive ? positionOffset : -rectContentEdge,\n          max: isPositive ? rectContentEdge : positionOffset,\n          minEdge: props[`min${EdgeName}`],\n          maxEdge: props[`max${EdgeName}`],\n          getEdge: offsetAxis => rectContent[edgeName] - offsetAxis * (isPositive ? 1 : -1),\n          getOffsetAxis: (edge, isAbsolute) => {\n            const offsetAxis = rectContent[edgeName] - edge\n            if (isAbsolute) {\n              return isPositive ? offsetAxis : 0\n            } else {\n              return ((isPositive ? 1 : -1) * offsetAxis) / 2\n            }\n          }\n        }\n      }\n\n      const directions = {\n        t: ['top', 'height', 'y', true],\n        b: ['bottom', 'height', 'y', false],\n        l: ['left', 'width', 'x', true],\n        r: ['right', 'width', 'x', false]\n      }\n\n      let _offset = { x: 0, y: 0 }\n      direction.split('').forEach(dir => {\n        const directionInfo = getDirectionInfo(...directions[dir])\n        _offset = {\n          ..._offset,\n          ...setOffset(directionInfo)\n        }\n      })\n      return _offset\n    }\n    return {\n      root,\n      vfmContainer,\n      vfmContent,\n      vfmResize,\n      vfmOverlayTransition,\n      vfmTransition,\n      computedOverlayTransition,\n      computedTransition,\n      overlayListeners,\n      modalListeners,\n      visible,\n      visibility,\n      params,\n      calculateZIndex,\n      bindStyle,\n      bindContentStyle,\n      onMousedown,\n      onMouseupContainer,\n      onEsc\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\n.vfm--fixed {\n  position: fixed;\n}\n.vfm--absolute {\n  position: absolute;\n}\n.vfm--inset {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.vfm--overlay {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.vfm--prevent-none {\n  pointer-events: none;\n}\n.vfm--prevent-auto {\n  pointer-events: auto;\n}\n.vfm--outline-none:focus {\n  outline: none;\n}\n.vfm-enter-active,\n.vfm-leave-active {\n  transition: opacity 0.2s;\n}\n.vfm-enter-from,\n.vfm-leave-to {\n  opacity: 0;\n}\n\n.vfm--touch-none {\n  touch-action: none;\n}\n.vfm--select-none {\n  user-select: none;\n}\n\n.vfm--resize-tr,\n.vfm--resize-br,\n.vfm--resize-bl,\n.vfm--resize-tl {\n  width: 12px;\n  height: 12px;\n  z-index: 10;\n}\n\n.vfm--resize-t {\n  top: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-tr {\n  top: -6px;\n  right: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-r {\n  top: 0;\n  right: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-br {\n  bottom: -6px;\n  right: -6px;\n  cursor: nwse-resize;\n}\n.vfm--resize-b {\n  bottom: -6px;\n  left: 0;\n  width: 100%;\n  height: 12px;\n  cursor: ns-resize;\n}\n.vfm--resize-bl {\n  bottom: -6px;\n  left: -6px;\n  cursor: nesw-resize;\n}\n.vfm--resize-l {\n  top: 0;\n  left: -6px;\n  width: 12px;\n  height: 100%;\n  cursor: ew-resize;\n}\n.vfm--resize-tl {\n  top: -6px;\n  left: -6px;\n  cursor: nwse-resize;\n}\n</style>\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","<template>\n  <div class=\"modals-container\">\n    <component\n      :is=\"modal.component\"\n      v-for=\"(modal, index) in api.dynamicModals\"\n      :key=\"modal.id\"\n      v-bind=\"modal.bind\"\n      v-model=\"modal.value\"\n      v-on=\"modal.on\"\n      @_beforeClose=\"beforeClose(modal)\"\n      @_closed=\"closed(index, modal)\"\n      @_beforeOpen=\"e => beforeOpen(e, modal, index)\"\n      @_opened=\"modal.opened\"\n    >\n      <template v-for=\"(slot, key) in modal.slots\" #[key] :key=\"key\">\n        <!-- eslint-disable vue/no-v-html -->\n        <div v-if=\"isString(slot)\" v-html=\"slot\"></div>\n        <component :is=\"slot.component\" v-else v-bind=\"slot.bind\" v-on=\"slot.on || {}\" />\n      </template>\n    </component>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    slice(index) {\n      this.api.dynamicModals.splice(index, 1)\n    },\n    closed(index, modal) {\n      this.slice(index)\n      modal.closed && modal.closed()\n    },\n    beforeClose(modal) {\n      if (modal.value) {\n        modal?.rejectClose('hide')\n      }\n    },\n    async beforeOpen(e, modal, index) {\n      e.ref.params.value = modal.params\n      await this.$nextTick()\n      await this.$nextTick()\n      if (!modal.value) {\n        this.slice(index)\n        modal?.reject('show')\n      }\n    },\n    isString(val) {\n      return typeof val === 'string'\n    }\n  }\n}\n</script>\n","<template>\n  <div class=\"modals-container\">\n    <component\n      :is=\"modal.component\"\n      v-for=\"(modal, index) in api.dynamicModals\"\n      :key=\"modal.id\"\n      v-bind=\"modal.bind\"\n      v-model=\"modal.value\"\n      v-on=\"modal.on\"\n      @_beforeClose=\"beforeClose(modal)\"\n      @_closed=\"closed(index, modal)\"\n      @_beforeOpen=\"e => beforeOpen(e, modal, index)\"\n      @_opened=\"modal.opened\"\n    >\n      <template v-for=\"(slot, key) in modal.slots\" #[key] :key=\"key\">\n        <!-- eslint-disable vue/no-v-html -->\n        <div v-if=\"isString(slot)\" v-html=\"slot\"></div>\n        <component :is=\"slot.component\" v-else v-bind=\"slot.bind\" v-on=\"slot.on || {}\" />\n      </template>\n    </component>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    slice(index) {\n      this.api.dynamicModals.splice(index, 1)\n    },\n    closed(index, modal) {\n      this.slice(index)\n      modal.closed && modal.closed()\n    },\n    beforeClose(modal) {\n      if (modal.value) {\n        modal?.rejectClose('hide')\n      }\n    },\n    async beforeOpen(e, modal, index) {\n      e.ref.params.value = modal.params\n      await this.$nextTick()\n      await this.$nextTick()\n      if (!modal.value) {\n        this.slice(index)\n        modal?.reject('show')\n      }\n    },\n    isString(val) {\n      return typeof val === 'string'\n    }\n  }\n}\n</script>\n","import VueFinalModalComponent from './VueFinalModal.vue'\nimport ModalsContainerComponent from './ModalsContainer.vue'\nimport { markRaw, reactive, shallowReactive } from 'vue'\n\nexport class ModalInstance {\n  constructor() {\n    const bindApi = component => {\n      const _component = { ...component, props: { ...component.props } }\n      Object.assign(_component.props, {\n        api: { type: Object, default: () => this }\n      })\n      return markRaw(_component)\n    }\n\n    this.modals = []\n    this.openedModals = []\n    this.VueFinalModal = bindApi(VueFinalModalComponent)\n\n    this.dynamicModals = shallowReactive([])\n    this.ModalsContainer = bindApi(ModalsContainerComponent)\n  }\n\n  show(modal, ...args) {\n    switch (typeof modal) {\n      case 'string':\n        return this.toggle(modal, true, ...args)\n      case 'object': {\n        const { show } = this.useModal(modal, args[0])\n        return show()\n      }\n    }\n  }\n\n  hide(...names) {\n    return this.toggle(names, false)\n  }\n\n  hideAll() {\n    return this.hide(...this.openedModals.map(modal => modal.props.name))\n  }\n\n  toggle(name, ...args) {\n    const modals = Array.isArray(name) ? this.get(...name) : this.get(name)\n    return Promise.allSettled(modals.map(modal => modal.toggle(...args)))\n  }\n\n  get(...names) {\n    return this.modals.filter(modal => names.includes(modal.props.name))\n  }\n\n  existModal(options) {\n    return this.dynamicModals.indexOf(options) !== -1\n  }\n\n  useModal(_options, params = {}) {\n    let options = reactive({\n      value: false,\n      component: this.VueFinalModal,\n      id: Symbol('useModal'),\n      bind: {},\n      slots: {},\n      on: {},\n      params,\n      ..._options\n    })\n\n    const show = () => {\n      return this.existModal(options)\n        ? Promise.resolve('[Vue Final Modal] modal is already opened')\n        : new Promise((resolve, reject) => {\n            options.value = true\n            options.reject = reject\n            options.opened = () => {\n              resolve('show')\n            }\n            this.dynamicModals.push(options)\n          })\n    }\n\n    const hide = () => {\n      return this.existModal(options)\n        ? new Promise((resolve, reject) => {\n            options.value = false\n            options.rejectClose = reject\n            options.closed = () => {\n              resolve('hide')\n            }\n          })\n        : Promise.resolve('[Vue Final Modal] modal is already closed')\n    }\n\n    return { show, hide, options }\n  }\n}\n\n/**\n * @description Support create multiple modal instance\n */\nexport const createModalInstance = () => {\n  let modalInstance = new ModalInstance()\n  return {\n    $vfm: modalInstance,\n    VueFinalModal: modalInstance.VueFinalModal,\n    ModalsContainer: modalInstance.ModalsContainer,\n    useModal: modalInstance.useModal.bind(modalInstance)\n  }\n}\n\n/**\n * @description Create modal instance by default for directly support `import { $vfm, VueFinalModal, ModalsContainer, useModal } from 'vue-final-modal'`\n */\nconst modalInstance = createModalInstance()\n\nexport const { $vfm, VueFinalModal, ModalsContainer, useModal } = modalInstance\n"],"names":["queryFocusableElements","element","selector","querySelectorAll","isFocused","document","activeElement","FocusTrap","root","elements","onKeyDown","this","bind","length","event","key","keyCode","isTabPressed","shiftKey","lastElement","firstElement","focus","preventDefault","addEventListener","removeEventListener","instance","getPosition","e","targetTouches","x","clientX","y","clientY","clamp","min","num","max","Math","trimPx","distance","Number","replace","pointerType","down","pc","m","move","up","addListener","type","el","callback","passive","removeListener","hasPassiveEvents","window","passiveTestOptions","previousBodyOverflowSetting","previousBodyPaddingRight","isIosDevice","navigator","platform","test","maxTouchPoints","locks","documentListenerAdded","initialClientY","hasAnyScrollableEl","delta","path","push","classList","contains","parentElement","composedPath","forEach","nodeType","Node","ELEMENT_NODE","style","getComputedStyle","includes","overflowY","scrollHeight","clientHeight","hasScrollbar","scrollTop","shouldScroll","allowTouchMove","some","rawEvent","target","touches","disableBodyScroll","targetElement","options","lock","ontouchstart","ontouchmove","isTargetElementTotallyScrolled","stopPropagation","handleScroll","undefined","reserveScrollBarGap","scrollBarGap","innerWidth","documentElement","clientWidth","computedBodyPaddingRight","parseInt","body","getPropertyValue","paddingRight","overflow","setOverflowHidden","console","error","enableBodyScroll","filter","noop","TransitionState","resizeCursor","t","tr","r","br","b","bl","l","tl","props","name","String","modelValue","Boolean","displayDirective","validator","val","indexOf","classes","Object","Array","overlayClass","contentClass","styles","overlayStyle","contentStyle","lockScroll","hideOverlay","clickToClose","escToClose","nonModal","attach","transition","overlayTransition","zIndexAuto","zIndexBase","zIndex","focusRetain","focusTrap","fitParent","drag","dragSelector","keepChangedStyle","resize","resizeDirections","value","minWidth","minHeight","maxWidth","Infinity","maxHeight","emits","setup","emit","uid","Symbol","ref","vfmContainer","vfmContent","vfmResize","vfmOverlayTransition","vfmTransition","modalStackIndex","$focusTrap","visible","visibility","reactive","modal","overlay","overlayTransitionState","overlayListeners","beforeEnter","afterEnter","beforeLeave","afterLeave","modalTransitionState","modalListeners","_stopEvent","params","dragResizeStyle","_state","lastMousedownEl","resolveToggle","rejectToggle","computedOverlayTransition","computed","computedTransition","isComponentReadyToBeDestroyed","calculateZIndex","bindStyle","bindContentStyle","isArray","getModalInfo","getAttachElement","handleLockScroll","toggle","mounted","createModalEvent","emitEvent","appendChild","index","api","openedModals","findIndex","vm","splice","warn","concat","close","$_vm","nextTick","enable","removeDragDown","removeResizeDown","querySelector","eventProps","eventType","stopEvent","stop","emitState","state","action","show","_params","Promise","resolve","reject","res","err","arguments","pointerDown","STATE_RESIZE","STATE_DRAG","direction","getAttribute","validDragElement","cacheStyle","rectContainer","getBoundingClientRect","rectContent","isAbsolute","position","top","left","limit","absolute","minTop","minLeft","maxTop","height","maxLeft","width","relative","bottom","right","resetBodyCursor","moving","offset","setOffset","dir","offsetAxis","axis","edge","minEdge","getEdge","maxEdge","getOffsetAxis","edgeName","getDirectionInfo","isPositive","s","rectContentEdge","positionOffset","EdgeName","charAt","toUpperCase","slice","directions","_offset","split","directionInfo","getResizeOffset","margin","touchAction","transform","end","setTimeout","addDragDown","addResizeDown","watch","display","flush","enabled","disable","modals","onMounted","onBeforeUnmount","remove","onMousedown","onMouseupContainer","onEsc","css","insertAt","head","getElementsByTagName","createElement","firstChild","insertBefore","styleSheet","cssText","createTextNode","$props","$setup","_createElementBlock","onKeydown","_createVNode","_mergeProps","_toHandlers","_createElementVNode","toString","role","tabindex","onMouseup","_renderSlot","_ctx","_hoisted_2","methods","dynamicModals","closed","beforeClose","rejectClose","beforeOpen","_this","$nextTick","isString","_hoisted_1","_createBlock","component","id","on","on_beforeClose","$options","on_closed","on_beforeOpen","on_opened","opened","slots","slot","_createCommentVNode","innerHTML","ModalInstance","bindApi","_component","assign","markRaw","VueFinalModal","VueFinalModalComponent","shallowReactive","ModalsContainer","ModalsContainerComponent","args","useModal","names","hide","map","get","allSettled","_options","_this2","existModal","createModalInstance","modalInstance","$vfm"],"mappings":"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"}