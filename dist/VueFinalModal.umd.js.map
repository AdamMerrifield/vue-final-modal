{"version":3,"file":"VueFinalModal.umd.js","sources":["../node_modules/body-scroll-lock/lib/bodyScrollLock.esm.js","../lib/VueFinalModal.vue","../lib/index.js"],"sourcesContent":["function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// Older browsers don't support event options, feature detect it.\n\n// Adopted and modified solution from Bohdan Didukh (2017)\n// https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi\n\nvar hasPassiveEvents = false;\nif (typeof window !== 'undefined') {\n  var passiveTestOptions = {\n    get passive() {\n      hasPassiveEvents = true;\n      return undefined;\n    }\n  };\n  window.addEventListener('testPassive', null, passiveTestOptions);\n  window.removeEventListener('testPassive', null, passiveTestOptions);\n}\n\nvar isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);\n\n\nvar locks = [];\nvar documentListenerAdded = false;\nvar initialClientY = -1;\nvar previousBodyOverflowSetting = void 0;\nvar previousBodyPaddingRight = void 0;\n\n// returns true if `el` should be allowed to receive touchmove events.\nvar allowTouchMove = function allowTouchMove(el) {\n  return locks.some(function (lock) {\n    if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {\n      return true;\n    }\n\n    return false;\n  });\n};\n\nvar preventDefault = function preventDefault(rawEvent) {\n  var e = rawEvent || window.event;\n\n  // For the case whereby consumers adds a touchmove event listener to document.\n  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n  // the touchmove event on document will break.\n  if (allowTouchMove(e.target)) {\n    return true;\n  }\n\n  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n  if (e.touches.length > 1) return true;\n\n  if (e.preventDefault) e.preventDefault();\n\n  return false;\n};\n\nvar setOverflowHidden = function setOverflowHidden(options) {\n  // Setting overflow on body/documentElement synchronously in Desktop Safari slows down\n  // the responsiveness for some reason. Setting within a setTimeout fixes this.\n  setTimeout(function () {\n    // If previousBodyPaddingRight is already set, don't set it again.\n    if (previousBodyPaddingRight === undefined) {\n      var _reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;\n      var scrollBarGap = window.innerWidth - document.documentElement.clientWidth;\n\n      if (_reserveScrollBarGap && scrollBarGap > 0) {\n        previousBodyPaddingRight = document.body.style.paddingRight;\n        document.body.style.paddingRight = scrollBarGap + 'px';\n      }\n    }\n\n    // If previousBodyOverflowSetting is already set, don't set it again.\n    if (previousBodyOverflowSetting === undefined) {\n      previousBodyOverflowSetting = document.body.style.overflow;\n      document.body.style.overflow = 'hidden';\n    }\n  });\n};\n\nvar restoreOverflowSetting = function restoreOverflowSetting() {\n  // Setting overflow on body/documentElement synchronously in Desktop Safari slows down\n  // the responsiveness for some reason. Setting within a setTimeout fixes this.\n  setTimeout(function () {\n    if (previousBodyPaddingRight !== undefined) {\n      document.body.style.paddingRight = previousBodyPaddingRight;\n\n      // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n      // can be set again.\n      previousBodyPaddingRight = undefined;\n    }\n\n    if (previousBodyOverflowSetting !== undefined) {\n      document.body.style.overflow = previousBodyOverflowSetting;\n\n      // Restore previousBodyOverflowSetting to undefined\n      // so setOverflowHidden knows it can be set again.\n      previousBodyOverflowSetting = undefined;\n    }\n  });\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\nvar isTargetElementTotallyScrolled = function isTargetElementTotallyScrolled(targetElement) {\n  return targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;\n};\n\nvar handleScroll = function handleScroll(event, targetElement) {\n  var clientY = event.targetTouches[0].clientY - initialClientY;\n\n  if (allowTouchMove(event.target)) {\n    return false;\n  }\n\n  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n    // element is at the top of its scroll.\n    return preventDefault(event);\n  }\n\n  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n    // element is at the bottom of its scroll.\n    return preventDefault(event);\n  }\n\n  event.stopPropagation();\n  return true;\n};\n\nexport var disableBodyScroll = function disableBodyScroll(targetElement, options) {\n  if (isIosDevice) {\n    // targetElement must be provided, and disableBodyScroll must not have been\n    // called on this targetElement before.\n    if (!targetElement) {\n      // eslint-disable-next-line no-console\n      console.error('disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.');\n      return;\n    }\n\n    if (targetElement && !locks.some(function (lock) {\n      return lock.targetElement === targetElement;\n    })) {\n      var lock = {\n        targetElement: targetElement,\n        options: options || {}\n      };\n\n      locks = [].concat(_toConsumableArray(locks), [lock]);\n\n      targetElement.ontouchstart = function (event) {\n        if (event.targetTouches.length === 1) {\n          // detect single touch.\n          initialClientY = event.targetTouches[0].clientY;\n        }\n      };\n      targetElement.ontouchmove = function (event) {\n        if (event.targetTouches.length === 1) {\n          // detect single touch.\n          handleScroll(event, targetElement);\n        }\n      };\n\n      if (!documentListenerAdded) {\n        document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n        documentListenerAdded = true;\n      }\n    }\n  } else {\n    setOverflowHidden(options);\n    var _lock = {\n      targetElement: targetElement,\n      options: options || {}\n    };\n\n    locks = [].concat(_toConsumableArray(locks), [_lock]);\n  }\n};\n\nexport var clearAllBodyScrollLocks = function clearAllBodyScrollLocks() {\n  if (isIosDevice) {\n    // Clear all locks ontouchstart/ontouchmove handlers, and the references.\n    locks.forEach(function (lock) {\n      lock.targetElement.ontouchstart = null;\n      lock.targetElement.ontouchmove = null;\n    });\n\n    if (documentListenerAdded) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = false;\n    }\n\n    locks = [];\n\n    // Reset initial clientY.\n    initialClientY = -1;\n  } else {\n    restoreOverflowSetting();\n    locks = [];\n  }\n};\n\nexport var enableBodyScroll = function enableBodyScroll(targetElement) {\n  if (isIosDevice) {\n    if (!targetElement) {\n      // eslint-disable-next-line no-console\n      console.error('enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.');\n      return;\n    }\n\n    targetElement.ontouchstart = null;\n    targetElement.ontouchmove = null;\n\n    locks = locks.filter(function (lock) {\n      return lock.targetElement !== targetElement;\n    });\n\n    if (documentListenerAdded && locks.length === 0) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n\n      documentListenerAdded = false;\n    }\n  } else {\n    locks = locks.filter(function (lock) {\n      return lock.targetElement !== targetElement;\n    });\n    if (!locks.length) {\n      restoreOverflowSetting();\n    }\n  }\n};\n\n","<template>\n  <div\n    v-if=\"ssr || visible\"\n    v-show=\"!ssr || visible\"\n    :style=\"{ zIndex: calculateZIndex }\"\n    class=\"vfm vfm--inset\"\n    :class=\"[\n      attach === false ? 'vfm--fixed' : 'vfm--absolute',\n      { 'vfm--prevent-none': preventClick }\n    ]\"\n  >\n    <transition\n      :name=\"overlayTransition\"\n      @before-enter=\"beforeOverlayEnter\"\n      @after-enter=\"afterOverlayEnter\"\n      @before-leave=\"beforeOverlayLeave\"\n      @after-leave=\"afterOverlayLeave\"\n    >\n      <div\n        v-show=\"!hideOverlay && visibility.overlay\"\n        class=\"vfm__overlay vfm--overlay vfm--absolute vfm--inset\"\n        :class=\"overlayClass\"\n      ></div>\n    </transition>\n    <transition\n      :name=\"transition\"\n      @before-enter=\"beforeModalEnter\"\n      @after-enter=\"afterModalEnter\"\n      @before-leave=\"beforeModalLeave\"\n      @after-leave=\"afterModalLeave\"\n    >\n      <div\n        v-show=\"visibility.modal\"\n        class=\"vfm__container vfm--absolute vfm--inset\"\n        :class=\"[classes, { 'vfm--cursor-pointer': clickToClose }]\"\n        @click=\"clickToClose && $emit('input', false)\"\n      >\n        <slot name=\"content-before\" />\n        <slot name=\"content\">\n          <div\n            ref=\"vfmContent\"\n            body-scroll-lock-ignore\n            class=\"vfm__content vfm--cursor-auto\"\n            :class=\"[contentClass, { 'vfm--prevent-auto': preventClick }]\"\n            @click.stop\n          >\n            <slot />\n          </div>\n        </slot>\n        <slot name=\"content-after\" />\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock'\n\nlet modalStack = []\n\nconst TransitionState = {\n  Enter: 'enter',\n  Entering: 'entering',\n  Leave: 'leave',\n  Leaving: 'leavng'\n}\n\nfunction validateAttachTarget(val) {\n  const type = typeof val\n\n  if (type === 'boolean' || type === 'string') return true\n\n  return val.nodeType === Node.ELEMENT_NODE\n}\n\nconst CLASS_TYPES = [String, Object, Array]\n\nexport default {\n  name: 'VueFinalModal',\n  props: {\n    value: { type: Boolean, default: false },\n    ssr: { type: Boolean, default: true },\n    classes: { type: CLASS_TYPES, default: '' },\n    overlayClass: { type: CLASS_TYPES, default: '' },\n    contentClass: { type: CLASS_TYPES, default: '' },\n    lockScroll: { type: Boolean, default: true },\n    hideOverlay: { type: Boolean, default: false },\n    clickToClose: { type: Boolean, default: true },\n    preventClick: { type: Boolean, default: false },\n    attach: { type: null, default: false, validator: validateAttachTarget },\n    transition: { type: String, default: 'vfm' },\n    overlayTransition: { type: String, default: 'vfm' },\n    zIndexBase: { type: [String, Number], default: 1000 },\n    zIndex: { type: [Boolean, String, Number], default: false }\n  },\n  data: () => ({\n    modalStackIndex: null,\n    visible: false,\n    visibility: {\n      modal: false,\n      overlay: false\n    },\n    overlayTransitionState: null,\n    modalTransitionState: null\n  }),\n  computed: {\n    isComponentReadyToBeDestroyed() {\n      return (\n        (this.hideOverlay ||\n          this.overlayTransitionState === TransitionState.Leave) &&\n        this.modalTransitionState === TransitionState.Leave\n      )\n    },\n    calculateZIndex() {\n      if (typeof this.zIndex === 'boolean') {\n        if (this.attach) {\n          return 'unset'\n        } else {\n          return this.zIndexBase + 2 * (this.modalStackIndex || 0)\n        }\n      } else {\n        return this.zIndex\n      }\n    }\n  },\n  watch: {\n    value(value) {\n      this.mounted()\n      if (!value) {\n        this.close()\n      }\n    },\n    lockScroll: 'handleLockScroll',\n    hideOverlay(value) {\n      if (this.value && !value) {\n        this.visibility.overlay = true\n      }\n    },\n    attach: 'mounted',\n    isComponentReadyToBeDestroyed(isReady) {\n      if (isReady) {\n        this.visible = false\n      }\n    }\n  },\n  mounted() {\n    this.mounted()\n  },\n  beforeDestroy() {\n    this.close()\n    this.$el.remove()\n  },\n  methods: {\n    mounted() {\n      if (this.value) {\n        let target = this.getAttachElement()\n        if (target || this.attach === false) {\n          this.attach !== false && target.appendChild(this.$el)\n          let index = modalStack.findIndex(vm => vm === this)\n          if (index !== -1) {\n            // if this is already exist in modalStack, delete it\n            modalStack.splice(index, 1)\n          }\n          modalStack.push(this)\n\n          this.modalStackIndex = modalStack.length - 1\n\n          this.handleLockScroll()\n          modalStack\n            .filter(vm => vm !== this)\n            .forEach((vm, index) => {\n              if (vm.getAttachElement() === target) {\n                // if vm and this have the same attach element\n                vm.modalStackIndex = index\n                vm.visibility.overlay = false\n              }\n            })\n\n          this.visible = true\n          this.$nextTick(() => {\n            this.startTransitionEnter()\n          })\n        } else if (target !== false) {\n          console.warn('Unable to locate target '.concat(this.attach))\n        }\n      } else {\n        this.lockScroll && enableBodyScroll(this.$refs.vfmContent)\n      }\n    },\n    close() {\n      let index = modalStack.findIndex(vm => vm === this)\n      if (index !== -1) {\n        // remove this in modalStack\n        modalStack.splice(index, 1)\n      }\n      if (modalStack.length > 0) {\n        // If there are still nested modals opened\n        const $_vm = modalStack[modalStack.length - 1]\n        $_vm.handleLockScroll()\n        !$_vm.hideOverlay && ($_vm.visibility.overlay = true)\n      } else {\n        // If the closed modal is the last one\n        this.lockScroll && enableBodyScroll(this.$refs.vfmContent)\n      }\n      this.startTransitionLeave()\n    },\n    startTransitionEnter() {\n      this.visibility.overlay = true\n      this.visibility.modal = true\n    },\n    startTransitionLeave() {\n      this.visibility.overlay = false\n      this.visibility.modal = false\n    },\n    handleLockScroll() {\n      this.lockScroll\n        ? disableBodyScroll(this.$refs.vfmContent, {\n            allowTouchMove: el => {\n              while (el && el !== document.body) {\n                if (el.getAttribute('body-scroll-lock-ignore') !== null) {\n                  return true\n                }\n                el = el.parentElement\n              }\n            }\n          })\n        : enableBodyScroll(this.$refs.vfmContent)\n    },\n    getAttachElement() {\n      let target\n      if (this.attach === false) {\n        target = false\n      } else if (typeof this.attach === 'string') {\n        // CSS selector\n        if (window) {\n          target = window.document.querySelector(this.attach)\n        } else {\n          target = false\n        }\n      } else {\n        // DOM Element\n        target = this.attach\n      }\n      return target\n    },\n    beforeOverlayEnter() {\n      this.overlayTransitionState = TransitionState.Entering\n    },\n    afterOverlayEnter() {\n      this.overlayTransitionState = TransitionState.Enter\n    },\n    beforeOverlayLeave() {\n      this.overlayTransitionState = TransitionState.Leaving\n    },\n    afterOverlayLeave() {\n      this.overlayTransitionState = TransitionState.Leave\n    },\n    beforeModalEnter() {\n      this.$emit('before-open')\n      this.modalTransitionState = TransitionState.Entering\n    },\n    afterModalEnter() {\n      this.modalTransitionState = TransitionState.Enter\n      this.$emit('opened')\n    },\n    beforeModalLeave() {\n      this.$emit('before-close')\n      this.modalTransitionState = TransitionState.Leaving\n    },\n    afterModalLeave() {\n      this.modalTransitionState = TransitionState.Leave\n      this.modalStackIndex = null\n      this.$emit('closed')\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\n.vfm--fixed {\n  position: fixed;\n}\n.vfm--absolute {\n  position: absolute;\n}\n.vfm--inset {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.vfm--overlay {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.vfm--prevent-none {\n  pointer-events: none;\n}\n.vfm--prevent-auto {\n  pointer-events: auto;\n}\n.vfm--cursor-pointer {\n  cursor: pointer;\n}\n.vfm--cursor-auto {\n  cursor: auto;\n}\n.vfm-enter-active,\n.vfm-leave-active {\n  transition: opacity 0.2s;\n}\n.vfm-enter-from,\n.vfm-leave-to {\n  opacity: 0;\n}\n</style>\n","import modal from './VueFinalModal.vue'\n\nexport const VueFinalModal = modal\n\nexport const install = function(Vue) {\n  Vue.component('VueFinalModal', VueFinalModal)\n}\n"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","hasPassiveEvents","window","passiveTestOptions","addEventListener","removeEventListener","isIosDevice","navigator","platform","test","maxTouchPoints","locks","documentListenerAdded","initialClientY","previousBodyOverflowSetting","previousBodyPaddingRight","allowTouchMove","el","some","lock","options","preventDefault","rawEvent","e","event","target","touches","disableBodyScroll","targetElement","console","error","concat","ontouchstart","targetTouches","clientY","ontouchmove","scrollTop","scrollHeight","clientHeight","isTargetElementTotallyScrolled","stopPropagation","handleScroll","document","passive","undefined","setTimeout","_reserveScrollBarGap","reserveScrollBarGap","scrollBarGap","innerWidth","documentElement","clientWidth","body","style","paddingRight","overflow","setOverflowHidden","_lock","enableBodyScroll","filter","VueFinalModal","Vue","component"],"mappings":"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"}