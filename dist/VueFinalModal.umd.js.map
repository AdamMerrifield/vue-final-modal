{"version":3,"file":"VueFinalModal.umd.js","sources":["../lib/VueFinalModal.vue","../lib/index.js"],"sourcesContent":["<template>\n  <div v-if=\"ssr ? true : visible\" v-show=\"ssr ? visible : true\" class=\"vfm\">\n    <transition\n      :name=\"overlayTransition\"\n      @before-enter=\"beforeOverlayEnter\"\n      @after-enter=\"afterOverlayEnter\"\n      @before-leave=\"beforeOverlayLeave\"\n      @after-leave=\"afterOverlayLeave\"\n    >\n      <div\n        v-show=\"!hideOverlay && visibility.overlay\"\n        :style=\"{ zIndex }\"\n        class=\"vfm__overlay\"\n        :class=\"[\n          { 'vfm__overlay--attach': attach !== 'body' },\n          { 'vfm__overlay--prevent-click': preventClick },\n          overlayClass\n        ]\"\n      ></div>\n    </transition>\n    <transition\n      :name=\"transition\"\n      @before-enter=\"beforeModalEnter\"\n      @after-enter=\"afterModalEnter\"\n      @before-leave=\"beforeModalLeave\"\n      @after-leave=\"afterModalLeave\"\n    >\n      <div\n        v-show=\"visibility.modal\"\n        :style=\"{ zIndex }\"\n        class=\"vfm__container\"\n        :class=\"[\n          {\n            'vfm__container--attach': attach !== 'body',\n            'vfm__container--prevent-click': preventClick\n          },\n          classes\n        ]\"\n        @click=\"clickToClose && $emit('input', false)\"\n      >\n        <slot name=\"content-before\" />\n        <slot name=\"content\">\n          <div\n            ref=\"vfmContent\"\n            class=\"vfm__content\"\n            :class=\"contentClass\"\n            @click.stop\n          >\n            <slot />\n          </div>\n        </slot>\n        <slot name=\"content-after\" />\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\nimport { disableBodyScroll, clearAllBodyScrollLocks } from 'body-scroll-lock'\n\nlet modalStack = []\n\nconst TransitionState = {\n  Enter: 'enter',\n  Entering: 'entering',\n  Leave: 'leave',\n  Leaving: 'leavng'\n}\n\nexport default {\n  name: 'VueFinalModal',\n  props: {\n    value: { type: Boolean, default: false },\n    ssr: { type: Boolean, default: false },\n    classes: { type: [String, Object, Array], default: '' },\n    contentClass: { type: [String, Object, Array], default: '' },\n    lockScroll: { type: Boolean, default: true },\n    hideOverlay: { type: Boolean, default: false },\n    clickToClose: { type: Boolean, default: true },\n    preventClick: { type: Boolean, default: false },\n    overlayClass: { type: String, default: '' },\n    attach: { type: null, default: 'body' },\n    transition: { type: String, default: 'vfm' },\n    overlayTransition: { type: String, default: 'vfm' },\n    zIndex: { type: [String, Number], default: 1000 }\n  },\n  data: () => ({\n    visible: false,\n    visibility: {\n      modal: false,\n      overlay: false\n    },\n    overlayTransitionState: null,\n    modalTransitionState: null\n  }),\n  computed: {\n    isComponentReadyToBeDestroyed() {\n      return (\n        this.overlayTransitionState === TransitionState.Leave &&\n        this.modalTransitionState === TransitionState.Leave\n      )\n    }\n  },\n  watch: {\n    value(value) {\n      this.mounted(value)\n      if (value === false) {\n        this.close()\n      }\n    },\n    lockScroll: 'handleLockScroll',\n    hideOverlay(value) {\n      if (this.value) {\n        !value && this.appendOverlay()\n      }\n    },\n    attach() {\n      this.mounted(this.value)\n    },\n    isComponentReadyToBeDestroyed(isReady) {\n      if (isReady) {\n        this.visible = false\n      }\n    }\n  },\n  mounted() {\n    this.mounted(this.value)\n  },\n  beforeDestroy() {\n    this.close()\n  },\n  methods: {\n    mounted(value) {\n      if (value) {\n        let target = this.getAttachElement()\n        if (target) {\n          target.appendChild(this.$el)\n          let index = modalStack.findIndex(vm => vm === this)\n          if (index !== -1) {\n            // if this is already exist in modalStack, delete it\n            modalStack.splice(index, 1)\n          }\n          modalStack.push(this)\n          this.handleLockScroll()\n          modalStack\n            .filter(vm => vm !== this)\n            .forEach(vm => {\n              if (vm.getAttachElement() === target) {\n                // if vm and this have the same attach element\n                vm.visibility.overlay = false\n              }\n            })\n        } else if (target !== false) {\n          console.warn('Unable to locate target '.concat(this.attach || 'body'))\n          return\n        }\n        this.visible = true\n        this.$nextTick(() => {\n          this.startTransitionEnter()\n        })\n      } else {\n        this.lockScroll && clearAllBodyScrollLocks()\n      }\n    },\n    close() {\n      let index = modalStack.findIndex(vm => vm === this)\n      if (index !== -1) {\n        // remove this in modalStack\n        modalStack.splice(index, 1)\n      }\n      if (modalStack.length > 0) {\n        // If there are still nested modals opened\n        const $_vm = modalStack[modalStack.length - 1]\n        $_vm.handleLockScroll()\n        !$_vm.hideOverlay && $_vm.appendOverlay()\n      } else {\n        // If the closed modal is the last one\n        this.lockScroll && clearAllBodyScrollLocks()\n      }\n      this.startTransitionLeave()\n    },\n    startTransitionEnter() {\n      this.visibility.overlay = true\n      this.visibility.modal = true\n    },\n    startTransitionLeave() {\n      this.visibility.overlay = false\n      this.visibility.modal = false\n    },\n    appendOverlay() {\n      this.visibility.overlay = true\n    },\n    handleLockScroll() {\n      this.lockScroll\n        ? disableBodyScroll(this.$refs.vfmContent)\n        : clearAllBodyScrollLocks()\n    },\n    getAttachElement() {\n      let target\n      if (this.attach === false) {\n        target = false\n      } else if (typeof this.attach === 'string') {\n        // CSS selector\n        if (window) {\n          target = window.document.querySelector(this.attach)\n        } else {\n          target = false\n        }\n      } else {\n        // DOM Element\n        target = this.attach\n      }\n      return target\n    },\n    beforeOverlayEnter() {\n      this.overlayTransitionState = TransitionState.Entering\n    },\n    afterOverlayEnter() {\n      this.overlayTransitionState = TransitionState.Enter\n    },\n    beforeOverlayLeave() {\n      this.overlayTransitionState = TransitionState.Leaving\n    },\n    afterOverlayLeave() {\n      this.overlayTransitionState = TransitionState.Leave\n    },\n    beforeModalEnter() {\n      this.$emit('before-open')\n      this.modalTransitionState = TransitionState.Entering\n    },\n    afterModalEnter() {\n      this.modalTransitionState = TransitionState.Enter\n      this.$emit('opened')\n    },\n    beforeModalLeave() {\n      this.$emit('before-close')\n      this.modalTransitionState = TransitionState.Leaving\n    },\n    afterModalLeave() {\n      this.modalTransitionState = TransitionState.Leave\n      this.$emit('closed')\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.vfm__overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  &--attach {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n  &--prevent-click {\n    pointer-events: none;\n  }\n}\n\n.vfm__container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  &--attach {\n    position: absolute;\n  }\n  &--prevent-click {\n    pointer-events: none;\n    .vfm__content {\n      pointer-events: auto;\n    }\n  }\n}\n.vfm-enter-active,\n.vfm-leave-active {\n  transition: opacity 0.2s;\n}\n.vfm-enter,\n.vfm-leave-to {\n  opacity: 0;\n}\n</style>\n","import modal from './VueFinalModal.vue'\n\nconst VueFinalModal = modal\n\nconst install = function(Vue) {\n  Vue.component('VueFinalModal', VueFinalModal)\n}\n\nexport default {\n  install,\n  VueFinalModal\n}\n"],"names":["VueFinalModal","install","Vue","component"],"mappings":"+SA4DA,ysJC1DA,IAAMA,uzEAMS,CACbC,QALc,SAASC,GACvBA,EAAIC,UAAU,gBAAiBH,IAK/BA,cAAAA"}