{"version":3,"file":"VueFinalModal.esm.js","sources":["../lib/utils/focusTrap.js","../lib/utils/bodyScrollLock.js","../lib/VueFinalModal.vue","../lib/PluginCore.js","../lib/utils/errors.js","../lib/Plugin.js"],"sourcesContent":["// stolen from vue-js-modal\n\nconst FOCUSABLE_ELEMENTS_QUERY =\n  'button:not([disabled]), ' +\n  'select:not([disabled]), ' +\n  'a[href]:not([disabled]), ' +\n  'area[href]:not([disabled]), ' +\n  '[contentEditable=\"\"]:not([disabled]), ' +\n  '[contentEditable=\"true\"]:not([disabled]), ' +\n  '[contentEditable=\"TRUE\"]:not([disabled]), ' +\n  'textarea:not([disabled]), ' +\n  'iframe:not([disabled]), ' +\n  'input:not([disabled]), ' +\n  'summary:not([disabled]), ' +\n  '[tabindex]:not([tabindex=\"-1\"])'\n\nconst isTabPressed = event => {\n  return event.key === 'Tab' || event.keyCode === 9\n}\n\nconst querySelectorAll = (element, selector) => {\n  return [...(element.querySelectorAll(selector) || [])]\n}\n\nconst queryFocusableElements = element => {\n  return querySelectorAll(element, FOCUSABLE_ELEMENTS_QUERY)\n}\n\nconst isFocused = element => {\n  return element == document.activeElement\n}\n\nconst isNothingFocused = () => {\n  return !document.activeElement\n}\n\nclass FocusTrap {\n  constructor() {\n    this.root = null\n    this.elements = []\n\n    this.onKeyDown = this.onKeyDown.bind(this)\n    this.enable = this.enable.bind(this)\n    this.disable = this.disable.bind(this)\n    this.firstElement = this.firstElement.bind(this)\n    this.lastElement = this.lastElement.bind(this)\n  }\n\n  lastElement() {\n    return this.elements[this.elements.length - 1] || null\n  }\n\n  firstElement() {\n    return this.elements[0] || null\n  }\n\n  onKeyDown(event) {\n    if (!isTabPressed(event)) {\n      return\n    }\n\n    // SHIFT + TAB\n    if (event.shiftKey) {\n      if (isFocused(this.firstElement())) {\n        this.lastElement().focus()\n        event.preventDefault()\n      }\n      return\n    }\n\n    // TAB\n    if (isNothingFocused() || isFocused(this.lastElement())) {\n      this.firstElement().focus()\n      event.preventDefault()\n      return\n    }\n  }\n\n  enabled() {\n    return !!this.root\n  }\n\n  enable(root) {\n    if (!root) {\n      return\n    }\n\n    this.root = root\n    this.elements = queryFocusableElements(this.root)\n\n    this.root.addEventListener('keydown', this.onKeyDown)\n  }\n\n  disable() {\n    this.root.removeEventListener('keydown', this.onKeyDown)\n    this.root = null\n  }\n}\n\nexport default FocusTrap\n","// stolen from body-scroll-lock and removed ios part\n\nlet locks = []\nlet previousBodyOverflowSetting\nlet previousBodyPaddingRight\n\nconst setOverflowHidden = options => {\n  // If previousBodyPaddingRight is already set, don't set it again.\n  if (previousBodyPaddingRight === undefined) {\n    const reserveScrollBarGap = !!options && options.reserveScrollBarGap === true\n    const scrollBarGap = window.innerWidth - document.documentElement.clientWidth\n\n    if (reserveScrollBarGap && scrollBarGap > 0) {\n      const computedBodyPaddingRight = parseInt(getComputedStyle(document.body).getPropertyValue('padding-right'), 10)\n      previousBodyPaddingRight = document.body.style.paddingRight\n      document.body.style.paddingRight = `${computedBodyPaddingRight + scrollBarGap}px`\n    }\n  }\n  // If previousBodyOverflowSetting is already set, don't set it again.\n  if (previousBodyOverflowSetting === undefined) {\n    previousBodyOverflowSetting = document.body.style.overflow\n    document.body.style.overflow = 'hidden'\n  }\n}\n\nconst restoreOverflowSetting = () => {\n  if (previousBodyPaddingRight !== undefined) {\n    document.body.style.paddingRight = previousBodyPaddingRight\n\n    // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n    // can be set again.\n    previousBodyPaddingRight = undefined\n  }\n\n  if (previousBodyOverflowSetting !== undefined) {\n    document.body.style.overflow = previousBodyOverflowSetting\n\n    // Restore previousBodyOverflowSetting to undefined\n    // so setOverflowHidden knows it can be set again.\n    previousBodyOverflowSetting = undefined\n  }\n}\n\nexport const disableBodyScroll = (targetElement, options) => {\n  // targetElement must be provided\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.'\n    )\n    return\n  }\n\n  // disableBodyScroll must not have been called on this targetElement before\n  if (locks.some(lock => lock.targetElement === targetElement)) {\n    return\n  }\n\n  const lock = {\n    targetElement,\n    options: options || {}\n  }\n\n  locks = [...locks, lock]\n\n  setOverflowHidden(options)\n}\n\nexport const enableBodyScroll = targetElement => {\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.'\n    )\n    return\n  }\n\n  locks = locks.filter(lock => lock.targetElement !== targetElement)\n\n  if (!locks.length) {\n    restoreOverflowSetting()\n  }\n}\n","<template>\n  <div\n    v-if=\"ssr || visible\"\n    v-show=\"!ssr || visible\"\n    :style=\"bindStyle\"\n    class=\"vfm vfm--inset\"\n    :class=\"[attach === false ? 'vfm--fixed' : 'vfm--absolute', { 'vfm--prevent-none': preventClick }]\"\n    @keydown=\"onEsc\"\n  >\n    <transition\n      :name=\"overlayTransition\"\n      @before-enter=\"beforeOverlayEnter\"\n      @after-enter=\"afterOverlayEnter\"\n      @before-leave=\"beforeOverlayLeave\"\n      @after-leave=\"afterOverlayLeave\"\n    >\n      <div\n        v-show=\"!hideOverlay && visibility.overlay\"\n        class=\"vfm__overlay vfm--overlay vfm--absolute vfm--inset\"\n        :class=\"overlayClass\"\n        :style=\"overlayStyle\"\n      ></div>\n    </transition>\n    <transition\n      :name=\"transition\"\n      @before-enter=\"beforeModalEnter\"\n      @after-enter=\"afterModalEnter\"\n      @before-leave=\"beforeModalLeave\"\n      @after-leave=\"afterModalLeave\"\n    >\n      <div\n        v-show=\"visibility.modal\"\n        ref=\"vfmContainer\"\n        class=\"vfm__container vfm--absolute vfm--inset vfm--outline-none\"\n        :class=\"classes\"\n        :style=\"styles\"\n        :aria-expanded=\"visibility.modal.toString()\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        tabindex=\"-1\"\n        @click.self=\"onClickContainer\"\n      >\n        <div\n          ref=\"vfmContent\"\n          class=\"vfm__content\"\n          :class=\"[contentClass, { 'vfm--prevent-auto': preventClick }]\"\n          :style=\"contentStyle\"\n        >\n          <slot v-bind:params=\"params\" />\n        </div>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\nimport FocusTrap from './utils/focusTrap.js'\nimport { disableBodyScroll, enableBodyScroll } from './utils/bodyScrollLock'\n\nconst TransitionState = {\n  Enter: 'enter',\n  Entering: 'entering',\n  Leave: 'leave',\n  Leaving: 'leavng'\n}\n\nfunction validateAttachTarget(val) {\n  const type = typeof val\n\n  if (type === 'boolean' || type === 'string') return true\n\n  return val.nodeType === Node.ELEMENT_NODE\n}\n\nconst STYLE_PROP = {\n  type: [String, Object, Array],\n  default: ''\n}\n\nexport default {\n  name: 'VueFinalModal',\n  props: {\n    name: { type: String, default: null },\n    value: { type: Boolean, default: false },\n    ssr: { type: Boolean, default: true },\n    classes: STYLE_PROP,\n    overlayClass: STYLE_PROP,\n    contentClass: STYLE_PROP,\n    styles: STYLE_PROP,\n    overlayStyle: STYLE_PROP,\n    contentStyle: STYLE_PROP,\n    lockScroll: { type: Boolean, default: true },\n    hideOverlay: { type: Boolean, default: false },\n    clickToClose: { type: Boolean, default: true },\n    escToClose: { type: Boolean, default: false },\n    preventClick: { type: Boolean, default: false },\n    attach: { type: null, default: false, validator: validateAttachTarget },\n    transition: { type: String, default: 'vfm' },\n    overlayTransition: { type: String, default: 'vfm' },\n    zIndexAuto: { type: Boolean, default: true },\n    zIndexBase: { type: [String, Number], default: 1000 },\n    zIndex: { type: [Boolean, String, Number], default: false },\n    focusRetain: { type: Boolean, default: true },\n    focusTrap: { type: Boolean, default: false }\n  },\n  data: () => ({\n    modalStackIndex: null,\n    visible: false,\n    visibility: {\n      modal: false,\n      overlay: false\n    },\n    overlayTransitionState: null,\n    modalTransitionState: null,\n    stopEvent: false,\n    params: {}\n  }),\n  computed: {\n    api() {\n      return this[this.$_options.key]\n    },\n    isComponentReadyToBeDestroyed() {\n      return (\n        (this.hideOverlay || this.overlayTransitionState === TransitionState.Leave) &&\n        this.modalTransitionState === TransitionState.Leave\n      )\n    },\n    calculateZIndex() {\n      if (this.zIndex === false) {\n        if (this.zIndexAuto) {\n          return +this.zIndexBase + 2 * (this.modalStackIndex || 0)\n        } else {\n          return false\n        }\n      } else {\n        return this.zIndex\n      }\n    },\n    bindStyle() {\n      return {\n        ...(this.calculateZIndex !== false && { zIndex: this.calculateZIndex })\n      }\n    }\n  },\n  watch: {\n    value(value) {\n      if (this.stopEvent) {\n        this.stopEvent = false\n        return\n      }\n      this.mounted()\n      if (!value) {\n        if (this.emitEvent('before-close', true)) {\n          return\n        }\n        this.close()\n      }\n    },\n    lockScroll: 'handleLockScroll',\n    hideOverlay(value) {\n      if (this.value && !value) {\n        this.visibility.overlay = true\n      }\n    },\n    attach: 'mounted',\n    isComponentReadyToBeDestroyed(isReady) {\n      if (isReady) {\n        this.visible = false\n      }\n    }\n  },\n  created() {\n    this.api.modals.push(this)\n  },\n  mounted() {\n    this.$focusTrap = new FocusTrap()\n    this.mounted()\n  },\n  beforeDestroy() {\n    this.close()\n    this.lockScroll && enableBodyScroll(this.$refs.vfmContent)\n    this?.$el?.remove()\n\n    let index = this.api.modals.findIndex(vm => vm === this)\n    this.api.modals.splice(index, 1)\n  },\n  methods: {\n    mounted() {\n      if (this.value) {\n        if (this.emitEvent('before-open', false)) {\n          return\n        }\n        let target = this.getAttachElement()\n        if (target || this.attach === false) {\n          this.attach !== false && target.appendChild(this.$el)\n\n          let index = this.api.openedModals.findIndex(vm => vm === this)\n          if (index !== -1) {\n            // if this is already exist in modalStack, delete it\n            this.api.openedModals.splice(index, 1)\n          }\n          this.api.openedModals.push(this)\n\n          this.modalStackIndex = this.api.openedModals.length - 1\n\n          this.handleLockScroll()\n          this.api.openedModals\n            .filter(vm => vm !== this)\n            .forEach((vm, index) => {\n              if (vm.getAttachElement() === target) {\n                // if vm and this have the same attach element\n                vm.modalStackIndex = index\n                vm.visibility.overlay = false\n              }\n            })\n\n          this.visible = true\n          this.$nextTick(() => {\n            this.startTransitionEnter()\n          })\n        } else if (target !== false) {\n          console.warn('Unable to locate target '.concat(this.attach))\n        }\n      }\n    },\n    close() {\n      let index = this.api.openedModals.findIndex(vm => vm === this)\n      if (index !== -1) {\n        // remove this in modalStack\n        this.api.openedModals.splice(index, 1)\n      }\n      if (this.api.openedModals.length > 0) {\n        // If there are still nested modals opened\n        const $_vm = this.api.openedModals[this.api.openedModals.length - 1]\n        if ($_vm.focusRetain || $_vm.focusTrap) {\n          $_vm.$refs.vfmContainer.focus()\n        }\n        !$_vm.hideOverlay && ($_vm.visibility.overlay = true)\n      }\n      this.startTransitionLeave()\n    },\n    startTransitionEnter() {\n      this.visibility.overlay = true\n      this.visibility.modal = true\n    },\n    startTransitionLeave() {\n      this.visibility.overlay = false\n      this.visibility.modal = false\n    },\n    handleLockScroll() {\n      if (this.value) {\n        if (this.lockScroll) {\n          disableBodyScroll(this.$refs.vfmContent, {\n            reserveScrollBarGap: true\n          })\n        } else {\n          enableBodyScroll(this.$refs.vfmContent)\n        }\n      }\n    },\n    getAttachElement() {\n      let target\n      if (this.attach === false) {\n        target = false\n      } else if (typeof this.attach === 'string') {\n        // CSS selector\n        if (window) {\n          target = window.document.querySelector(this.attach)\n        } else {\n          target = false\n        }\n      } else {\n        // DOM Element\n        target = this.attach\n      }\n      return target\n    },\n    beforeOverlayEnter() {\n      this.overlayTransitionState = TransitionState.Entering\n    },\n    afterOverlayEnter() {\n      this.overlayTransitionState = TransitionState.Enter\n    },\n    beforeOverlayLeave() {\n      this.overlayTransitionState = TransitionState.Leaving\n    },\n    afterOverlayLeave() {\n      this.overlayTransitionState = TransitionState.Leave\n    },\n    beforeModalEnter() {\n      this.modalTransitionState = TransitionState.Entering\n    },\n    afterModalEnter() {\n      this.modalTransitionState = TransitionState.Enter\n      if (this.focusRetain || this.focusTrap) {\n        this.$refs.vfmContainer.focus()\n      }\n      if (this.focusTrap) {\n        this.$focusTrap.enable(this.$refs.vfmContainer)\n      }\n      this.$emit('opened', this.createModalEvent({ type: 'opened' }))\n    },\n    beforeModalLeave() {\n      this.modalTransitionState = TransitionState.Leaving\n\n      if (this.$focusTrap.enabled()) {\n        this.$focusTrap.disable()\n      }\n    },\n    afterModalLeave() {\n      this.modalTransitionState = TransitionState.Leave\n      this.modalStackIndex = null\n      this.lockScroll && enableBodyScroll(this.$refs.vfmContent)\n\n      let stopEvent = false\n      const event = this.createModalEvent({\n        type: 'closed',\n        stop() {\n          stopEvent = true\n        }\n      })\n      this.$emit('closed', event)\n      if (stopEvent) return\n      this.params = {}\n    },\n    onClickContainer() {\n      this.$emit('click-outside', this.createModalEvent({ type: 'click-outside' }))\n      this.clickToClose && this.$emit('input', false)\n    },\n    onEsc(evt) {\n      if (evt.keyCode === 27 && this.visible && this.escToClose) {\n        this.$emit('input', false)\n      }\n    },\n    createModalEvent(eventProps = {}) {\n      return {\n        ref: this,\n        ...eventProps\n      }\n    },\n    emitEvent(eventType, value) {\n      let stopEvent = false\n      const event = this.createModalEvent({\n        type: eventType,\n        stop() {\n          stopEvent = true\n        }\n      })\n      this.$emit(eventType, event)\n      if (stopEvent) {\n        this.stopEvent = true\n        this.$emit('input', value)\n        return true\n      }\n      return false\n    },\n    toggle(show, params) {\n      const value = typeof show === 'boolean' ? show : !this.value\n      if (value && arguments.length === 2) {\n        this.params = params\n      }\n      this.$emit('input', value)\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\n.vfm--fixed {\n  position: fixed;\n}\n.vfm--absolute {\n  position: absolute;\n}\n.vfm--inset {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.vfm--overlay {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.vfm--prevent-none {\n  pointer-events: none;\n}\n.vfm--prevent-auto {\n  pointer-events: auto;\n}\n.vfm--outline-none:focus {\n  outline: none;\n}\n.vfm-enter-active,\n.vfm-leave-active {\n  transition: opacity 0.2s;\n}\n.vfm-enter,\n.vfm-leave-to {\n  opacity: 0;\n}\n</style>\n","import VueFinalModal from './VueFinalModal.vue'\n\nfunction createVfm() {\n  let vfm\n\n  return function() {\n    vfm = {\n      show(name, ...args) {\n        this.toggle(name, true, ...args)\n      },\n      hide(name) {\n        this.toggle(name, false)\n      },\n      hideAll() {\n        this.openedModals.forEach(modal => {\n          modal.$emit('input', false)\n        })\n      },\n      toggle(name, ...args) {\n        const modal = this.get(name)\n        if (modal !== undefined) {\n          modal.toggle(...args)\n        }\n      },\n      get(name) {\n        return this.modals.find(modal => modal.name === name)\n      },\n      openedModals: [],\n      modals: []\n    }\n    return vfm\n  }\n}\n\nexport function bindPrototype(Vue, options) {\n  const vfm = createVfm()()\n  Object.defineProperty(Vue.prototype, options.key, {\n    get() {\n      return vfm\n    }\n  })\n}\n\nexport function registComponent(Vue, options) {\n  Vue.component(options.componentName, {\n    ...VueFinalModal,\n    props: { ...VueFinalModal.props, $_options: { type: Object, default: () => options } }\n  })\n}\n","export const DUPLICATE_PLUGIN_COMPONENT =\n  '[vue-final-modal] Duplicate registration API key and componentName of VueFinalModal.'\n\nexport const DUPLICATE_COMPONENT = '[vue-final-modal] Duplicate registration componentName of VueFinalModal.'\n","import { bindPrototype, registComponent } from './PluginCore'\nimport { DUPLICATE_PLUGIN_COMPONENT, DUPLICATE_COMPONENT } from './utils/errors'\n\nconst defaultOptions = {\n  componentName: 'VueFinalModal',\n  key: '$vfm'\n}\n\nconst Plugin = () => ({\n  install(Vue, options) {\n    const _options = Object.assign({}, defaultOptions, options)\n    const isDuplicateKey = Vue.prototype[_options.key]\n    const isDuplicateComponent = Vue.options.components[_options.componentName]\n\n    if (isDuplicateComponent) {\n      if (typeof window !== 'undefined') {\n        console.warn(isDuplicateKey ? DUPLICATE_PLUGIN_COMPONENT : DUPLICATE_COMPONENT)\n      }\n    } else {\n      if (!isDuplicateKey) {\n        bindPrototype(Vue, _options)\n      }\n      registComponent(Vue, _options)\n    }\n  }\n})\n\nexport default Plugin\n"],"names":["previousBodyOverflowSetting","previousBodyPaddingRight","queryFocusableElements","element","selector","querySelectorAll","isFocused","document","activeElement","FocusTrap","root","elements","onKeyDown","this","bind","enable","disable","firstElement","lastElement","length","event","key","keyCode","isTabPressed","shiftKey","focus","preventDefault","addEventListener","removeEventListener","locks","disableBodyScroll","targetElement","options","some","lock","undefined","reserveScrollBarGap","scrollBarGap","window","innerWidth","documentElement","clientWidth","computedBodyPaddingRight","parseInt","getComputedStyle","body","getPropertyValue","style","paddingRight","overflow","setOverflowHidden","console","error","enableBodyScroll","filter","bindPrototype","Vue","vfm","show","name","args","toggle","hide","hideAll","openedModals","forEach","modal","$emit","get","modals","find","Object","defineProperty","prototype","defaultOptions","componentName","install","_options","assign","isDuplicateKey","components","warn","component","VueFinalModal","props","$_options","type","default","registComponent"],"mappings":"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"}