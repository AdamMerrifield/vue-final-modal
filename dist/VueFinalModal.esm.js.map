{"version":3,"file":"VueFinalModal.esm.js","sources":["../lib/dom.js","../lib/VueFinalModal.vue","../lib/index.js"],"sourcesContent":["// Stolen from bootstrap vue\n\n// Determine if an element is an HTML element\nexport const isElement = el => !!(el && el.nodeType === Node.ELEMENT_NODE)\n\n// Set an style property on an element\nexport const setStyle = (el, prop, value) => {\n  if (prop && isElement(el)) {\n    el.style[prop] = value\n  }\n}\n\n// Remove an style property from an element\nexport const removeStyle = (el, prop) => {\n  if (prop && isElement(el)) {\n    el.style[prop] = ''\n  }\n}\n","<template>\n  <div\n    v-if=\"ssr || visible\"\n    v-show=\"!ssr || visible\"\n    :style=\"{ zIndex: calculateZIndex }\"\n    class=\"vfm vfm--inset\"\n    :class=\"[\n      attach === false ? 'vfm--fixed' : 'vfm--absolute',\n      { 'vfm--prevent-none': preventClick }\n    ]\"\n  >\n    <transition\n      :name=\"overlayTransition\"\n      @before-enter=\"beforeOverlayEnter\"\n      @after-enter=\"afterOverlayEnter\"\n      @before-leave=\"beforeOverlayLeave\"\n      @after-leave=\"afterOverlayLeave\"\n    >\n      <div\n        v-show=\"!hideOverlay && visibility.overlay\"\n        class=\"vfm__overlay vfm--overlay vfm--absolute vfm--inset\"\n        :class=\"overlayClass\"\n        :aria-expanded=\"visibility.overlay.toString()\"\n      ></div>\n    </transition>\n    <transition\n      :name=\"transition\"\n      @before-enter=\"beforeModalEnter\"\n      @after-enter=\"afterModalEnter\"\n      @before-leave=\"beforeModalLeave\"\n      @after-leave=\"afterModalLeave\"\n    >\n      <div\n        v-show=\"visibility.modal\"\n        ref=\"vfmContainer\"\n        class=\"vfm__container vfm--absolute vfm--inset vfm--outline-none\"\n        :class=\"[classes, { 'vfm--cursor-pointer': clickToClose }]\"\n        :aria-expanded=\"visibility.modal.toString()\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        tabindex=\"-1\"\n        @click=\"onClickContainer\"\n      >\n        <div\n          ref=\"vfmContent\"\n          class=\"vfm__content vfm--cursor-auto\"\n          :class=\"[contentClass, { 'vfm--prevent-auto': preventClick }]\"\n          @click.stop\n        >\n          <slot />\n        </div>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script>\nimport { setStyle, removeStyle } from './dom.js'\n\nconst TransitionState = {\n  Enter: 'enter',\n  Entering: 'entering',\n  Leave: 'leave',\n  Leaving: 'leavng'\n}\n\nfunction validateAttachTarget(val) {\n  const type = typeof val\n\n  if (type === 'boolean' || type === 'string') return true\n\n  return val.nodeType === Node.ELEMENT_NODE\n}\n\nconst CLASS_TYPES = [String, Object, Array]\n\nexport default {\n  name: 'VueFinalModal',\n  props: {\n    name: { type: String, default: null },\n    value: { type: Boolean, default: false },\n    ssr: { type: Boolean, default: true },\n    classes: { type: CLASS_TYPES, default: '' },\n    overlayClass: { type: CLASS_TYPES, default: '' },\n    contentClass: { type: CLASS_TYPES, default: '' },\n    lockScroll: { type: Boolean, default: true },\n    hideOverlay: { type: Boolean, default: false },\n    clickToClose: { type: Boolean, default: true },\n    preventClick: { type: Boolean, default: false },\n    attach: { type: null, default: false, validator: validateAttachTarget },\n    transition: { type: String, default: 'vfm' },\n    overlayTransition: { type: String, default: 'vfm' },\n    zIndexBase: { type: [String, Number], default: 1000 },\n    zIndex: { type: [Boolean, String, Number], default: false }\n  },\n  data: () => ({\n    modalStackIndex: null,\n    visible: false,\n    visibility: {\n      modal: false,\n      overlay: false\n    },\n    overlayTransitionState: null,\n    modalTransitionState: null\n  }),\n  computed: {\n    isComponentReadyToBeDestroyed() {\n      return (\n        (this.hideOverlay ||\n          this.overlayTransitionState === TransitionState.Leave) &&\n        this.modalTransitionState === TransitionState.Leave\n      )\n    },\n    calculateZIndex() {\n      if (typeof this.zIndex === 'boolean') {\n        if (this.attach) {\n          return 'unset'\n        } else {\n          return this.zIndexBase + 2 * (this.modalStackIndex || 0)\n        }\n      } else {\n        return this.zIndex\n      }\n    }\n  },\n  watch: {\n    value(value) {\n      this.mounted()\n      if (!value) {\n        this.close()\n      }\n    },\n    lockScroll: 'handleLockScroll',\n    hideOverlay(value) {\n      if (this.value && !value) {\n        this.visibility.overlay = true\n      }\n    },\n    attach: 'mounted',\n    isComponentReadyToBeDestroyed(isReady) {\n      if (isReady) {\n        this.visible = false\n      }\n    }\n  },\n  created() {\n    this.$vfm.modals.push(this)\n  },\n  mounted() {\n    this.mounted()\n  },\n  beforeDestroy() {\n    this.close()\n    this.$el.remove()\n\n    let index = this.$vfm.modals.findIndex(vm => vm === this)\n    this.$vfm.openedModals.splice(index, 1)\n  },\n  methods: {\n    mounted() {\n      if (this.value) {\n        let target = this.getAttachElement()\n        if (target || this.attach === false) {\n          this.attach !== false && target.appendChild(this.$el)\n          let index = this.$vfm.openedModals.findIndex(vm => vm === this)\n          if (index !== -1) {\n            // if this is already exist in modalStack, delete it\n            this.$vfm.openedModals.splice(index, 1)\n          }\n          this.$vfm.openedModals.push(this)\n\n          this.modalStackIndex = this.$vfm.openedModals.length - 1\n\n          this.handleLockScroll()\n          this.$vfm.openedModals\n            .filter(vm => vm !== this)\n            .forEach((vm, index) => {\n              if (vm.getAttachElement() === target) {\n                // if vm and this have the same attach element\n                vm.modalStackIndex = index\n                vm.visibility.overlay = false\n              }\n            })\n\n          this.visible = true\n          this.$nextTick(() => {\n            this.startTransitionEnter()\n          })\n        } else if (target !== false) {\n          console.warn('Unable to locate target '.concat(this.attach))\n        }\n      }\n    },\n    close() {\n      let index = this.$vfm.openedModals.findIndex(vm => vm === this)\n      if (index !== -1) {\n        // remove this in modalStack\n        this.$vfm.openedModals.splice(index, 1)\n      }\n      if (this.$vfm.openedModals.length > 0) {\n        // If there are still nested modals opened\n        const $_vm = this.$vfm.openedModals[this.$vfm.openedModals.length - 1]\n        $_vm.handleLockScroll()\n        !$_vm.hideOverlay && ($_vm.visibility.overlay = true)\n      } else {\n        // If the closed modal is the last one\n        this.lockScroll && removeStyle(document.body, 'overflow')\n      }\n      this.startTransitionLeave()\n    },\n    startTransitionEnter() {\n      this.visibility.overlay = true\n      this.visibility.modal = true\n    },\n    startTransitionLeave() {\n      this.visibility.overlay = false\n      this.visibility.modal = false\n    },\n    handleLockScroll() {\n      if (this.value) {\n        this.lockScroll\n          ? setStyle(document.body, 'overflow', 'hidden')\n          : removeStyle(document.body, 'overflow')\n      }\n    },\n    getAttachElement() {\n      let target\n      if (this.attach === false) {\n        target = false\n      } else if (typeof this.attach === 'string') {\n        // CSS selector\n        if (window) {\n          target = window.document.querySelector(this.attach)\n        } else {\n          target = false\n        }\n      } else {\n        // DOM Element\n        target = this.attach\n      }\n      return target\n    },\n    beforeOverlayEnter() {\n      this.overlayTransitionState = TransitionState.Entering\n    },\n    afterOverlayEnter() {\n      this.overlayTransitionState = TransitionState.Enter\n    },\n    beforeOverlayLeave() {\n      this.overlayTransitionState = TransitionState.Leaving\n    },\n    afterOverlayLeave() {\n      this.overlayTransitionState = TransitionState.Leave\n    },\n    beforeModalEnter() {\n      this.$emit('before-open')\n      this.modalTransitionState = TransitionState.Entering\n    },\n    afterModalEnter() {\n      this.modalTransitionState = TransitionState.Enter\n      this.$refs.vfmContainer.focus()\n      this.$emit('opened')\n    },\n    beforeModalLeave() {\n      this.$emit('before-close')\n      this.modalTransitionState = TransitionState.Leaving\n    },\n    afterModalLeave() {\n      this.modalTransitionState = TransitionState.Leave\n      this.modalStackIndex = null\n      this.$emit('closed')\n    },\n    onClickContainer() {\n      this.$emit('click-outside')\n      this.clickToClose && this.$emit('input', false)\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\n.vfm--fixed {\n  position: fixed;\n}\n.vfm--absolute {\n  position: absolute;\n}\n.vfm--inset {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.vfm--overlay {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.vfm--prevent-none {\n  pointer-events: none;\n}\n.vfm--prevent-auto {\n  pointer-events: auto;\n}\n.vfm--cursor-pointer {\n  cursor: pointer;\n}\n.vfm--cursor-auto {\n  cursor: auto;\n}\n.vfm--outline-none:focus {\n  outline: none;\n}\n.vfm-enter-active,\n.vfm-leave-active {\n  transition: opacity 0.2s;\n}\n.vfm-enter,\n.vfm-leave-to {\n  opacity: 0;\n}\n</style>\n","import VueFinalModal from './VueFinalModal.vue'\n\nconst Plugin = {\n  install(Vue) {\n    if (Vue.prototype.$vfm) {\n      return\n    }\n    const createVfm = (function() {\n      let vfm\n\n      return function() {\n        if (!vfm) {\n          vfm = {\n            openedModals: [],\n            modals: [],\n            show(name) {\n              this.toggle(name, true)\n            },\n            hide(name) {\n              this.toggle(name, false)\n            },\n            hideAll() {\n              this.openedModals.forEach(modal => {\n                modal.$emit('input', false)\n              })\n            },\n            toggle(name, show) {\n              const modal = this.modals.find(modal => modal.name === name)\n              if (modal !== undefined) {\n                modal.$emit('input', show)\n              }\n            }\n          }\n        }\n        return vfm\n      }\n    })()\n\n    const vfm = createVfm()\n\n    Object.defineProperty(Vue.prototype, '$vfm', {\n      get() {\n        return vfm\n      }\n    })\n\n    Vue.component('VueFinalModal', VueFinalModal)\n  }\n}\n\nexport default Plugin\n"],"names":["isElement","el","nodeType","Node","ELEMENT_NODE","removeStyle","prop","style","value","Plugin","install","Vue","prototype","$vfm","vfm","openedModals","modals","show","name","toggle","hide","hideAll","forEach","modal","$emit","this","find","undefined","createVfm","Object","defineProperty","get","component","VueFinalModal"],"mappings":"qOAGO,IAAMA,EAAY,SAAAC,YAASA,GAAMA,EAAGC,WAAaC,KAAKC,eAUhDC,EAAc,SAACJ,EAAIK,GAC1BA,GAAQN,EAAUC,KACpBA,EAAGM,MAAMD,GAAQ,iDC2DrB,ubARA,i4ED5DwB,IAACL,EAAIK,EAAME,gCAAVP,gBAAUO,YAANF,eACfN,EAAUC,KACpBA,EAAGM,MAAMD,GAAQE,k+JENfC,EAAS,CACbC,iBAAQC,OACFA,EAAIC,UAAUC,UAkCZC,EA/Ba,eACbA,SAEG,kBACAA,IACHA,EAAM,CACJC,aAAc,GACdC,OAAQ,GACRC,cAAKC,QACEC,OAAOD,GAAM,IAEpBE,cAAKF,QACEC,OAAOD,GAAM,IAEpBG,wBACON,aAAaO,SAAQ,SAAAC,GACxBA,EAAMC,MAAM,SAAS,OAGzBL,gBAAOD,EAAMD,OACLM,EAAQE,KAAKT,OAAOU,MAAK,SAAAH,UAASA,EAAML,OAASA,UACzCS,IAAVJ,GACFA,EAAMC,MAAM,QAASP,MAKtBH,GA3BQ,EA+BPc,GAEZC,OAAOC,eAAenB,EAAIC,UAAW,OAAQ,CAC3CmB,sBACSjB,KAIXH,EAAIqB,UAAU,gBAAiBC"}